/*
 *     Generated by class-dump 3.1.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2006 by Steve Nygard.
 */

struct EnrichedState {
    unsigned int excerptLevel:8;
    unsigned int alignment:4;
    unsigned int bold:1;
    unsigned int italic:1;
    unsigned int fixed:1;
    unsigned int underline:1;
    unsigned int fontDelta:16;
    id fontFamily;
    id color;
};

struct NtlmGenerator;

struct OpaqueSecCertificateRef;

struct OpaqueSecKeychainItemRef;

struct OpaqueSecPolicyRef;

struct OpaqueSecTrustRef;

struct SecCmsSignerInfoStr;

struct URegularExpression;

struct _CommandStackEntry {
    struct {
    } *_field1;
    id _field2;
};

struct _MessageSortingInformation {
    char _field1;
    char _field2;
    id _field3;
    void *_field4;
};

struct _NSPoint {
    float _field1;
    float _field2;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _NSRect {
    struct _NSPoint _field1;
    struct _NSSize _field2;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct __CFArray;

struct __CFDictionary;

struct __CFNetDiagnostic;

struct __CFReadStream;

struct __CFRunLoopSource;

struct __CFString;

struct __CFTree;

struct __CFUUID;

struct __CFWriteStream;

struct __LSMMap;

struct __MDQuery;

struct __SCDynamicStore;

struct gss_ctx_id_struct;

struct gss_name_struct;

struct sqlite3;

struct sqlite3_stmt;

typedef struct {
    id _field1;
    id _field2;
    struct __CFDictionary *_field3;
    struct __CFDictionary *_field4;
    unsigned int _field5;
    unsigned int _field6;
    int _field7;
    id _field8;
} CDAnonymousStruct8;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned char _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    unsigned char _field15;
    unsigned char _field16;
} CDAnonymousStruct9;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    char _field3;
    char _field4;
} CDAnonymousStruct1;

typedef struct {
    unsigned int first;
    unsigned int last;
} CDAnonymousStruct2;

typedef struct {
    char *_field1;
    int _field2;
    double _field3;
} CDAnonymousStruct10;

typedef struct {
    int _field1;
    id _field2;
    id _field3;
    union {
        char _field1;
        struct {
            char *_field1;
            int _field2;
            double _field3;
        } _field2;
        struct {
            char *_field1;
            int _field2;
            double _field3;
        } _field3;
        struct {
            id _field1;
        } _field4;
        struct {
            struct __CFReadStream *_field1;
            struct __CFWriteStream *_field2;
        } _field5;
    } _field4;
} CDAnonymousStruct12;

typedef struct {
    int version;
    int count;
    int timeStamp;
    float tocHeight;
    unsigned int sortOrder;
    unsigned int sortedAscending;
    int unused1;
    int unused2;
} CDAnonymousStruct11;

typedef struct {
    unsigned int count;
    unsigned long long size;
} CDAnonymousStruct3;

typedef struct {
    unsigned int reserved:26;
    unsigned int hasCustomEncoding:1;
    unsigned int isPartial:1;
    unsigned int partsHaveBeenCached:1;
    unsigned int hasTemporaryUid:1;
    unsigned int isHTML:1;
    unsigned int isRich:1;
} CDAnonymousStruct4;

typedef struct {
    unsigned short buffer[64];
    struct __CFString *theString;
    unsigned short *directBuffer;
    struct {
        int location;
        int length;
    } rangeToBuffer;
    int bufferedRangeStart;
    int bufferedRangeEnd;
} CDAnonymousStruct5;

typedef struct {
    unsigned int colorHasBeenEvaluated:1;
    unsigned int colorWasSetManually:1;
    unsigned int redColor:8;
    unsigned int greenColor:8;
    unsigned int blueColor:8;
    unsigned int loadingBody:1;
    unsigned int firstUnused:2;
    unsigned int isMarkedForOverwrite:1;
    unsigned int unused:2;
} CDAnonymousStruct6;

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDAnonymousStruct13;

typedef struct {
    id _field1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
} CDAnonymousStruct7;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    char _field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    unsigned int _field9;
    unsigned int _field10;
    char _field11;
} CDAnonymousStruct14;

union _IMAPResponseData {
    struct {
        int responseCode;
        id responseInfoAndOrUserData;
    } basic;
    NSArray *capabilities;
    unsigned int number;
    NSSet *flags;
    struct {
        NSString *mailboxName;
        NSDictionary *entries;
    } status;
    NSArray *searchResults;
    struct {
        unsigned long mailboxAttributes;
        id separatorAndOrMboxName;
    } list;
    struct {
        unsigned long number;
        char isValid;
        NSArray *items;
    } fetch;
    struct {
        NSString *mailboxName;
        NSArray *quotaRootNames;
    } quotaRoot;
    struct {
        NSString *quotaRootName;
        NSArray *quotas;
    } quota;
    struct {
        NSIndexSet *uids;
        IMAPFetchResult *flagsFetchResult;
        unsigned int change:1;
    } uidFlags;
    struct {
        NSString *name;
        NSArray *parameters;
    } other;
};

/*
 * File: Message
 * Arch: Intel 80x86 (i386)
 *       Current version: 907.0.0, Compatibility version: 1.0.0
 */

@protocol ABImageClient <NSObject>
- (void)consumeImageData:(id)fp8 forTag:(int)fp12;
@end

@protocol CalendarStoreConduit <NSObject>
- (id)initWithToDosCache:(id)fp8 todoCalendars:(id)fp12;
- (void)initialSynchronization;
- (id)calTaskWithID:(id)fp8;
- (void)synchronize;
- (void)addToDo:(id)fp8;
- (void)saveToDo:(id)fp8;
- (void)removeToDo:(id)fp8;
- (void)addCalendar:(id)fp8;
- (void)saveCalendar:(id)fp8;
- (void)removeCalendar:(id)fp8;
- (void)addCalendarGroup:(id)fp8;
- (void)saveCalendarGroup:(id)fp8;
- (void)removeCalendarGroup:(id)fp8;
- (void)holdNotifications;
- (void)resumeNotifications;
- (void)recreateIMAPGroups:(id)fp8 calendars:(id)fp12 todos:(id)fp16;
@end

@protocol ChangeMergerObject <NSObject, NSCopying>
- (id)uniqueID;
- (id)changedPropertiesBitField;
- (void)setChangedPropertiesBitField:(id)fp8;
@end

@protocol DataConsumer
- (void)appendData:(id)fp8;
- (void)done;
@end

@protocol IMAPMailboxDelegate <NSObject>
- (void)updateCountFromMailbox:(id)fp8;
- (void)processResponsesFromMailbox:(id)fp8;
- (void)updateUidValidityFromMailbox:(id)fp8;
- (void)updateSelectedGatewayFromMailbox:(id)fp8;
@end

@protocol IMAPObject <NSObject>
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;
- (id)messageID;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)fp8;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)fp8;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)fp8;
- (CDAnonymousStruct4)imapFlags;
- (unsigned int)messageSize;
- (id)subject;
- (id)mailboxName;
- (BOOL)isMetadataMessage;
@end

@protocol IMAPResponseHandler <NSObject>
- (BOOL)handleResponse:(id)fp8;
@end

@protocol LibraryInterface <NSObject>
+ (unsigned int)mailboxIDForMailboxUid:(id)fp8;
+ (id)storeForMailboxID:(unsigned int)fp8;
+ (id)urlForMailboxID:(unsigned int)fp8;
+ (BOOL)addToDos:(id)fp8;
+ (BOOL)deleteToDos:(id)fp8;
+ (BOOL)updateToDos:(id)fp8;
+ (id)allToDos;
+ (id)allToDosForMailboxID:(unsigned int)fp8;
+ (id)allToDosForDocumentID:(id)fp8;
+ (unsigned int)maximumToDoRemoteIDForMailbox:(id)fp8;
+ (BOOL)updateToDo:(id)fp8 toRemoteID:(id)fp12;
+ (unsigned int)toDoMailboxIdForMailAccount:(id)fp8;
+ (id)findToDoIDForAlarmID:(id)fp8;
+ (BOOL)addCalendars:(id)fp8;
+ (BOOL)updateCalendars:(id)fp8;
+ (BOOL)deleteCalendars:(id)fp8;
+ (id)allToDoCalendars;
+ (id)todoIDsMatchingCriterion:(id)fp8;
@end

@protocol LibraryObject <IMAPObject, MFChanging>
- (unsigned int)libraryID;
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;
- (id)remoteID;
- (void)setRemoteID:(id)fp8;
@end

@protocol MFChanging
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)fp8;
@end

@protocol MessageConsumer
- (void)newMessagesAvailable:(id)fp8;
- (void)newMessagesAvailable:(id)fp8 ranks:(id)fp12;
- (BOOL)shouldCancel;
@end

@protocol MonitoredInvocationQueueDelegate
- (void)queueDidEmpty;
@end

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSObject
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)fp8;
- (BOOL)isMemberOfClass:(Class)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol ReconciliationAgent <NSObject>
- (void)prepareToReconcileForID:(unsigned int)fp8;
- (void)startToReconcileForID:(unsigned int)fp8;
- (void)applyReconcilerChangesForID:(unsigned int)fp8;
- (void)finishReconciliationForID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
- (void)processAdds:(id)fp8 updates:(id)fp12 deletes:(id)fp16 mailboxID:(unsigned int)fp20;
@end

@protocol ReconciliationMechanism <NSObject>
- (void)performReconciliationForID:(unsigned int)fp8 usingAgents:(id)fp12;
- (BOOL)areAgentsValid:(id)fp8;
@end

@protocol RouterStore <NSObject>
- (void)messagesWillBeRouted:(id)fp8;
- (void)messagesWereRouted:(id)fp8;
- (void)cancel;
@end

@protocol SASLSecurityLayer <NSObject>
- (unsigned int)encryptionBufferSize;
- (id)createDecryptedDataForBytes:(const char *)fp8 length:(unsigned int)fp12;
- (id)createEncryptedDataForBytes:(const char *)fp8 length:(unsigned int)fp12;
@end

@protocol SyncableApp
- (id)syncerForDataType:(int)fp8;
- (id)ownerForDataType:(int)fp8;
- (id)interestedPartiesForDataType:(int)fp8;
- (BOOL)tellInterestedPartiesDataWillBeSyncedForDataType:(int)fp8;
- (void)tellInterestedPartiesDataWasSyncedForDataType:(int)fp8;
- (void)client:(id)fp8 mightWantToSyncEntityNames:(id)fp12;
@end

@protocol SyncableDataInterestedParty <NSObject>
- (BOOL)dataWillBeSynced;
- (void)dataWasSynced;
@end

@protocol SyncableDataOwner <NSObject>
- (BOOL)dataWillBeSyncedVersion:(id *)fp8 data:(id *)fp12;
- (BOOL)dataWasSyncedVersion:(id)fp8 newData:(id)fp12 acceptedChanges:(id)fp16;
@end

@protocol ToDoConsumer
- (void)newToDosAvailable:(id)fp8;
- (BOOL)shouldCancel;
@end

@protocol ToDosCacheListener <NSObject>
- (void)todoAddedToCache:(id)fp8;
- (void)todoRemovedFromCache:(id)fp8;
@end

@interface MailboxUidWrapper : NSProxy
{
    MailboxUid *_wrappedMailbox;
    BOOL _hasAlternateParent;
}

- (id)initWithMailboxUid:(id)fp8;
- (void)dealloc;
- (void)setRepresentedMailbox:(id)fp8;
- (id)representedMailbox;
- (BOOL)hasAlternateParent;
- (void)setHasAlternateParent:(BOOL)fp8;
- (void)_unreadCountChanged:(id)fp8;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (unsigned int)hash;
- (BOOL)isEqual:(id)fp8;
- (BOOL)isKindOfClass:(Class)fp8;
- (id)tildeAbbreviatedPath;

@end

@interface RSSAccount : LocalAccount <SyncableDataInterestedParty>
{
    NSMutableSet *_feedsToDisplayUnderInbox;
    NSMutableArray *_deletedFeedURLs;
    id <Syncer> _bookmarksSyncManager;
    BOOL _isSyncing;
    BOOL _childrenHaveBeenSet;
}

+ (id)sharedAccount;
+ (id)defaultPathNameForAccount;
+ (id)accountTypeString;
+ (id)feedNameForSuggestedName:(id)fp8 feedURL:(id)fp12;
- (void)dealloc;
- (id)init;
- (id)initWithPath:(id)fp8;
- (id)uniqueId;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (id)primaryMailboxUid;
- (id)displayName;
- (BOOL)canFetch;
- (BOOL)shouldAutoFetch;
- (void)fetchSynchronously;
- (void)updateFeed:(id)fp8;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)fp8;
- (BOOL)rootChildrenCanBePromoted;
- (id)trashMailboxUidCreateIfNeeded:(BOOL)fp8;
- (void)setupDefaultFeeds;
- (void)_setupDefaultFeedsWithDictionary:(id)fp8;
- (id)_URLScheme;
- (void)_loadMailboxListingIntoCache:(id)fp8 attributes:(unsigned int)fp12 parent:(id)fp16;
- (id)_copyMailboxUidWithParent:(id)fp8 name:(id)fp12 attributes:(unsigned int)fp16 existingMailboxUid:(id)fp20;
- (BOOL)_setChildren:(id)fp8 forMailboxUid:(id)fp12;
- (void)_validateRSSMailboxes:(id)fp8;
- (id)createMailboxWithParent:(id)fp8 name:(id)fp12;
- (BOOL)deleteMailbox:(id)fp8;
- (BOOL)_deleteMailbox:(id)fp8 withBookmarksManager:(id)fp12 saveImmediately:(BOOL)fp16;
- (BOOL)_deleteMailbox:(id)fp8;
- (void)_finishSynchronizingMailboxesAfterImport;
- (id)bookmarksSyncManager;
- (BOOL)renameFeed:(id)fp8 newName:(id)fp12 onlyIfNeeded:(BOOL)fp16;
- (void)subscribeToFeeds:(id)fp8 names:(id)fp12 parent:(id)fp16 displayUnderInbox:(id)fp20;
- (id)subscribeToFeed:(id)fp8 name:(id)fp12 parent:(id)fp16 addToBookmarks:(BOOL)fp20;
- (id)_subscribeToFeed:(id)fp8 name:(id)fp12 parent:(id)fp16 displayUnderInbox:(BOOL)fp20 addToBookmarks:(BOOL)fp24 select:(BOOL)fp28;
- (id)feedForURL:(id)fp8;
- (id)feedsToDisplayUnderInbox;
- (id)feedToDisplayUnderInboxForMailboxUid:(id)fp8;
- (void)setFeed:(id)fp8 displaysUnderInbox:(BOOL)fp12 updateCache:(BOOL)fp16 select:(BOOL)fp20;
- (void)setFeed:(id)fp8 displaysUnderInbox:(BOOL)fp12 updateCache:(BOOL)fp16;
- (void)setFeeds:(id)fp8 displayUnderInbox:(BOOL)fp12 updateCache:(BOOL)fp16;
- (void)syncBookmarksConditionally:(BOOL)fp8;
- (BOOL)dataWillBeSynced;
- (void)dataWasSynced;
- (void)_dataWasSynced;
- (BOOL)supportsMetadata;
- (id)todoCalendarsAccount;
- (BOOL)allowsCalendarCreation;

@end

@interface NSPrivateMessageClassForFindingBundle : NSObject
{
}

@end

@interface MessageStore : SafeObserver
{
    struct {
        unsigned int isReadOnly:1;
        unsigned int hasUnsavedChangesToMessageData:1;
        unsigned int haveOpenLockFile:1;
        unsigned int rebuildingTOC:1;
        unsigned int compacting:1;
        unsigned int cancelInvalidation:1;
        unsigned int forceInvalidation:1;
        unsigned int isWritingChangesToDisk:1;
        unsigned int isTryingToClose:1;
        unsigned int compactOnClose:1;
        unsigned int isOpenedByUser:1;
        unsigned int reserved:21;
    } _flags;
    MailboxUid *_mailboxUid;
    MailAccount *_account;
    NSMutableArray *_allMessages;
    unsigned int _allMessagesSize;
    unsigned int _deletedMessagesSize;
    unsigned int _deletedMessageCount;
    unsigned int _unreadMessageCount;
    int _state;
    union {
        struct {
            ObjectCache *_headerDataCache;
            ObjectCache *_headerCache;
            ObjectCache *_bodyDataCache;
            ObjectCache *_bodyCache;
        } objectCaches;
        struct {
            struct __CFDictionary *_headerDataCache;
            struct __CFDictionary *_headerCache;
            struct __CFDictionary *_bodyDataCache;
            struct __CFDictionary *_bodyCache;
        } intKeyCaches;
    } _caches;
    NSTimer *_timer;
    NSMutableSet *_uniqueStrings;
    double timeOfLastAutosaveOperation;
    ActivityMonitor *_openMonitor;
}

+ (void)initialize;
+ (id)_storeCacheMapTable;
+ (unsigned int)numberOfCurrentlyOpenStores;
+ (id)descriptionOfOpenStores;
+ (id)currentlyAvailableStoreForUid:(id)fp8;
+ (id)currentlyAvailableStoresForAccount:(id)fp8;
+ (id)registerAvailableStore:(id)fp8;
+ (void)removeStoreFromCache:(id)fp8;
+ (BOOL)createEmptyStoreIfNeededForPath:(id)fp8 notIndexable:(BOOL)fp12;
+ (BOOL)createEmptyStoreForPath:(id)fp8;
+ (BOOL)storeAtPathIsWritable:(id)fp8;
+ (BOOL)cheapStoreAtPathIsEmpty:(id)fp8;
+ (id)succesfulMessagesFromMessages:(id)fp8 unsuccessfulOnes:(id)fp12;
+ (int)copyMessages:(id)fp8 toMailboxUid:(id)fp12 shouldDelete:(BOOL)fp16;
- (void)queueSaveChangesInvocation;
- (id)willDealloc;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (void)finalize;
- (void)openAsynchronouslyUpdatingMetadata:(BOOL)fp8;
- (void)openAsynchronously;
- (void)openAsynchronouslyWithOptions:(unsigned int)fp8;
- (void)openSynchronously;
- (void)openSynchronouslyWithoutUserInteraction;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)fp8;
- (void)updateMetadataAsynchronously;
- (void)updateMetadata;
- (void)cleanupAsynchronously;
- (void)cleanupSynchronously;
- (void)didOpen;
- (void)cancelOpen;
- (void)_setOpenMonitor:(id)fp8;
- (void)writeUpdatedMessageDataToDisk;
- (void)invalidateSavingChanges:(BOOL)fp8;
- (id)account;
- (id)mailboxUid;
- (id)allMailboxUidRepresentations;
- (BOOL)isOpened;
- (id)storePathRelativeToAccount;
- (id)displayName;
- (const char *)displayNameForLogging;
- (BOOL)isReadOnly;
- (id)description;
- (BOOL)isTrash;
- (BOOL)isDrafts;
- (void)messageFlagsDidChange:(id)fp8 flags:(id)fp12;
- (void)structureDidChange;
- (void)messagesWereAdded:(id)fp8;
- (void)messagesWereCompacted:(id)fp8;
- (void)messagesWereUpdated:(id)fp8;
- (void)updateUserInfoToLatestValues;
- (unsigned int)totalMessageSize;
- (void)deletedCount:(unsigned int *)fp8 andSize:(unsigned int *)fp12;
- (unsigned int)totalCount;
- (unsigned int)unreadCount;
- (unsigned int)indexOfMessage:(id)fp8;
- (id)copyOfAllMessages;
- (id)mutableCopyOfAllMessages;
- (id)copyOfAllMessagesWithOptions:(unsigned int)fp8;
- (void)addMessagesToAllMessages:(id)fp8;
- (void)addMessageToAllMessages:(id)fp8;
- (void)insertMessageToAllMessages:(id)fp8 atIndex:(unsigned int)fp12;
- (id)_defaultRouterDestination;
- (id)routeMessages:(id)fp8;
- (id)finishRoutingMessages:(id)fp8 routed:(id)fp12;
- (id)routeMessages:(id)fp8 isUserAction:(BOOL)fp12;
- (BOOL)canRebuild;
- (void)rebuildTableOfContentsAsynchronously;
- (BOOL)canCompact;
- (void)doCompact;
- (void)doCompactToDos;
- (void)deleteMessagesOlderThanNumberOfDays:(int)fp8 compact:(BOOL)fp12;
- (void)deleteMessages:(id)fp8 moveToTrash:(BOOL)fp12;
- (void)undeleteMessages:(id)fp8;
- (void)deleteLastMessageWithHeaders:(id)fp8 compactWhenDone:(BOOL)fp12;
- (BOOL)allowsAppend;
- (BOOL)allowsOverwrite;
- (BOOL)isALocalStore;
- (int)undoAppendOfMessageIDs:(id)fp8;
- (void)finishCopyOfMessages:(id)fp8 fromStore:(id)fp12 originalsWereDeleted:(BOOL)fp16;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 newDocumentIDsByOld:(id)fp24 flagsToSet:(id)fp28 forMove:(BOOL)fp32 error:(id *)fp36;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 flagsToSet:(id)fp24 forMove:(BOOL)fp28 error:(id *)fp32;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 flagsToSet:(id)fp24 forMove:(BOOL)fp28;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 flagsToSet:(id)fp24;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 forMove:(BOOL)fp24;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12;
- (id)messageWithValue:(id)fp8 forHeader:(id)fp12 options:(unsigned int)fp16;
- (id)messageForMessageID:(id)fp8;
- (id)headerDataForMessage:(id)fp8;
- (id)bodyDataForMessage:(id)fp8;
- (id)fullBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)fullBodyDataForMessage:(id)fp8;
- (id)bodyForMessage:(id)fp8 fetchIfNotAvailable:(BOOL)fp12;
- (id)bodyForMessage:(id)fp8 fetchIfNotAvailable:(BOOL)fp12 updateFlags:(BOOL)fp16;
- (id)headersForMessage:(id)fp8;
- (id)headersForMessage:(id)fp8 fetchIfNotAvailable:(BOOL)fp12;
- (id)dataForMimePart:(id)fp8;
- (BOOL)hasCachedDataForMimePart:(id)fp8;
- (id)uniquedString:(id)fp8;
- (id)colorForMessage:(id)fp8;
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forToDos:(id)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forMessage:(id)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forToDo:(id)fp12;
- (void)setFlag:(id)fp8 state:(BOOL)fp12 forMessages:(id)fp16;
- (BOOL)hasUnsavedChangesToMessageData;
- (void)setColor:(id)fp8 highlightTextOnly:(BOOL)fp12 forMessages:(id)fp16;
- (void)messageColorsNeedToBeReevaluated;
- (void)startSynchronization;
- (id)_getSerialNumberString;
- (void)setNumberOfAttachments:(unsigned int)fp8 isSigned:(BOOL)fp12 isEncrypted:(BOOL)fp16 forMessage:(id)fp20;
- (void)updateNumberOfAttachmentsForMessages:(id)fp8;
- (void)updateMessageColorsSynchronouslyForMessages:(id)fp8;
- (void)updateMessageColorsAsynchronouslyForMessages:(id)fp8;
- (void)setJunkMailLevel:(int)fp8 forMessages:(id)fp12;
- (void)setJunkMailLevel:(int)fp8 forMessages:(id)fp12 trainJunkMailDatabase:(BOOL)fp16;
- (void)setJunkMailLevel:(int)fp8 forMessages:(id)fp12 trainJunkMailDatabase:(BOOL)fp16 userRecorded:(BOOL)fp20;
- (id)status;
- (void)fetchSynchronously;
- (BOOL)setPreferredEncoding:(unsigned long)fp8 forMessage:(id)fp12;
- (void)suggestSortOrder:(id)fp8 ascending:(BOOL)fp12;
- (id)sortOrder;
- (BOOL)isSortedAscending;
- (void)todosDidChangeForMessages:(id)fp8 oldToDosByMessage:(id)fp12 newToDosByMessage:(id)fp16;
- (int)setToDo:(id)fp8 forMessage:(id)fp12 oldToDo:(id)fp16;
- (void)invalidateMessage:(id)fp8;
- (void)invalidateMessages:(id)fp8;

@end

@interface MessageStore (MessageFrameworkOnly)
+ (void)_autosaveMessageStore:(void *)fp8;
- (void)_cancelAutosave;
- (void)_setNeedsAutosave;
- (id)_fetchHeaderDataForMessage:(id)fp8;
- (id)_fetchBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)_fetchBodyForMessage:(id)fp8 updateFlags:(BOOL)fp12;
- (id)_fetchBodyForMessage:(id)fp8;
- (BOOL)_shouldCallCompactWhenClosing;
- (void)_compactMessageAtIndex:(unsigned int)fp8;
- (BOOL)_isReadyToBeInvalidated;
- (void)_saveChanges;
- (void)_setState:(int)fp8;
- (void)_invalidate;
- (void)_invalidateInBackground;
- (void)_countUnreadAndDeleted;
- (void)_cleanUpStaleAttachments;
- (id)_lockFilePath;
- (BOOL)_acquireLockFile:(id)fp8;
- (void)_removeLockFile:(id)fp8;
- (void)_flushAllCaches;
- (void)_flushAllMessageData;
- (void)_rebuildTableOfContentsSynchronously;
- (void)updateBodyFlagsForMessage:(id)fp8 body:(id)fp12;
- (id)_setOrGetBody:(id)fp8 forMessage:(id)fp12 updateFlags:(BOOL)fp16;
- (id)_setOrGetBody:(id)fp8 forMessage:(id)fp12;
- (id)_cachedBodyForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeadersForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedBodyDataForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeaderDataForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (void)updateMessageColorsSynchronouslyForMessages:(id)fp8 postingNotification:(BOOL)fp12;
- (void)updateMessages:(id)fp8 updateColor:(BOOL)fp12 updateNumberOfAttachments:(BOOL)fp16;
- (void)_setBackgroundColorForMessages:(id)fp8 textColorForMessages:(id)fp12;
- (void)_invalidateColorForMessages:(id)fp8;
- (void)_setFlagsForMessages:(id)fp8 mask:(unsigned long)fp12;
- (void)_setFlagsAndColorForMessages:(id)fp8;
- (void)messagesWereAdded:(id)fp8 forIncrementalLoading:(BOOL)fp12;
- (BOOL)_updateFlagForMessage:(id)fp8 key:(id)fp12 value:(BOOL)fp16;
@end

@interface _NSDataMessageStoreMessage : Message
{
}

- (id)initWithStore:(id)fp8;
- (void)dealloc;

@end

@interface NSDataMessageStore : MessageStore
{
    NSData *_data;
}

- (id)initWithData:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)storePath;
- (void)writeUpdatedMessageDataToDisk;
- (id)message;
- (id)headerDataForMessage:(id)fp8;
- (id)bodyDataForMessage:(id)fp8;
- (id)_cachedBodyForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeadersForMessage:(id)fp8 valueIfNotPresent:(id)fp12;

@end

@interface MessageRouter : NSObject <SyncableDataOwner>
{
    MessageStore *_store;
    NSMutableArray *_queuedMessages;
    NSConditionLock *_queuedMessagesFull;
    NSConditionLock *_queuedMessagesEmpty;
    NSLock *_queuedMessagesRouting;
    unsigned int _bytesInQueue;
    unsigned int _queueSize;
    BOOL _routingThreadShouldQuit;
    unsigned int _numMessagesRoutedSoFar;
    unsigned int _numMessagesToBeRouted;
    BOOL _isUserAction;
}

+ (id)writeRulesTimer;
+ (void)setWriteRulesTimer:(id)fp8;
+ (void)scheduleWriteRules;
+ (void)unScheduleWriteRules;
+ (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
+ (void)initialize;
+ (void)_updateICalRule:(BOOL)fp8;
+ (void)_setupAddInvitationDefault;
+ (void)_iCalSettingChangedFromICal:(id)fp8;
+ (BOOL)_hasColorRules;
+ (int)colorChangeCounter;
+ (void)setColorChangeCounter:(int)fp8;
+ (void)enqueueColorRulesDidChange;
+ (BOOL)_colorRuleExistsAfterRule:(id)fp8;
+ (BOOL)colorsUpdateDynamically;
+ (void)ruleAffectingColorsDidChange:(id)fp8;
+ (void)ruleDidChange:(id)fp8;
+ (void)mailboxWillBeRenamedOrInvalidated;
+ (void)_mailboxBecameInvalid:(id)fp8;
+ (void)_mailboxWasRenamed:(id)fp8;
+ (id)defaultAppleEmailAddresses;
+ (id)_defaultSortRules;
+ (id)sortRulesPath;
+ (id)oldSortRulesPath;
+ (id)iCalRule;
+ (BOOL)_setICalRule:(id)fp8;
+ (id)_sortRulesFromDictionaryRepresentations:(id)fp8 junkRule:(id *)fp12 iCalRule:(id *)fp16;
+ (id)_sortRuleDictionaryRepresentations;
+ (void)_setupSortRules;
+ (id)_readRulesFromDiskOldStyle;
+ (id)_readRulesFromDisk;
+ (void)writeRulesToDiskInBackground;
+ (void)synchronouslyWriteRulesToDisk;
+ (id)rules;
+ (unsigned int)numberOfRules;
+ (id)ruleAtIndex:(int)fp8;
+ (void)removeRuleAtIndex:(int)fp8;
+ (void)insertRule:(id)fp8 atIndex:(int)fp12;
+ (void)addRule:(id)fp8;
+ (void)removeRule:(id)fp8;
+ (void)tryToReconnectAutoDeactivatedRules;
+ (void)loadDestinationMailboxes;
+ (void)_mailboxListingChanged:(id)fp8;
+ (id)headersRequiredForRouting;
+ (void)headersRequiredForRoutingDidChange;
+ (void)putRulesThatWantsToHandleMessage:(id)fp8 intoArray:(id)fp12 colorRulesOnly:(BOOL)fp16;
+ (id)colorForMessage:(id)fp8 highlightTextUsingColor:(char *)fp12;
+ (int)junkMailBehavior;
+ (void)setJunkMailBehavior:(int)fp8;
+ (void)evaluateJunkMailBehaviorFromRules;
+ (void)reevaluateJunkMessagesInMailboxes:(id)fp8;
+ (id)junkMailRuleForBehavior:(int)fp8 abCriterion:(BOOL)fp12 ahCriterion:(BOOL)fp16 fnCriterion:(BOOL)fp20;
+ (id)junkMailRule;
+ (void)setJunkMailRule:(id)fp8;
+ (id)userJunkMailRule;
+ (id)defaultJunkMailRule;
+ (BOOL)junkMailEvaluationAfterRules;
+ (void)setJunkMailEvaluationAfterRules:(BOOL)fp8;
+ (BOOL)junkMailTrustHeaders;
+ (void)setJunkMailTrustHeaders:(BOOL)fp8;
+ (id)junkMailHeaderFlags;
+ (void)_applyRulesToMailboxUids:(id)fp8;
+ (void)applyRulesAsynchronouslyToMailboxUids:(id)fp8;
+ (BOOL)addInvitationsToICalAutomatically;
+ (BOOL)_addICalRule;
+ (void)setAddInvitationsToICalAutomatically:(BOOL)fp8;
+ (void)addInvitationsToICalFromMessages:(id)fp8;
+ (void)installNewRulesFromPlist:(id)fp8;
- (BOOL)_routeMessagesIndividually;
- (id)routeMessages:(id)fp8 fromStores:(id)fp12;
- (void)asynchronouslyRouteMessages:(id)fp8;
- (void)routeQueuedMessages;
- (void)waitForRoutingToFinish;
- (void)setStore:(id)fp8;
- (void)setEstimatedNumberOfMessagesToRoute:(unsigned int)fp8;
- (void)dealloc;
- (void)finalize;
- (void)setIsUserAction:(BOOL)fp8;
- (BOOL)dataWillBeSyncedVersion:(id *)fp8 data:(id *)fp12;
- (BOOL)dataWasSyncedVersion:(id)fp8 newData:(id)fp12 acceptedChanges:(id)fp16;
- (id)newRulesArrayWithJunkAndICalRules:(id)fp8;

@end

@interface MessageRule : NSObject <NSCopying, MFChanging>
{
    NSString *_ruleName;
    BOOL _didChange;
    BOOL _isChanging;
    NSMutableArray *_criteria;
    MailboxUid *_destinationMailbox;
    NSString *_destinationMailboxURL;
    NSString *_soundPath;
    NSString *_speechAlert;
    NSArray *_recipients;
    int _autoResponseType;
    NSString *_responseMessage;
    NSColor *_color;
    NSString *_appleScriptPath;
    unsigned int _flags;
    unsigned int _isActive:1;
    unsigned int _shouldTransferMessage:1;
    unsigned int _shouldCopyMessage:1;
    unsigned int _allCriteriaMustBeSatisfied:1;
    unsigned int _shouldStopEvaluatingRules:1;
    unsigned int _highlightTextUsingColor:1;
    unsigned int _shouldNotifyUser:1;
    unsigned int _addInvitationAttachmentToICal:1;
    unsigned int _ruleWasAutoDeactivated:1;
    NSNumber *_isActiveSyncState;
    NSDictionary *_otherInfo;
    MailboxUid *_copyDestinationMailbox;
    NSString *_copyDestinationMailboxURL;
    unsigned short _version;
    BOOL _isJunkMailRule;
    BOOL _isICalRule;
    NSString *_uniqueId;
}

+ (void)initialize;
+ (id)appleScriptLock;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)description;
- (BOOL)isEqual:(id)fp8;
- (BOOL)isEquivalentExceptForTitleAndIDs:(id)fp8;
- (id)uniqueId;
- (id)init;
- (id)initWithRule:(id)fp8;
- (id)mailboxURLForMailboxUid:(id)fp8;
- (id)mailboxPathForMailboxURL:(id)fp8 createIfNeeded:(BOOL)fp12;
- (id)initWithDictionaryRepresentation:(id)fp8;
- (id)dictionaryRepresentation;
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)fp8;
- (void)_updateDefaultAppleEmailAddressRule;
- (void)_appendMessages:(id)fp8 fromSourceMailbox:(id)fp12 toDestinationMailbox:(id)fp16 destinationStores:(id)fp20 rejectedMessages:(id)fp24 messagesToBeDeleted:(id)fp28;
- (void)performActionsOnMessages:(id)fp8 destinationStores:(id)fp12 rejectedMessages:(id)fp16 messagesToBeDeleted:(id)fp20;
- (id)_performAutoResponseActionOnMessage:(id)fp8 encrypt:(BOOL)fp12 includeOrignalMessageText:(BOOL)fp16;
- (void)_performAutoResponseActionOnMessages:(id)fp8;
- (void)_performAppleScriptActionWithMessages:(id)fp8;
- (void)_performAddInvitationAttachmentToICalActionOnMessages:(id)fp8;
- (void)addHeadersRequiredForRoutingToArray:(id)fp8;
- (BOOL)doesMessageSatisfyCriteria:(id)fp8;
- (BOOL)isValid:(id *)fp8 options:(unsigned long)fp12;
- (void)performPostSyncingValidation;
- (id)ruleName;
- (void)setRuleName:(id)fp8;
- (unsigned short)version;
- (void)setVersion;
- (void)clearVersion;
- (BOOL)isTerminalAction;
- (BOOL)isJunkMailRule;
- (void)setIsJunkMailRule:(BOOL)fp8;
- (BOOL)hasJunkMailCriterion;
- (BOOL)isActive;
- (void)setIsActive:(BOOL)fp8;
- (BOOL)isActiveSyncState;
- (void)setIsActiveSyncState:(BOOL)fp8;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)fp8;
- (id)criteria;
- (void)setCriteria:(id)fp8;
- (BOOL)shouldTransferMessage;
- (void)setShouldTransferMessage:(BOOL)fp8;
- (BOOL)shouldCopyMessage;
- (void)setShouldCopyMessage:(BOOL)fp8;
- (id)_destinationMailbox:(id)fp8 withURL:(id)fp12 setUsingSelector:(SEL)fp16 createIfNeeded:(BOOL)fp20;
- (void)_setDestinationIvar:(id *)fp8 toDestinationMailbox:(id)fp12 destinationURLIvar:(id *)fp16;
- (id)_destinationMailboxCreateIfNeeded:(BOOL)fp8;
- (id)destinationMailbox;
- (void)setDestinationMailbox:(id)fp8;
- (id)_copyDestinationMailboxCreateIfNeeded:(BOOL)fp8;
- (id)copyDestinationMailbox;
- (void)setCopyDestinationMailbox:(id)fp8;
- (id)_tryToGetMailboxUidForURL:(id)fp8;
- (void)tryToReconnectDestinationIfNeeded;
- (BOOL)invalidateDestinationMailboxesForURLString:(id)fp8;
- (id)appleScriptDestinationMailbox;
- (id)appleScriptCopyDestinationMailbox;
- (void)_evaluateIfNeeded:(id)fp8 andSetUsingSelector:(SEL)fp12;
- (void)setAppleScriptCopyDestinationMailbox:(id)fp8;
- (void)setAppleScriptDestinationMailbox:(id)fp8;
- (unsigned long)flagsToApply;
- (void)setFlagsToApply:(unsigned long)fp8;
- (id)appleScriptPath;
- (void)setAppleScriptPath:(id)fp8;
- (id)color;
- (void)setColor:(id)fp8;
- (BOOL)highlightTextUsingColor;
- (void)setHighlightTextUsingColor:(BOOL)fp8;
- (BOOL)affectsColorEvaluation;
- (int)autoResponseType;
- (void)setAutoResponseType:(int)fp8;
- (id)autoResponseRecipients;
- (void)setAutoResponseRecipients:(id)fp8;
- (id)responseMessage;
- (void)handleDidChange;
- (void)setResponseMessage:(id)fp8;
- (id)soundPath;
- (void)setSoundPath:(id)fp8;
- (id)speechAlert;
- (void)setSpeechAlert:(id)fp8;
- (BOOL)shouldStopEvaluatingRules;
- (void)setShouldStopEvaluatingRules:(BOOL)fp8;
- (BOOL)shouldNotifyUser;
- (void)setShouldNotifyUser:(BOOL)fp8;
- (BOOL)addInvitationAttachmentToICal;
- (void)setAddInvitationAttachmentToICal:(BOOL)fp8;
- (void)setIsICalRule:(BOOL)fp8;
- (BOOL)isICalRule;
- (void)updateToNewestVersion;
- (id)objectSpecifier;

@end

@interface MessageRule (Applescript)
- (void)updateIsActive;
- (int)actionColorMessage;
- (void)setActionColorMessage:(int)fp8;
- (int)highlightColorValue:(id)fp8;
- (BOOL)actionDeleteMessage;
- (void)setActionDeleteMessage:(BOOL)fp8;
- (id)actionForwardToAddress;
- (void)setActionForwardToAddress:(id)fp8;
- (id)actionForwardText;
- (void)setActionForwardText:(id)fp8;
- (BOOL)actionMarkAsFlagged;
- (void)setActionMarkAsFlagged:(BOOL)fp8;
- (BOOL)actionMarkAsRead;
- (void)setActionMarkAsRead:(BOOL)fp8;
- (id)actionPlaySound;
- (void)setActionPlaySound:(id)fp8;
- (id)actionRedirectToAddress;
- (void)setActionRedirectToAddress:(id)fp8;
- (id)actionReplyText;
- (void)setActionReplyText:(id)fp8;
- (id)actionRunApplescript;
- (void)setActionRunApplescript:(id)fp8;
- (id)ruleDescription;
- (void)setRuleDescription:(id)fp8;
- (void)insertInCriteria:(id)fp8 atIndex:(unsigned int)fp12;
- (void)insertInCriteria:(id)fp8;
- (void)removeFromCriteriaAtIndex:(unsigned int)fp8;
- (void)setAddress:(id)fp8 forResponseType:(int)fp12;
@end

@interface MessageRuleCriterion : MessageCriterion
{
    MessageRule *_rule;
}

+ (id)noJunkCriterion;
+ (id)noTrashCriterion;
+ (id)noSentCriterion;
- (void)setRuleType:(int)fp8;
- (void)setRuleQualifier:(int)fp8;
- (void)setRuleExpression:(id)fp8;
- (void)setMessageRule:(id)fp8;
- (void)setCriterionIdentifier:(id)fp8;
- (id)objectSpecifier;
- (BOOL)performPostSyncingValidation;

@end

@interface ExchangeConnection : IMAPConnection
{
}

- (BOOL)_isFetchResponseValid:(id)fp8;

@end

@interface IMAPConnection : Connection
{
    IMAPAccount *_IMAPAccount;
    unsigned int _capabilityFlags:10;
    unsigned int _connectionState:3;
    NSMutableSet *_capabilities;
    NSString *_separatorChar;
    NSString *_selectedMailbox;
    IMAPMailbox *_selectedIMAPMailbox;
    BOOL _selectedMailboxIsReadOnly;
    BOOL _canStartIdle;
    unsigned int _commandNumber;
    unsigned int _readBufferSize;
    double _expirationTime;
    InvocationQueue *_streamEventQueue;
    unsigned int _fetchSizeNextReadingIndex;
    double _fetchSizeRollingAverage;
    BOOL _fetchSizeFirstTime;
    BOOL _fetchSizeFilledHistory;
    double _fetchSizeRecentTimes[8];
    IMAPGateway *_gateway;
    NSRecursiveLock *_validatingLock;
}

+ (void)initialize;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
+ (void)_setReadSizeParameters;
- (id)initWithPendingGateway:(BOOL)fp8 account:(id)fp12;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)displayName;
- (BOOL)reconnect;
- (void)_setupConnection;
- (BOOL)_teardownConnectionWithResult:(BOOL)fp8;
- (void)disconnectAndNotify:(BOOL)fp8;
- (void)disconnect;
- (void)quit;
- (BOOL)_tryToStartValidating;
- (void)setIsValidating:(BOOL)fp8;
- (BOOL)isValidating;
- (id)gateway;
- (id)_gateway;
- (int)connectionState;
- (int)currentConnectionState;
- (void)_transitionToState:(int)fp8;
- (void)_transitionToState:(int)fp8 selectedMailbox:(id)fp12 readOnly:(BOOL)fp16;
- (void)_setSelectedMailbox:(id)fp8;
- (id)mailboxNameIfSelected:(BOOL)fp8;
- (id)selectedIMAPMailbox;
- (BOOL)needsSelectForMailboxName:(id)fp8 gateway:(id)fp12;
- (BOOL)isValid;
- (BOOL)isValidPreferringNetworkCheck:(BOOL)fp8;
- (BOOL)isDisconnected;
- (BOOL)executeClientOperation:(id)fp8;
- (BOOL)_sendCommand:(id)fp8 response:(id *)fp12;
- (void)_socketDiedError:(id *)fp8;
- (BOOL)_writeData:(id)fp8 dontLogBytesInRange:(struct _NSRange)fp12 error:(id *)fp20;
- (BOOL)_readLineIntoData:(id)fp8 error:(id *)fp12;
- (BOOL)_readBytesIntoData:(id)fp8 desiredLength:(unsigned int)fp12 error:(id *)fp16;
- (id)_copyNextServerResponse:(id *)fp8;
- (id)_copyNextTaggedOrContinuationResponseForCommand:(id)fp8;
- (id)_copyNextTaggedOrContinuationResponseForCommand:(id)fp8 exists:(unsigned int *)fp12;
- (id)_errorForResponse:(id)fp8 operation:(id)fp12;
- (id)capabilities;
- (BOOL)supportsCapability:(int)fp8;
- (void)updateCanStartIdle:(BOOL)fp8;
- (void)_clearCapabilities;
- (void)_addToCapabilities:(id)fp8;
- (void)_fetchCapabilitiesIfNeeded;
- (BOOL)executeCapability:(id)fp8;
- (BOOL)executeNoop:(id)fp8;
- (BOOL)authenticateUsingAccount:(id)fp8;
- (BOOL)_reauthenticate;
- (BOOL)_authenticateUsingAccount:(id)fp8 authenticator:(id)fp12;
- (int)_authenticateUsingHostname:(id)fp8 username:(id)fp12 password:(id)fp16 authenticator:(id)fp20;
- (BOOL)executeAuthenticate:(id)fp8;
- (int)_startTLSForSecurityLayerType:(int)fp8;
- (id)_getServerAlertErrorFromResponse:(id)fp8 forCommand:(id)fp12;
- (BOOL)_loginWithUsername:(id)fp8 password:(id)fp12;
- (BOOL)executeLogin:(id)fp8;
- (BOOL)executeLogout:(id)fp8;
- (id)separatorChar;
- (void)setSeparatorChar:(id)fp8;
- (BOOL)executeListOrLSub:(id)fp8;
- (BOOL)executeUnselect:(id)fp8;
- (void)handleStreamEvent:(id)fp8;
- (void)handleBytesAvailable;
- (BOOL)isIdle;
- (void)startIdle;
- (BOOL)executeIdle:(id)fp8;
- (BOOL)executeDone:(id)fp8;
- (BOOL)executeUIDExpunge:(id)fp8;
- (BOOL)executeStatus:(id)fp8;
- (BOOL)executeSubscribeOperation:(id)fp8;
- (BOOL)executeSelectOperation:(id)fp8;
- (BOOL)executeUIDSearch:(id)fp8;
- (BOOL)executeUIDStore:(id)fp8;
- (id)_responseFromSendingOperation:(id)fp8 tryCreate:(char *)fp12;
- (BOOL)executeUIDCopy:(id)fp8;
- (BOOL)executeAppend:(id)fp8;
- (BOOL)executeNamespace:(id)fp8;
- (void)resetTimingHistory;
- (double)updatedRecentAverageWithNewValue:(double)fp8;
- (void)setReadBufferSizeFromElapsedTime:(double)fp8 bytesRead:(unsigned int)fp16;
- (unsigned int)readBufferSize;
- (void)setReadBufferSize:(unsigned int)fp8;
- (BOOL)executeFetch:(id)fp8;
- (void)lock;
- (id)description;
- (void)setSelectedIMAPMailbox:(id)fp8;
- (BOOL)canStartIdle;
- (void)setCanStartIdle:(BOOL)fp8;
- (id)validatingLock;
- (void)setValidatingLock:(id)fp8;
- (void)setGateway:(id)fp8;
- (id)account;
- (void)setAccount:(id)fp8;

@end

@interface IMAPConnection (MFPrivate)
- (BOOL)_readDataOfLength:(int)fp8 intoData:(id)fp12 error:(id *)fp16;
- (BOOL)_isFetchResponseValid:(id)fp8;
- (BOOL)_correctMailboxIsSelectedForOperation:(id)fp8;
- (id)_responseFromSendingOperation:(id)fp8;
- (BOOL)_commandShouldBeSentAgainOnError:(int)fp8;
- (BOOL)_isTemporaryError:(id)fp8;
- (void)_setError:(id)fp8 forCommand:(id)fp12;
- (BOOL)_recordUntaggedResponse:(id)fp8 forOperation:(id)fp12;
- (BOOL)_recordUntaggedResponse:(id)fp8 forOperation:(id)fp12 exists:(unsigned int *)fp16;
- (void)_recordResponse:(id)fp8 forOperation:(id)fp12;
- (BOOL)_recordMailboxResponse:(id)fp8 forOperation:(id)fp12;
- (BOOL)_recordMailboxResponse:(id)fp8 forOperation:(id)fp12 exists:(unsigned int *)fp16;
@end

@interface IMAPMessage : Message <NSCoding, IMAPObject>
{
    unsigned int _size;
    CDAnonymousStruct4 _imapFlags;
    unsigned int _uid;
}

+ (void)initialize;
- (id)initWithFlags:(unsigned long)fp8 size:(unsigned int)fp12 uid:(unsigned long)fp16;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)description;
- (unsigned int)messageSize;
- (id)messageID;
- (int)compareByNumberWithMessage:(id)fp8;
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)fp8;
- (BOOL)isMessageContentsLocallyAvailable;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)fp8;
- (void)setPreferredEncoding:(unsigned long)fp8;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)fp8;
- (CDAnonymousStruct4)imapFlags;
- (id)mailboxName;
- (id)remoteID;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;
- (id)subject;

@end

@interface NSString (IMAPNameEncoding)
- (id)encodedIMAPMailboxName;
- (id)decodedIMAPMailboxName;
@end

@interface IMAPOfflineCopyOnStupidServerOperation : IMAPOperation
{
    struct __CFArray *messageIds;
    struct __CFArray *internalDates;
}

- (void)serializeIntoData:(id)fp8;
- (unsigned char)_magic;
- (void)_deserializeOpSpecificValuesFromData:(id)fp8 cursor:(unsigned int *)fp12;
- (void)dealloc;
- (void)finalize;
- (BOOL)getMessageId:(id *)fp8 andInternalDate:(id *)fp12 forDestinationUid:(unsigned int)fp16;
- (void)setMessageId:(id)fp8 andInternalDate:(id)fp12 forMessageWithSourceUid:(unsigned int)fp16;
- (void)expungeTemporaryUid:(unsigned int)fp8;
- (unsigned int)approximateSize;

@end

@interface IMAPOperation : NSObject
{
    unsigned int _type:8;
    unsigned int _temporaryUids:1;
    NSString *_mailboxName;
    union {
        struct {
            NSArray *trueFlags;
            NSArray *falseFlags;
            struct __CFArray *uids;
        } store;
        struct {
            unsigned int uid;
            NSArray *flags;
            int internalDate;
            unsigned int size;
        } append;
        struct {
            struct __CFArray *srcUids;
            struct __CFArray *dstUids;
            NSString *destinationMailbox;
        } copy;
    } _opSpecific;
}

+ (id)deserializeFromData:(id)fp8 cursor:(unsigned int *)fp12;
- (unsigned char)_magic;
- (void)_deserializeOpSpecificValuesFromData:(id)fp8 cursor:(unsigned int *)fp12;
- (void)serializeIntoData:(id)fp8;
- (id)initWithMailboxToCreate:(id)fp8;
- (id)initWithMailboxToDelete:(id)fp8;
- (id)initWithFlagsToSet:(id)fp8 flagsToClear:(id)fp12 forUids:(id)fp16 inMailbox:(id)fp20;
- (id)initWithUidsToCopy:(id)fp8 fromMailbox:(id)fp12 toMailbox:(id)fp16 firstNewUid:(unsigned int)fp20;
- (id)initWithAppendedUid:(unsigned int)fp8 approximateSize:(unsigned int)fp12 flags:(id)fp16 internalDate:(id)fp20 mailbox:(id)fp24;
- (void)dealloc;
- (void)finalize;
- (BOOL)isSourceOfTemporaryUid:(unsigned int)fp8;
- (BOOL)actsOnTemporaryUid:(unsigned int)fp8;
- (void)expungeTemporaryUid:(unsigned int)fp8;
- (unsigned int)firstTemporaryUid;
- (unsigned int)lastTemporaryUid;
- (int)operationType;
- (id)mailboxName;
- (unsigned int)approximateSize;
- (BOOL)usesRealUids;
- (void)setUsesRealUids:(BOOL)fp8;
- (id)flagsToSet;
- (id)flagsToClear;
- (id)uids;
- (id)flags;
- (id)internalDate;
- (unsigned int)uid;
- (id)sourceUids;
- (id)destinationUids;
- (id)destinationMailbox;
- (unsigned int)sourceUidForTemporaryUid:(unsigned int)fp8;
- (BOOL)getMessageId:(id *)fp8 andInternalDate:(id *)fp12 forDestinationUid:(unsigned int)fp16;
- (void)setMessageId:(id)fp8 andInternalDate:(id)fp12 forMessageWithSourceUid:(unsigned int)fp16;
- (id)description;

@end

@interface IMAPOperationCache : NSObject
{
    IMAPAccount *_account;
    NSMutableArray *_ops;
    unsigned int _lastUid;
    unsigned int _lastSave;
}

- (id)initWithIMAPAccount:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)account;
- (void)createMailbox:(id)fp8;
- (void)deleteMailbox:(id)fp8;
- (void)setFlags:(id)fp8 andClearFlags:(id)fp12 forMessages:(id)fp16;
- (void)setFlags:(id)fp8 andClearFlags:(id)fp12 forUids:(id)fp16 forMailbox:(id)fp20;
- (unsigned int)firstUidForCopyingMessages:(id)fp8 fromMailbox:(id)fp12 toMailbox:(id)fp16;
- (unsigned int)uidForAppendingMessageData:(id)fp8 withFlags:(id)fp12 andInternalDate:(id)fp16 toMailbox:(id)fp20;
- (void)_expungeMessageWithTemporaryUid:(unsigned int)fp8 orMessageID:(id)fp12 documentID:(id)fp16;
- (void)expungeTemporaryUid:(unsigned int)fp8;
- (void)expungeMessageWithMessageID:(id)fp8 documentID:(id)fp12;
- (void)saveChanges;
- (unsigned int)numberOfPendingChanges;
- (BOOL)hasOperationsForMailbox:(id)fp8;
- (void)_performCreateOperation:(id)fp8 withContext:(CDAnonymousStruct8 *)fp12;
- (void)_performDeleteOperation:(id)fp8 withContext:(CDAnonymousStruct8 *)fp12;
- (void)_performStoreOperation:(id)fp8 ignoringUids:(id)fp12 withContext:(CDAnonymousStruct8 *)fp16;
- (BOOL)_performAppendOperation:(id)fp8 withContext:(CDAnonymousStruct8 *)fp12 backupManager:(id)fp16 recoveredMailboxName:(id *)fp20 error:(id *)fp24;
- (BOOL)_performCopyOperation:(id)fp8 withContext:(CDAnonymousStruct8 *)fp12 failedSourceUids:(id)fp16 error:(id *)fp20;
- (void)performDeferredOperationsWithGateway:(id)fp8 error:(id *)fp12;
- (id)_deferredOperations;

@end

@interface IMAPResponse : NSObject
{
    unsigned int _responseType:8;
    NSString *_tag;
    union _IMAPResponseData _data;
    MFError *_error;
    BOOL _wasHandled;
}

- (int)responseType;
- (void)setResponseType:(int)fp8;
- (BOOL)isUntagged;
- (BOOL)isAlertResponse;
- (id)tag;
- (void)setTag:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (int)responseCode;
- (id)responseInfo;
- (id)userData;
- (id)userString;
- (void)setUserData:(id)fp8 responseCode:(int)fp12 responseInfo:(id)fp16;
- (id)capabilities;
- (void)setCapabilities:(id)fp8;
- (unsigned long)number;
- (void)setNumber:(unsigned long)fp8;
- (id)flags;
- (void)setFlags:(id)fp8;
- (id)mailboxName;
- (id)statusEntries;
- (void)setMailboxName:(id)fp8 statusEntries:(id)fp12;
- (id)searchResults;
- (void)setSearchResults:(id)fp8;
- (unsigned long)mailboxAttributes;
- (id)separator;
- (void)setMailboxAttributes:(unsigned long)fp8 separator:(id)fp12 mailboxName:(id)fp16;
- (id)fetchResultWithType:(int)fp8;
- (id)fetchResults;
- (void)setFetchResults:(id)fp8;
- (BOOL)isValid;
- (void)setIsValid:(BOOL)fp8;
- (id)quotaRootNames;
- (void)setMailboxName:(id)fp8 quotaRootNames:(id)fp12;
- (id)quotaRootName;
- (id)quotas;
- (void)setQuotaRootName:(id)fp8 quotas:(id)fp12;
- (int)uidFlagsChange;
- (void)setUidFlagsChange:(int)fp8;
- (id)uids;
- (void)setUids:(id)fp8;
- (id)flagsFetchResult;
- (void)setFlagsFetchResult:(id)fp8;
- (id)responseName;
- (id)parameters;
- (void)setResponseName:(id)fp8 parameters:(id)fp12;
- (id)description;
- (id)initWithConnection:(id)fp8 error:(id *)fp12;
- (void)setError:(id)fp8;
- (id)error;
- (BOOL)wasHandled;
- (void)setWasHandled:(BOOL)fp8;

@end

@interface POP3Connection : Connection
{
    NSMutableData *_sendBuffer;
    struct __CFDictionary *_listResults;
    NSData *_apopTimeStamp;
    id _delegate;
    unsigned int _numberOfMessagesAvailable:24;
    unsigned int _state:4;
    unsigned int _delegateRespondsToReceivedNumberOfBytes:1;
    unsigned int _delegateRespondsToWillRetrieveMessageNumber:1;
    unsigned int _delegateRespondsToDidRetrieveMessageNumber:1;
    unsigned int _connectionShouldPrefetchMessages:1;
    unsigned int _hidingPassword:1;
}

- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)capabilities;
- (id)authenticationMechanisms;
- (BOOL)_teardownConnectionWithResult:(BOOL)fp8;
- (BOOL)authenticateUsingAccount:(id)fp8;
- (BOOL)_authenticateUsingAccount:(id)fp8 authenticator:(id)fp12;
- (int)_authenticateUsingHostname:(id)fp8 username:(id)fp12 password:(id)fp16 authenticator:(id)fp20;
- (int)_authenticateWithUsername:(id)fp8 password:(id)fp12;
- (int)quit;
- (BOOL)supportsAPOP;
- (void)disableAPOP;
- (int)doStat;
- (int)list:(int)fp8;
- (int)_getListResults;
- (int)getMessageNumbers:(const struct __CFArray **)fp8 andMessageIdsByNumber:(const struct __CFDictionary **)fp12;
- (id)idForMessageNumber:(int)fp8;
- (id)_retrieveMessage:(unsigned long)fp8 ofSize:(unsigned int)fp12 informDelegate:(BOOL)fp16;
- (int)retr:(unsigned long)fp8;
- (int)dele:(unsigned long)fp8;
- (id)retainedMessageHeaderForMessageNumber:(unsigned long)fp8;
- (void)getTopOfMessageNumber:(unsigned long)fp8 intoMutableData:(id)fp12;
- (unsigned long)sizeOfMessageNumber:(unsigned long)fp8;
- (BOOL)messagesAvailable;
- (unsigned int)numberOfMessagesAvailable;
- (int)fetchMessages:(struct __CFArray *)fp8;
- (int)deleteMessagesOnServer:(struct __CFArray *)fp8;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (int)_startTLSForSecurityLayerType:(int)fp8;

@end

@interface NSError (POP3ConnectionExtensions)
- (int)POP3ResponseCode;
@end

@interface POP3Connection (PrivateCommands)
- (int)_readMultilineResponseWithMaxSize:(int)fp8 intoMutableData:(id)fp12 informDelegate:(BOOL)fp16;
- (int)_sendCommand:(const char *)fp8 withArguments:(id)fp12;
- (id)_copyReplyLineDataWithError:(id *)fp8;
- (id)_copyReplyLineData;
- (void)_parsePOPErrorFromData:(id)fp8 error:(id)fp12;
- (int)_getStatusFromReply;
- (int)_apopWithUsername:(id)fp8 password:(id)fp12;
- (int)_user:(id)fp8;
- (int)_pass:(id)fp8;
@end

@interface POP3FetchStore : MessageStore <RouterStore>
{
    BOOL _currentlyFetchingMessage;
    BOOL _lastConnectionFailed;
    unsigned int _numMessagesToFetch;
    unsigned int _numMessagesFetchedSoFar;
    unsigned int _sizeOfMessageBeingFetched;
    unsigned int _numBytesReceivedSoFar;
    unsigned int _totalBytesToFetch;
    unsigned int _totalBytesReceivedSoFar;
    NSMutableSet *_skippedMessageIds;
    struct __CFDictionary *_serverMessageIdsByNumber;
    struct __CFArray *_messageNumbersToDelete;
    int _activityMonitorKey;
    double _lastBatchStartTime;
    MessageRouter *_router;
    ActivityMonitor *_fetchingActivityMonitor;
}

- (id)initWithPOPAccount:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)mailboxUid;
- (BOOL)isOpened;
- (id)displayName;
- (void)fetchSynchronously;
- (void)_deleteMessagesMarkedForDeletionUsingManager:(id)fp8;
- (void)deleteMessages:(id)fp8;
- (void)_backgroundFetchFailed:(id)fp8;
- (id)_fetchHeaderDataForMessage:(id)fp8;
- (id)_fetchBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)messageForMessageID:(id)fp8;
- (BOOL)connectionShouldPrefetchMessages;
- (void)connection:(id)fp8 receivedNumberOfBytes:(int)fp12;
- (int)connection:(id)fp8 willRetrieveMessageNumber:(unsigned int)fp12 header:(id)fp16 size:(unsigned int)fp20;
- (id)_defaultRouterDestination;
- (void)writeUpdatedMessageDataToDisk;
- (void)messagesWillBeRouted:(id)fp8;
- (void)messagesWereRouted:(id)fp8;
- (void)cancel;
- (void)waitForRoutingToFinish;
- (void)connection:(id)fp8 didRetrieveData:(id)fp12 forMessageNumber:(unsigned int)fp16;
- (void)messageFlagsDidChange:(id)fp8 flags:(id)fp12;

@end

@interface POPMessage : Message
{
    int _messageNumber;
    NSString *_messageID;
    NSData *_messageData;
}

- (id)initWithPOP3FetchStore:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (int)messageNumber;
- (void)setMessageNumber:(int)fp8;
- (id)messageData;
- (void)setMessageData:(id)fp8;
- (unsigned int)messageSize;
- (id)messageDataIncludingFromSpace:(BOOL)fp8 newDocumentID:(id)fp12;
- (id)messageID;
- (void)setMessageID:(id)fp8;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;

@end

@interface BerkeleyMbox : MessageStore
{
    NSData *_mboxData;
    NSString *_path;
}

+ (BOOL)storeExistsForPath:(id)fp8;
+ (BOOL)storeAtPathIsWritable:(id)fp8;
+ (BOOL)createEmptyStoreForPath:(id)fp8;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (id)initWithPath:(id)fp8 create:(BOOL)fp12 readOnly:(BOOL)fp16 account:(id)fp20;
- (void)dealloc;
- (void)finalize;
- (void)writeUpdatedMessageDataToDisk;
- (id)path;
- (id)_lockFilePath;
- (id)_mboxData;
- (void)_resetAllMessages;
- (id)_fetchHeaderDataForMessage:(id)fp8;
- (id)_fetchBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)_constructDeletedList;
- (void)doCompact;
- (BOOL)allowsIndexing;
- (id)_defaultRouterDestination;
- (void)fetchSynchronously;

@end

@interface NeXTMbox : MessageStore
{
    NSData *_mboxData;
    TableOfContents *_toc;
    float _compactThreshold;
    unsigned int _mboxIsOnSMB:1;
    unsigned int _haveUpdatedMetadata:1;
    NSData *_incomingMboxData;
    unsigned int _importMode:1;
}

+ (BOOL)createEmptyStoreForPath:(id)fp8;
+ (BOOL)storeAtPathIsWritable:(id)fp8;
+ (BOOL)cheapStoreAtPathIsEmpty:(id)fp8;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (void)dealloc;
- (void)finalize;
- (void)_releaseMboxData;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)fp8;
- (id)incomingMessages;
- (id)messagesForImporter;
- (void)updateMetadata;
- (id)_lockFilePath;
- (void)_invalidate;
- (void)writeUpdatedMessageDataToDisk;
- (void)_rebuildTableOfContentsSynchronously;
- (void)_flushAllMessageData;
- (BOOL)tableOfContents:(id)fp8 loadedMessages:(id)fp12;
- (void)_resetAllMessages;
- (id)messageForMessageID:(id)fp8;
- (id)_fetchHeaderDataForMessage:(id)fp8;
- (id)_fetchBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (float)compactThreshold;
- (void)setCompactThreshold:(float)fp8;
- (BOOL)canCompact;
- (void)doCompact;
- (void)_deleteAttachments:(id)fp8;
- (id)_appendMessage:(id)fp8 toFile:(id)fp12;
- (void)_addIDsForAppendedMessages:(id)fp8 toArray:(id)fp12;
- (int)_appendMessages:(id)fp8 successes:(id *)fp12 failures:(id *)fp16 mboxName:(id)fp20 tableOfContents:(id)fp24;
- (BOOL)allowsAppend;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 flagsToSet:(id)fp24 forMove:(BOOL)fp28 error:(id *)fp32;
- (int)undoAppendOfMessageIDs:(id)fp8;
- (void)_incorporateMailFromIncoming;
- (int)_writeMessagesToIncomingMail:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16;
- (void)suggestSortOrder:(id)fp8 ascending:(BOOL)fp12;
- (id)sortOrder;
- (BOOL)isSortedAscending;
- (BOOL)_shouldCallCompactWhenClosing;

@end

@interface TableOfContents : NSObject
{
    BOOL _isValid;
    NSMutableArray *_messages;
    NSString *_path;
    NSData *_data;
    unsigned int _pos;
    CDAnonymousStruct11 _header;
    NSMutableDictionary *_messageIDMap;
    BOOL _isDirty;
}

- (BOOL)_checkHeader;
- (BOOL)loadCacheFromFileUsingUniqueStrings:(id)fp8;
- (BOOL)loadCacheFromFileUsingUniqueStrings:(id)fp8 messageStore:(id)fp12;
- (void)appendHeader:(CDAnonymousStruct11)fp8 toData:(id)fp40;
- (id)appendCachedDataToData:(id)fp8;
- (void)setTimeStamp:(long)fp8;
- (id)init;
- (id)initWithPath:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (BOOL)isDirty;
- (BOOL)isValid;
- (void)forceValidityToYES;
- (id)storePath;
- (void)rebuildCacheFromMessages:(id)fp8;
- (unsigned int)count;
- (id)messages;
- (void)removeMessage:(id)fp8;
- (void)_addMessageToMap:(id)fp8;
- (void)addMessage:(id)fp8;
- (void)addMessages:(id)fp8;
- (id)description;
- (BOOL)flushToFile;
- (id)messageForMessageID:(id)fp8;
- (id)sortOrder;
- (void)setSortOrder:(id)fp8 ascending:(BOOL)fp12;
- (BOOL)isSortedAscending;
- (BOOL)isSortedByDateReceived;
- (void)sort;

@end

@interface TOCMessage : Message
{
    struct _NSRange _mboxRange;
    NSString *_attachments;
    NSString *_messageID;
    BOOL isInIncomingMail;
}

+ (id)messageIDForSender:(id)fp8 subject:(id)fp12 dateAsTimeInterval:(double)fp16;
- (id)initWithMessage:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (unsigned int)loadCachedInfoFromBytes:(const char *)fp8 length:(unsigned int)fp12 isDirty:(char *)fp16 usingUniqueStrings:(id)fp20;
- (id)cachedData;
- (struct _NSRange)mboxRange;
- (void)setMboxRange:(struct _NSRange)fp8;
- (id)attachment;
- (id)messageID;
- (int)compareByNumberWithMessage:(id)fp8;
- (unsigned int)messageSize;
- (id)description;
- (id)remoteID;

@end

@interface NSDate (toc_extension)
- (int)tocSillyDateInt;
@end

@interface Message : NSObject
{
    MessageStore *_store;
    unsigned int _messageFlags;
    CDAnonymousStruct6 _flags;
    unsigned int _preferredEncoding;
    NSString *_senderAddressComment;
    unsigned int _dateSentInterval;
    unsigned int _dateReceivedInterval;
    unsigned int _dateLastViewedInterval;
    NSString *_subject;
    unsigned char _subjectPrefixLength;
    NSString *_to;
    NSString *_sender;
    NSString *_author;
    NSData *_messageIDHeaderDigest;
    NSData *_inReplyToHeaderDigest;
    int _type;
    MFUUID *_documentID;
}

+ (void)initialize;
+ (id)verboseVersion;
+ (id)frameworkVersion;
+ (void)setUserAgent:(id)fp8;
+ (id)userAgent;
+ (id)messageWithRFC822Data:(id)fp8;
+ (id)forwardedMessagePrefixWithSpacer:(BOOL)fp8;
+ (id)replyPrefixWithSpacer:(BOOL)fp8;
+ (id)descriptionForType:(int)fp8 plural:(BOOL)fp12;
+ (id)messageTypeKeyForMessageType:(int)fp8;
+ (int)_messageTypeForMessageTypeKey:(id)fp8;
+ (id)unreadMessagesFromMessages:(id)fp8;
+ (BOOL)allMessages:(id)fp8 areSameType:(int)fp12;
+ (unsigned int)validatePriority:(int)fp8;
+ (unsigned int)displayablePriorityForPriority:(int)fp8;
+ (BOOL)isMessageURL:(id)fp8;
+ (id)messageWithURL:(id)fp8;
+ (id)messageWithPersistentID:(id)fp8;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)messageStore;
- (void)setMessageStore:(id)fp8;
- (BOOL)messageStoreShouldBeSet;
- (id)mailbox;
- (id)headers;
- (id)headersIfAvailable;
- (int)type;
- (void)setType:(int)fp8;
- (BOOL)isEditable;
- (BOOL)isAnnotatable;
- (BOOL)isMetadataMessage;
- (id)documentID;
- (void)setDocumentID:(id)fp8;
- (unsigned long)messageFlags;
- (void)setMessageFlags:(unsigned long)fp8;
- (id)messageBody;
- (id)messageBodyIfAvailable;
- (id)messageBodyUpdatingFlags:(BOOL)fp8;
- (id)messageBodyForIndexingAttachments;
- (id)messageBodyIfAvailableUpdatingFlags:(BOOL)fp8;
- (id)messageDataIncludingFromSpace:(BOOL)fp8;
- (id)messageDataIncludingFromSpace:(BOOL)fp8 newDocumentID:(id)fp12;
- (BOOL)colorHasBeenEvaluated;
- (id)color;
- (BOOL)isMarkedForOverwrite;
- (void)setMarkedForOverwrite:(BOOL)fp8;
- (void)setColor:(id)fp8;
- (void)setColorHasBeenEvaluated:(BOOL)fp8;
- (void)setColor:(id)fp8 hasBeenEvaluated:(BOOL)fp12 flags:(unsigned long)fp16;
- (void)dealloc;
- (void)finalize;
- (unsigned int)messageSize;
- (id)attributedString;
- (id)preferredEmailAddressToReplyWith;
- (id)messageID;
- (id)messageIDHeaderDigest;
- (void)unlockedSetMessageIDHeaderDigest:(id)fp8;
- (void)setMessageIDHeaderDigest:(id)fp8;
- (id)_messageIDHeaderDigestIvar;
- (BOOL)needsMessageIDHeader;
- (id)inReplyToHeaderDigest;
- (void)unlockedSetInReplyToHeaderDigest:(id)fp8;
- (void)setInReplyToHeaderDigest:(id)fp8;
- (id)_inReplyToHeaderDigestIvar;
- (int)compareByNumberWithMessage:(id)fp8;
- (BOOL)isMessageContentsLocallyAvailable;
- (id)stringValueRenderMode:(int)fp8 updateBodyFlags:(BOOL)fp12 junkRecorder:(id)fp16;
- (id)stringForIndexing;
- (id)stringForIndexingUpdatingBodyFlags:(BOOL)fp8;
- (id)stringForJunk;
- (id)stringForJunk:(id)fp8;
- (BOOL)hasCalculatedNumberOfAttachments;
- (unsigned int)numberOfAttachments;
- (int)junkMailLevel;
- (void)setPriorityFromHeaders:(id)fp8;
- (int)priority;
- (unsigned long)preferredEncoding;
- (void)setPreferredEncoding:(unsigned long)fp8;
- (id)rawSourceFromHeaders:(id)fp8 body:(id)fp12;
- (BOOL)_doesDateAppearToBeSane:(id)fp8;
- (id)_createDateFromReceivedHeadersInHeaders:(id)fp8;
- (id)_createDateFromHeader:(id)fp8 inHeaders:(id)fp12;
- (id)_createDateFromDateHeaderInHeaders:(id)fp8;
- (id)_createDateFromCreatedDateHeaderInHeaders:(id)fp8;
- (void)_setDateReceivedFromHeaders:(id)fp8;
- (void)_setDateSentFromHeaders:(id)fp8;
- (void)loadCachedHeaderValuesFromHeaders:(id)fp8 type:(int)fp12;
- (id)subjectAndPrefixLength:(unsigned int *)fp8;
- (id)subjectNotIncludingReAndFwdPrefix;
- (id)subjectAddition;
- (id)subject;
- (void)setSubject:(id)fp8;
- (id)dateReceived;
- (id)dateSent;
- (void)setDateReceivedTimeIntervalSince1970:(double)fp8;
- (double)dateReceivedAsTimeIntervalSince1970;
- (BOOL)needsDateReceived;
- (double)dateSentAsTimeIntervalSince1970;
- (void)setDateSentTimeIntervalSince1970:(double)fp8;
- (id)dateLastViewed;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (id)sender;
- (void)setSender:(id)fp8;
- (id)senderAddressComment;
- (id)to;
- (void)setTo:(id)fp8;
- (id)author;
- (void)setAuthor:(id)fp8;
- (void)setMessageInfo:(id)fp8 to:(id)fp12 sender:(id)fp16 type:(int)fp20 dateReceivedTimeIntervalSince1970:(double)fp24 dateSentTimeIntervalSince1970:(double)fp32 messageIDHeaderDigest:(id)fp40 inReplyToHeaderDigest:(id)fp44;
- (void)setMessageInfo:(id)fp8 to:(id)fp12 sender:(id)fp16 type:(int)fp20 dateReceivedTimeIntervalSince1970:(double)fp24 dateSentTimeIntervalSince1970:(double)fp32 messageIDHeaderDigest:(id)fp40 inReplyToHeaderDigest:(id)fp44 dateLastViewedTimeIntervalSince1970:(double)fp48;
- (void)setMessageInfoFromMessage:(id)fp8;
- (id)references;
- (id)note;
- (void)setNote:(id)fp8;
- (id)todos;
- (void)setTodos:(id)fp8;
- (id)remoteID;
- (unsigned long)uid;
- (CDAnonymousStruct6)moreMessageFlags;
- (id)path;
- (id)account;
- (void)markAsViewed;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;
- (id)URL;
- (id)persistentID;
- (id)bodyData;
- (id)headerData;
- (id)dataForMimePart:(id)fp8;
- (BOOL)hasCachedDataForMimePart:(id)fp8;
- (id)matadorAttributes;
- (void)_calculateAttachmentInfoFromBody:(id)fp8;
- (void)setAttachmentInfoFromBody:(id)fp8;
- (BOOL)calculateAttachmentInfoFromBody:(id)fp8 numberOfAttachments:(unsigned int *)fp12 isSigned:(char *)fp16 isEncrypted:(char *)fp20;
- (void)setNumberOfAttachments:(unsigned int)fp8 isSigned:(BOOL)fp12 isEncrypted:(BOOL)fp16;
- (double)dateCreatedAsTimeIntervalSince1970;
- (double)dateModifiedAsTimeIntervalSince1970;

@end

@interface MessageBody : NSObject
{
    Message *_message;
}

- (id)attributedString;
- (BOOL)isHTML;
- (BOOL)isRich;
- (BOOL)isSignedByMe;
- (void)calculateNumberOfAttachmentsIfNeeded;
- (void)calculateNumberOfAttachmentsDecodeIfNeeded;
- (unsigned int)numberOfAttachmentsSigned:(char *)fp8 encrypted:(char *)fp12;
- (id)attachments;
- (id)attachmentFilenames;
- (id)textHtmlPart;
- (id)webArchive;
- (void)dealloc;
- (id)message;
- (void)setMessage:(id)fp8;

@end

@interface MessageHeaders : NSObject <NSCopying>
{
    NSData *_data;
    unsigned int _preferredEncoding;
}

+ (BOOL)isStructuredHeaderKey:(id)fp8;
+ (BOOL)_isImageHeaderKey:(id)fp8;
+ (const char *)cstringForKey:(id)fp8;
+ (id)localizedHeaders;
+ (id)localizedHeadersFromEnglishHeaders:(id)fp8;
+ (id)englishHeadersFromLocalizedHeaders:(id)fp8;
- (id)initWithHeaderData:(id)fp8 encoding:(unsigned long)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (void)finalize;
- (id)mutableCopy;
- (id)headerData;
- (unsigned long)preferredEncoding;
- (void)setPreferredEncoding:(unsigned long)fp8;
- (id)htmlHeaderKey:(id)fp8 useBold:(BOOL)fp12;
- (id)htmlValueWithKey:(id)fp8 value:(id)fp12 useBold:(BOOL)fp16;
- (id)htmlStringShowingHeaderDetailLevel:(int)fp8;
- (id)htmlStringShowingHeaderDetailLevel:(int)fp8 useBold:(BOOL)fp12;
- (id)attributedStringShowingHeaderDetailLevel:(int)fp8;
- (id)attributedStringShowingHeaderDetailLevel:(int)fp8 useHeadIndents:(BOOL)fp12 useBold:(BOOL)fp16 includeBCC:(BOOL)fp20;
- (id)headersDictionaryWithHeaderDetailLevel:(int)fp8;
- (id)headersDictionaryWithHeaderDetailLevel:(int)fp8 forMessageType:(int)fp12;
- (id)allHeaderKeys;
- (void)_setCapitalizedKey:(id)fp8 forKey:(id)fp12;
- (id)_capitalizedKeyForKey:(id)fp8;
- (id)_createHeaderValueForKey:(id)fp8 offset:(unsigned int *)fp12;
- (id)_createHeaderValueForKey:(id)fp8;
- (BOOL)hasHeaderForKey:(id)fp8;
- (id)headersForKey:(id)fp8;
- (id)firstHeaderForKey:(id)fp8;
- (id)_decodeHeaderKeysFromData:(id)fp8;
- (id)isoLatin1CharsetHint;
- (id)mailVersion;
- (BOOL)messageIsFromMicrosoft;
- (void)_appendAddressList:(id)fp8 toData:(id)fp12;
- (id)encodedHeaders;
- (id)encodedHeadersIncludingFromSpace:(BOOL)fp8;
- (void)_appendHeaderData:(id)fp8 andRecipients:(id)fp12 expandPrivate:(BOOL)fp16 includeComment:(BOOL)fp20;
- (void)appendHeaderData:(id)fp8 andRecipients:(id)fp12;
- (id)allRecipientsExpandPrivate:(BOOL)fp8 includeComment:(BOOL)fp12;
- (id)_encodedHeadersIncludingFromSpace:(BOOL)fp8;

@end

@interface MessageFlags : NSObject <NSCoding>
{
    unsigned int realFlags;
}

- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;

@end

@interface NSCoder (MFMessageFlags)
- (unsigned long)decodeMessageFlags;
@end

@interface OutgoingMessage : Message
{
    NSData *rawData;
    NSString *remoteID;
    unsigned int bodyOffset;
    unsigned int localAttachmentsSize;
    MessageBody *messageBody;
    MutableMessageHeaders *messageHeaders;
}

- (void)dealloc;
- (id)bodyData;
- (id)messageStore;
- (id)messageBody;
- (id)messageBodyIfAvailable;
- (id)messageDataIncludingFromSpace:(BOOL)fp8 newDocumentID:(id)fp12;
- (id)messageDataIncludingFromSpace:(BOOL)fp8;
- (id)mutableHeaders;
- (void)setMutableHeaders:(id)fp8;
- (id)headers;
- (id)headersIfAvailable;
- (unsigned int)messageSize;
- (void)setRawData:(id)fp8 offsetOfBody:(unsigned int)fp12;
- (void)setLocalAttachmentsSize:(unsigned int)fp8;
- (void)setRemoteID:(id)fp8;
- (id)remoteID;

@end

@interface _OutgoingMessageBody : MessageBody
{
    NSMutableData *rawData;
}

- (void)setMessage:(id)fp8;
- (void)clearMessageWithoutReleasing;
- (void)dealloc;
- (id)rawData;
- (void)setRawData:(id)fp8;
- (id)mutableData;

@end

@interface MessageWriter : NSObject
{
    unsigned int _createsMimeAlternatives:1;
    unsigned int _createsRichText:1;
    unsigned int _createsPlainTextOnly:1;
    unsigned int _allows8BitMimeParts:1;
    unsigned int _allowsBinaryMimeParts:1;
    unsigned int _allowsAppleDoubleAttachments:1;
    unsigned int _signsOutput:1;
    unsigned int _encryptsOutput:1;
    unsigned int _writeImageSize:1;
    unsigned int _shouldConvertCompositeImages:1;
    BOOL _shouldMarkNonresizableAttachmentData;
    unsigned int _preferredEncoding;
    unsigned int _encodingHint;
}

- (id)init;
- (id)createDataForAttributedString:(id)fp8;
- (void)appendDataForMimePart:(id)fp8 toData:(id)fp12 withPartData:(id)fp16;
- (id)createBounceMessageForMessage:(id)fp8;
- (id)createMessageByRemovingAttachmentsFromMessage:(id)fp8;
- (id)createMessageWithAttributedString:(id)fp8 headers:(id)fp12;
- (id)createMessageWithHtmlString:(id)fp8 plainTextAlternative:(id)fp12 otherHtmlStringsAndAttachments:(id)fp16 headers:(id)fp20;
- (id)createMessageWithHtmlString:(id)fp8 attachments:(id)fp12 headers:(id)fp16;
- (id)createMessageWithBodyData:(id)fp8 headers:(id)fp12;
- (BOOL)createsMimeAlternatives;
- (void)setCreatesMimeAlternatives:(BOOL)fp8;
- (BOOL)createsPlainTextOnly;
- (void)setCreatesPlainTextOnly:(BOOL)fp8;
- (BOOL)createsRichText;
- (void)setCreatesRichText:(BOOL)fp8;
- (BOOL)allows8BitMimeParts;
- (void)setAllows8BitMimeParts:(BOOL)fp8;
- (BOOL)allowsBinaryMimeParts;
- (void)setAllowsBinaryMimeParts:(BOOL)fp8;
- (BOOL)allowsAppleDoubleAttachments;
- (void)setAllowsAppleDoubleAttachments:(BOOL)fp8;
- (unsigned long)preferredEncoding;
- (void)setPreferredEncoding:(unsigned long)fp8;
- (unsigned long)encodingHint;
- (void)setEncodingHint:(unsigned long)fp8;
- (unsigned long)_preferredEncodingUsingHintIfNecessary;
- (BOOL)signsOutput;
- (void)setSignsOutput:(BOOL)fp8;
- (BOOL)encryptsOutput;
- (void)setEncryptsOutput:(BOOL)fp8;
- (BOOL)writeImageSize;
- (void)setWriteImageSize:(BOOL)fp8;
- (void)setShouldConvertCompositeImages:(BOOL)fp8;
- (void)setShouldMarkNonresizableAttachmentData:(BOOL)fp8;

@end

@interface MutableMessageHeaders : MessageHeaders
{
    NSMutableDictionary *_headersAdded;
    NSMutableArray *_headersRemoved;
}

- (id)mutableCopy;
- (void)dealloc;
- (void)finalize;
- (id)allHeaderKeys;
- (BOOL)hasHeaderForKey:(id)fp8;
- (id)_createHeaderValueForKey:(id)fp8;
- (id)firstHeaderForKey:(id)fp8;
- (void)removeHeaderForKey:(id)fp8;
- (void)setHeader:(id)fp8 forKey:(id)fp12;
- (void)appendFromSpaceIfMissing;
- (void)_appendHeaderKey:(id)fp8 value:(id)fp12 toData:(id)fp16;
- (void)_appendAddedHeaderKey:(id)fp8 value:(id)fp12 toData:(id)fp16;
- (id)_encodedHeadersIncludingFromSpace:(BOOL)fp8;
- (void)setAddressList:(id)fp8 forKey:(id)fp12;
- (id)description;

@end

@interface MimePartEnumerator : NSEnumerator
{
    BOOL _onlyAttachments;
    BOOL _isFirstIteration;
    MimePart *_currentPart;
}

- (void)_setCurrentPart:(id)fp8;
- (id)initWithMimeBody:(id)fp8 onlyAttachments:(BOOL)fp12;
- (id)nextObject;

@end

@interface MimeBody : MessageBody
{
    MimePart *_topLevelPart;
    unsigned int _preferredTextEncoding;
    NSData *_bodyData;
    unsigned int _preferredAlternative:16;
    unsigned int _numAlternatives:16;
}

+ (void)initialize;
+ (id)versionString;
+ (id)createMimeBoundary;
- (id)attributedString;
- (id)init;
- (void)dealloc;
- (id)topLevelPart;
- (void)setTopLevelPart:(id)fp8;
- (id)allPartsEnumerator;
- (id)attachmentPartsEnumerator;
- (unsigned long)preferredTextEncoding;
- (void)setPreferredTextEncoding:(unsigned long)fp8;
- (BOOL)isSignedByMe;
- (id)mimeType;
- (id)mimeSubtype;
- (id)partWithNumber:(id)fp8;
- (void)calculateNumberOfAttachmentsIfNeeded;
- (BOOL)_isPossiblySignedOrEncrypted;
- (void)decodeIfNecessary;
- (unsigned int)numberOfAttachmentsSigned:(char *)fp8 encrypted:(char *)fp12;
- (id)attachments;
- (id)attachmentFilenames;
- (BOOL)isHTML;
- (BOOL)isRich;
- (BOOL)isMultipartRelated;
- (BOOL)isTextPlain;
- (int)numberOfAlternatives;
- (void)setPreferredAlternative:(int)fp8;
- (int)preferredAlternative;
- (id)preferredAlternativePart;
- (id)preferredBodyPart;
- (id)textHtmlPart;
- (id)webArchive;
- (id)dataForMimePart:(id)fp8;
- (id)bodyData;
- (void)setBodyData:(id)fp8;
- (void)flushCachedData;

@end

@interface MimePart : NSObject
{
    NSString *_type;
    NSString *_subtype;
    NSMutableDictionary *_bodyParameters;
    NSString *_contentTransferEncoding;
    NSMutableDictionary *_otherIvars;
    struct _NSRange _range;
    id _parentOrBody;
    MimePart *_nextPart;
}

+ (void)initialize;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (id)type;
- (void)setType:(id)fp8;
- (id)subtype;
- (void)setSubtype:(id)fp8;
- (id)bodyParameterForKey:(id)fp8;
- (void)setBodyParameter:(id)fp8 forKey:(id)fp12;
- (id)bodyParameterKeys;
- (id)contentTransferEncoding;
- (void)setContentTransferEncoding:(id)fp8;
- (id)disposition;
- (void)setDisposition:(id)fp8;
- (id)dispositionParameterForKey:(id)fp8;
- (void)setDispositionParameter:(id)fp8 forKey:(id)fp12;
- (id)dispositionParameterKeys;
- (id)contentDescription;
- (void)setContentDescription:(id)fp8;
- (id)contentID;
- (void)setContentID:(id)fp8;
- (id)contentIDURLString;
- (id)contentLocation;
- (void)setContentLocation:(id)fp8;
- (id)languages;
- (void)setLanguages:(id)fp8;
- (id)parentPart;
- (id)firstChildPart;
- (id)nextSiblingPart;
- (id)subparts;
- (id)subpartAtIndex:(int)fp8;
- (void)setSubparts:(id)fp8;
- (void)addSubpart:(id)fp8;
- (struct _NSRange)range;
- (void)setRange:(struct _NSRange)fp8;
- (id)bodyData;
- (id)bodyConvertedFromFlowedText;
- (id)mimeBody;
- (void)setMimeBody:(id)fp8;
- (id)description;
- (id)attachmentFilenameWithHiddenExtension:(char *)fp8;
- (id)attachmentFilename;
- (BOOL)isSigned;
- (BOOL)isEncrypted;
- (BOOL)hasCachedDataInStore;
- (unsigned int)numberOfAttachments;
- (void)getNumberOfAttachments:(unsigned int *)fp8 isSigned:(char *)fp12 isEncrypted:(char *)fp16;
- (id)attachments;
- (id)attachmentFilenames;
- (unsigned long)textEncoding;
- (unsigned int)approximateRawSize;
- (BOOL)isReadableText;
- (BOOL)isImage;
- (BOOL)isCalendar;
- (BOOL)isToDo;
- (BOOL)isStationeryImage;
- (void)markAsStationeryImage;
- (id)_partThatIsAttachment;
- (BOOL)isMessageExternalBodyWithURL;
- (BOOL)isAttachment;
- (BOOL)isRich;
- (BOOL)isHTML;
- (BOOL)usesKnownSignatureProtocol;
- (id)createFileWrapper;
- (id)attributedString;
- (id)fileWrapper;
- (id)safeFileWrapper;
- (void)configureFileWrapper:(id)fp8;
- (id)startPart;
- (int)numberOfAlternatives;
- (id)alternativeAtIndex:(int)fp8;
- (id)signedData;
- (id)textPart;
- (id)textHtmlPart;
- (void)htmlString:(id *)fp8 createWebResource:(id *)fp12 forFileWrapper:(id)fp16 partNumber:(id)fp20;
- (id)decodedContent;
- (id)_archiveForData:(id)fp8 URL:(id)fp12 MIMEType:(id)fp16 textEncodingName:(id)fp20 frameName:(id)fp24 subresources:(id)fp28 subframeArchives:(id)fp32;
- (id)_archiveForData:(id)fp8 URL:(id)fp12 MIMEType:(id)fp16 textEncodingName:(id)fp20 frameName:(id)fp24;
- (id)_archiveForString:(id)fp8 URL:(id)fp12 needsPlainTextBodyClass:(BOOL)fp16;
- (id)_archiveForFileWrapper:(id)fp8 URL:(id)fp12;
- (id)_createArchiveWithConvertedPlainTextBodyClassFromArchive:(id)fp8;
- (id)webArchive;
- (id)decryptedMessageBodyIsEncrypted:(char *)fp8 isSigned:(char *)fp12;
- (id)todoPart;
- (void)clearCachedDescryptedMessageBody;
- (void)_setDecryptedMessageBody:(id)fp8 isEncrypted:(BOOL)fp12 isSigned:(BOOL)fp16;

@end

@interface MimePart (DecodingSupport)
- (id)_fullMimeTypeEvenInsideAppleDouble;
- (id)contentsForTextSystem;
- (id)decodeTextPlain;
- (id)decodeText;
- (id)decodeTextRichtext;
- (id)decodeTextEnriched;
- (id)decodeTextHtml;
- (id)decodeTextCalendar;
- (id)decodeMultipart;
- (id)decodeMultipartAlternative;
- (id)decodeMultipartRelated;
- (id)decodeMultipartFolder;
- (id)decodeApplicationApple_msg_composite_image;
- (id)decodeApplicationOctet_stream;
- (id)decodeApplicationZip;
- (id)decodeMessageDelivery_status;
- (id)decodeMessageRfc822;
- (id)decodeMessagePartial;
- (id)decodeMessageExternal_body;
- (id)decodeApplicationMac_binhex40;
- (id)decodeApplicationApplefile;
- (id)decodeMultipartAppledouble;
@end

@interface MimePart (IMAPSupport)
- (BOOL)parseIMAPPropertyList:(id)fp8;
- (id)partNumber;
@end

@interface MimePart (MessageSupport)
- (BOOL)parseMimeBody;
@end

@interface NSMutableData (MimeDataEncoding)
- (void)appendQuotedPrintableDataForHeaderBytes:(const char *)fp8 length:(unsigned int)fp12;
@end

@interface NSData (MimeDataEncoding)
+ (unsigned int)quotedPrintableLengthOfHeaderBytes:(const char *)fp8 length:(unsigned int)fp12;
- (id)decodeQuotedPrintableForText:(BOOL)fp8;
- (id)encodeQuotedPrintableForText:(BOOL)fp8;
- (id)encodeQuotedPrintableForText:(BOOL)fp8 allowCancel:(BOOL)fp12;
- (id)decodeBase64;
- (BOOL)isValidBase64Data;
- (id)encodeBase64WithoutLineBreaks;
- (id)encodeBase64;
- (id)encodeBase64AllowCancel:(BOOL)fp8;
- (id)decodeModifiedBase64;
- (id)encodeModifiedBase64;
- (id)encodeBase64HeaderData;
@end

@interface MimeEnrichedReader : NSObject
{
    CDAnonymousStruct5 _inputBuffer;
    int _currentIndex;
    int _inputLength;
    unsigned int _noFillLevel:30;
    unsigned int _eatOneNewline:1;
    unsigned int _insideComment:1;
    int _lastQuoteLevel;
    struct __CFArray *_commandStack;
    id _outputString;
    NSMutableString *_outputBuffer;
    float _indentWidth;
    BOOL outputShouldBeHTML;
}

+ (id)punctuationSet;
+ (id)parenSet;
- (id)init;
- (void)mismatchError:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (void)appendStringToBuffer:(id)fp8;
- (void)resetStateWithString:(id)fp8 outputString:(id)fp12;
- (void)nowWouldBeAGoodTimeToAppendToTheAttributedString;
- (void)fixConsecutiveSpaces:(id)fp8;
- (void)closeUpQuoting;
- (void)handleNoParameterCommand:(const CDAnonymousStruct7 *)fp8;
- (void)setupFontStackEntry:(struct _CommandStackEntry *)fp8;
- (void)beginCommand:(id)fp8;
- (void)endCommand:(id)fp8;
- (void)parseParameterString:(id)fp8;
- (id)currentFont;
- (int)readTokenInto:(id *)fp8;
- (void)convertRichTextString:(id)fp8 intoOutputString:(id)fp12;
- (void)convertEnrichedString:(id)fp8 intoOutputString:(id)fp12;
- (void)convertEnrichedString:(id)fp8 intoPlainOutputString:(id)fp12;

@end

@interface NSString (MimeEnrichedReader)
+ (id)htmlStringFromMimeRichTextString:(id)fp8;
+ (id)htmlStringFromMimeEnrichedString:(id)fp8;
+ (id)stringFromMimeEnrichedString:(id)fp8;
@end

@interface MimeEnrichedWriter : NSObject
{
    NSAttributedString *_attributedString;
    NSString *_string;
    CDAnonymousStruct5 _stringBuffer;
    NSFont *_defaultFont;
    NSFont *_defaultFixedPitchFont;
    float _defaultPointSize;
    struct _CommandStackEntry *_commandStack;
    struct _CommandStackEntry *_topOfStack;
    struct EnrichedState _currentState;
    unsigned int _currentLineStart;
    unsigned int _lastSpace;
}

+ (void)initialize;
- (void)setState:(struct EnrichedState *)fp8 fromAttributes:(id)fp12;
- (void)setState:(struct EnrichedState *)fp8 fromStackEntry:(struct _CommandStackEntry *)fp12;
- (void)dealloc;
- (void)finalize;
- (id)convertAttributedString:(id)fp8;
- (void)updateOutput:(id)fp8 forAttributes:(id)fp12 range:(struct _NSRange)fp16;
- (void)appendTextFromRange:(struct _NSRange)fp8 toString:(id)fp16;

@end

@interface NSAttributedString (MimeEnrichedWriter)
- (id)enrichedString;
@end

@interface NSMutableData (RFC2231Support)
- (void)appendRFC2231CompliantValue:(id)fp8 forKey:(id)fp12 withEncodingHint:(unsigned long)fp16;
@end

@interface NSMutableDictionary (RFC2231Support)
- (void)fixupRFC2231Values;
@end

@interface NSString (MimeHeaderEncoding)
- (id)encodedHeaderData;
- (id)encodedHeaderDataWithEncodingHint:(unsigned long)fp8;
- (id)decodeMimeHeaderValue;
- (id)decodeMimeHeaderValueWithCharsetHint:(id)fp8;
@end

@interface MimeTextAttachment : NSTextAttachment
{
    MimePart *_mimePart;
}

+ (id)attachmentWithInternalAppleAttachmentData:(id)fp8 mimeBody:(id)fp12;
- (void)dealloc;
- (void)finalize;
- (id)initWithMimePart:(id)fp8;
- (id)initWithMimePart:(id)fp8 andFileWrapper:(id)fp12;
- (id)fileWrapperForcingDownload;
- (id)fileWrapperForcingDownloadEvenIfExternalBody:(BOOL)fp8;
- (id)mimePart;
- (void)setMimePart:(id)fp8;
- (unsigned int)approximateSize;
- (BOOL)isPlaceholder;
- (BOOL)hasBeenDownloaded;
- (BOOL)shouldDownloadAttachmentOnDisplay;

@end

@interface NSTextAttachment (MimeSupport)
- (unsigned int)approximateSize;
- (id)mimePart;
- (BOOL)hasBeenDownloaded;
- (BOOL)isPlaceholder;
- (BOOL)shouldDownloadAttachmentOnDisplay;
- (id)internalAppleAttachmentData;
@end

@interface FormatFlowedWriter : NSObject
{
    NSAttributedString *_inputAttrString;
    NSString *_inputString;
    unsigned int _encoding;
    NSMutableString *_outputString;
    unsigned int _addedTrailingSpaces:1;
    unsigned int _quoteLevel:31;
    struct _NSRange _paraRange;
    NSMutableString *_lineString;
    NSMutableAttributedString *_attrString;
}

+ (id)newWithAttributedString:(id)fp8 encoding:(unsigned long)fp12;
- (void)dealloc;
- (unsigned int)_findLineBreakInRange:(struct _NSRange)fp8 maxCharWidthCount:(unsigned int)fp16 endIsURL:(BOOL)fp20;
- (void)_outputQuotedParagraph;
- (id)outputString;
- (BOOL)addedTrailingSpaces;

@end

@interface NSAttributedString (FormatFlowedSupport)
- (void)getFormatFlowedString:(id *)fp8 insertedTrailingSpaces:(char *)fp12 encoding:(unsigned long)fp16;
@end

@interface NSString (FormatFlowedSupport)
- (id)convertFromFlowedText:(unsigned int)fp8;
@end

@interface MessageHTMLConverter : NSObject
{
    WebView *_webView;
    NSPort *_replyPort;
    unsigned int _sequenceNumber:31;
    NSData *_resultData;
    SEL _mainThreadSelector;
}

+ (id)sharedInstance;
- (id)attributedStringFromWebArchive:(id)fp8;
- (id)junkStringFromHTMLData:(id)fp8 textEncodingName:(id)fp12 context:(id)fp16;
- (id)htmlStringWithInlinedStyleFromHTMLData:(id)fp8 textEncodingName:(id)fp12;
- (void)handlePortMessage:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)_setMainThreadSelector:(SEL)fp8;
- (void)_setUpWebView;
- (void)_loadWebViewOnMainThreadFromData:(id)fp8 withTextEncodingName:(id)fp12 orFromWebArchive:(id)fp16;
- (id)_archivedAttributedStringFromLoadedDocument;
- (id)_archivedDataFromLoadedDocument;
- (id)_archivedHTMLStringWithInlinedStyleFromLoadedDocument;
- (void)webView:(id)fp8 didStartProvisionalLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 locationChangeDone:(id)fp12 forDataSource:(id)fp16;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (id)webView:(id)fp8 identifierForInitialRequest:(id)fp12 fromDataSource:(id)fp16;
- (id)webView:(id)fp8 resource:(id)fp12 willSendRequest:(id)fp16 redirectResponse:(id)fp20 fromDataSource:(id)fp24;
- (void)webView:(id)fp8 decidePolicyForNavigationAction:(id)fp12 request:(id)fp16 frame:(id)fp20 decisionListener:(id)fp24;
- (id)resultData;
- (void)setResultData:(id)fp8;

@end

@interface MessageURLProtocol : NSURLProtocol
{
}

+ (void)initialize;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (void)startLoading;
- (void)stopLoading;

@end

@interface WebMessageDocument : NSObject
{
    NSDictionary *_partsByURL;
    NSMutableDictionary *_attachmentsByURL;
    NSMutableDictionary *backgroundImageAttachments;
    NSURL *_baseURL;
    MimeBody *_mimeBody;
    MimePart *_htmlPart;
    NSData *_htmlData;
    WebArchive *_webArchive;
    unsigned int _preferredCharset;
    unsigned int _uniqueId:30;
    unsigned int _shouldDownloadRemoteURLs:1;
    unsigned int _containsRemoteContent:1;
    BOOL _messageIsFromMicrosoft;
}

+ (id)openDocuments;
+ (id)invalidBaseURL;
+ (void)document:(id *)fp8 attachment:(id *)fp12 forURL:(id)fp16;
+ (id)documentWithUniqueIdentifier:(unsigned int)fp8;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (id)initWithMimeBody:(id)fp8;
- (id)initWithMimePart:(id)fp8;
- (void)grabAttachmentsFromArchive;
- (id)mimePartForURL:(id)fp8;
- (id)attachmentForURL:(id)fp8;
- (void)addAttachment:(id)fp8 forURL:(id)fp12;
- (BOOL)hasAttachment:(id)fp8;
- (id)userAttachments;
- (BOOL)hasAttachments;
- (id)attachments;
- (id)mimeBody;
- (id)baseURL;
- (void)setPreferredEncoding:(unsigned long)fp8;
- (id)preferredCharacterSet;
- (unsigned int)uniqueIdentifier;
- (id)htmlData;
- (id)webArchive;
- (id)fileWrapper;
- (void)setShouldDownloadRemoteURLs:(BOOL)fp8;
- (BOOL)shouldDownloadRemoteURLs;
- (void)setContainsRemoteContent:(BOOL)fp8;
- (BOOL)containsRemoteContent;
- (void)setMessageIsFromMicrosoft:(BOOL)fp8;
- (BOOL)messageIsFromMicrosoft;

@end

@interface Account : NSObject <SyncableDataOwner>
{
    unsigned int _isOffline:1;
    unsigned int _willingToGoOnline:1;
    unsigned int _autosynchronizingEnabled:1;
    unsigned int _promptedToTrustSSLCertificates:1;
    unsigned int _isActive:2;
    NSMutableDictionary *_info;
}

+ (void)initialize;
+ (BOOL)haveAccountsBeenConfigured;
+ (id)readAccountsUsingDefaultsKey:(id)fp8 forceReadFromMailPreferences:(BOOL)fp12;
+ (id)readAccountsUsingDefaultsKey:(id)fp8;
+ (void)saveAccounts:(id)fp8 usingDefaultsKey:(id)fp12;
+ (void)saveAccountInfoToDefaults;
+ (id)accountsVersion;
+ (id)createAccountWithDictionary:(id)fp8;
+ (id)accountTypeString;
+ (id)_meCardFromMacBuddyPlistFile;
+ (id)myFullName;
+ (id)myEmailAddress;
+ (BOOL)allObjectsInArrayAreOffline:(id)fp8;
+ (BOOL)defaultsToSSL;
+ (void)_loadISPPlist:(id)fp8 bundle:(id)fp12 path:(id)fp16;
+ (void)_loadISPPlistsAtPath:(id)fp8;
+ (id)_ispPlist;
+ (id)ISPReceivingAccountForDomain:(id)fp8;
+ (id)ISPReceivingAccountForIdentifier:(id)fp8;
+ (id)ISPDeliveryAccountsForISPReceivingAccount:(id)fp8;
+ (id)ISPAccounts;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)info;
- (void)setInfo:(id)fp8;
- (void)setAutosynchronizingEnabled:(BOOL)fp8;
- (void)_queueAccountInfoDidChange;
- (id)accountInfo;
- (void)_setAccountInfo:(id)fp8;
- (void)setAccountInfo:(id)fp8;
- (id)defaultsDictionary;
- (void)updateFromSyncedDictionary:(id)fp8;
- (BOOL)isActive;
- (void)setIsActive:(BOOL)fp8;
- (BOOL)isInactivatedInsteadOfBeingDeleted;
- (void)setInactivatedInsteadOfBeingDeleted:(BOOL)fp8;
- (BOOL)canGoOffline;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)fp8;
- (BOOL)isWillingToGoOnline;
- (void)setIsWillingToGoOnline:(BOOL)fp8;
- (id)storedDisplayName;
- (void)setStoredDisplayName:(id)fp8;
- (id)displayName;
- (void)setDisplayName:(id)fp8;
- (id)username;
- (void)setUsername:(id)fp8;
- (id)hostname;
- (void)setHostname:(id)fp8;
- (void)setPasswordInKeychain:(id)fp8;
- (void)_removePasswordInKeychain;
- (void)setTemporaryPassword:(id)fp8;
- (void)setPassword:(id)fp8;
- (id)passwordFromStoredUserInfo;
- (id)passwordFromKeychain;
- (id)password;
- (id)promptUserForPasswordWithMessage:(id)fp8;
- (id)promptUserIfNeededForPasswordWithMessage:(id)fp8;
- (unsigned int)portNumber;
- (unsigned int)defaultPortNumber;
- (unsigned int)defaultSecurePortNumber;
- (void)setPortNumber:(unsigned int)fp8;
- (id)serviceName;
- (id)secureServiceName;
- (void)releaseAllConnections;
- (void)validateConnections;
- (BOOL)usesSSL;
- (void)setUsesSSL:(BOOL)fp8;
- (int)securityLayerType;
- (void)setSecurityLayerType:(int)fp8;
- (id)domain;
- (void)setDomain:(id)fp8;
- (void)accountInfoDidChange;
- (id)preferredAuthScheme;
- (void)setPreferredAuthScheme:(id)fp8;
- (id)saslProfileName;
- (Class)connectionClass;
- (BOOL)requiresAuthentication;
- (id)authenticatedConnection;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned int)fp8;
- (BOOL)_shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)fp8;
- (BOOL)_connectAndAuthenticate:(id)fp8;
- (id)ISPAccountID;
- (void)setISPAccountID:(id)fp8;
- (id)uniqueId;
- (id)nameForMailboxUid:(id)fp8;
- (id)_ispAccountDictionary;
- (id)_guessedISPAccountDictionary;
- (id)supportURL;
- (id)supportURLLabel;
- (id)subscriptionURL;
- (id)subscriptionURLLabel;
- (id)accountTypeString;
- (BOOL)dataWillBeSyncedVersion:(id *)fp8 data:(id *)fp12;
- (BOOL)dataWasSyncedVersion:(id)fp8 newData:(id)fp12 acceptedChanges:(id)fp16;
- (void)updateAccountsFromPlist:(id)fp8 acceptedChanges:(id)fp12;
- (void)heal;
- (BOOL)isValid;
- (void)setAccountInfoObject:(id)fp8 forKey:(id)fp12;
- (void)removeAccountInfoObjectForKey:(id)fp8;

@end

@interface Account (Applescript)
- (int)accountType;
- (void)setAccountPassword:(id)fp8;
- (id)accountPassword;
- (void)setServerName:(id)fp8;
- (id)serverName;
- (void)setLoginName:(id)fp8;
- (id)loginName;
- (void)setAccountName:(id)fp8;
- (id)accountName;
- (int)customAuthentication;
- (void)setCustomAuthentication:(int)fp8;
@end

@interface ExchangeAccount : IMAPAccount
{
}

+ (id)accountTypeString;
+ (BOOL)usingActiveDirectory;
+ (id)outlookWebAccessServer;
+ (void)setOutlookWebAccessServer:(id)fp8;
+ (id)exchangeServer;
+ (void)setExchangeServer:(id)fp8;
+ (id)activeDirectoryUser;
+ (void)setActiveDirectoryUser:(id)fp8;
+ (id)activeDirectoryPassword;
+ (void)setActiveDirectoryPassword:(id)fp8;
+ (id)activeDirectoryFullName;
+ (id)activeDirectoryEmailAddress;
- (Class)connectionClass;
- (BOOL)_syncOnly_defaultValueForShouldStoreJunkOnServer;
- (void)updateFromSyncedDictionary:(id)fp8;
- (BOOL)storeDraftsOnServer;
- (BOOL)storeSentMessagesOnServer;
- (BOOL)storeJunkOnServer;
- (id)_defaultSpecialMailboxNameForType:(int)fp8;
- (void)filterMailboxList:(id)fp8 forMailbox:(id)fp12 options:(int)fp16;
- (id)_nonMailboxChildrenOfMailboxWithPath:(id)fp8 iisServer:(id)fp12;
- (void)_filterMailboxList:(id)fp8 forMailboxWithPath:(id)fp12 iisServer:(id)fp16;
- (id)additionalHeaderFields;
- (id)hostname;
- (void)setHostname:(id)fp8;
- (id)username;
- (void)setUsername:(id)fp8;
- (id)passwordFromStoredUserInfo;
- (id)passwordFromKeychain;
- (void)setPassword:(id)fp8;
- (void)setPasswordInKeychain:(id)fp8;
- (void)_removePasswordInKeychain;
- (id)defaultsDictionary;
- (void)handleOpenMailboxError:(id)fp8;

@end

@interface MailAccount : Account
{
    NSString *_path;
    MailboxUid *_rootMailboxUid;
    struct {
        unsigned int cacheDirtyCount:16;
        unsigned int backgroundFetchInProgress:1;
        unsigned int synchronizationThreadIsRunning:1;
        unsigned int cacheHasBeenRead:1;
        unsigned int disableCacheWrite:1;
        unsigned int _UNUSED_:12;
    } _flags;
    MailboxUid *_inboxMailboxUid;
    MailboxUid *_draftsMailboxUid;
    MailboxUid *_sentMessagesMailboxUid;
    MailboxUid *_trashMailboxUid;
    MailboxUid *_junkMailboxUid;
    MailboxUid *_notesMailboxUid;
    MailboxUid *_notesSmartMailboxUid;
    MailboxUid *_todosMailboxUid;
    MFError *_lastConnectionError;
}

+ (void)initialize;
+ (BOOL)haveAccountsBeenConfigured;
+ (void)_addAccountToSortedPaths:(id)fp8;
+ (id)defaultToDoAccount;
+ (id)defaultNoteAccount;
+ (id)noteAccountForNote:(id)fp8 referringMessage:(id)fp12;
+ (id)todoAccountFromNoteAccount:(id)fp8;
+ (id)todoAccountForNote:(id)fp8 referringMessage:(id)fp12;
+ (id)mailAccounts;
+ (id)mailAccountsExcludingCalDAVAccounts;
+ (id)allCalDAVAccounts;
+ (void)setMailAccounts:(id)fp8;
+ (void)accountsWereSynced;
+ (BOOL)newMailBeenReceived;
+ (void)setNewMailBeenReceived:(BOOL)fp8;
+ (id)syncMailAccountWithDictionary:(id)fp8 somethingChanged:(char *)fp12 initialSync:(BOOL)fp16;
+ (void)_removeAccountFromSortedPaths:(id)fp8;
+ (id)activeAccounts;
+ (id)remoteAccounts;
+ (void)saveAccountInfoToDefaults;
+ (id)accountWithUniqueId:(id)fp8;
+ (id)existingAccountWithType:(id)fp8 hostname:(id)fp12 username:(id)fp16;
+ (id)allEmailAddressesIncludingFullUserName:(BOOL)fp8;
+ (void)updateAccountExistsForSigning;
+ (BOOL)accountExistsForSigning;
+ (id)_accountContainingEmailAddress:(id)fp8 matchingAddress:(id *)fp12 fullUserName:(id *)fp16;
+ (id)accountContainingEmailAddress:(id)fp8;
+ (id)accountForHeaders:(id)fp8 message:(id)fp12;
+ (id)accountUsingHeadersFromMessage:(id)fp8;
+ (id)accountThatMessageIsFrom:(id)fp8;
+ (id)addressesThatReceivedMessage:(id)fp8;
+ (id)accountThatReceivedMessage:(id)fp8 matchingEmailAddress:(id *)fp12 fullUserName:(id *)fp16;
+ (id)outboxMessageStore:(BOOL)fp8;
+ (id)specialMailboxUids;
+ (id)_specialMailboxUidsUsingSelector:(SEL)fp8;
+ (id)inboxMailboxUids;
+ (id)trashMailboxUids;
+ (id)outboxMailboxUids;
+ (id)sentMessagesMailboxUids;
+ (id)draftMailboxUids;
+ (id)junkMailboxUids;
+ (id)noteMailboxUids;
+ (id)allNoteMailboxUids;
+ (id)todosMailboxUids;
+ (id)allMailboxUids;
+ (id)accountWithPath:(id)fp8;
+ (id)newAccountWithPath:(id)fp8;
+ (id)createAccountWithDictionary:(id)fp8;
+ (id)defaultPathForAccountWithHostname:(id)fp8 username:(id)fp12;
+ (id)defaultAccountDirectory;
+ (id)defaultPathNameForAccount;
+ (id)defaultPathNameForAccountWithHostname:(id)fp8 username:(id)fp12;
+ (id)defaultDeliveryAccount;
+ (BOOL)isAnyAccountOffline;
+ (BOOL)isAnyAccountOnline;
+ (void)_setOnlineStateOfAllAccountsTo:(BOOL)fp8;
+ (void)disconnectAllAccounts;
+ (void)connectAllAccounts;
+ (void)saveStateForAllAccounts;
+ (void)_clearAllAccountBackgroundFetchInProgress;
+ (int)numberOfDaysToKeepLocalTrash;
+ (BOOL)allAccountsDeleteInPlace;
+ (void)synchronouslyEmptyMailboxUidType:(int)fp8 inAccounts:(id)fp12;
+ (void)resetAllSpecialMailboxes;
+ (id)mailboxUidForFileSystemPath:(id)fp8 create:(BOOL)fp12;
+ (void)deleteMailboxUidIfEmpty:(id)fp8;
+ (id)_accountForURL:(id)fp8 includeInactiveAccounts:(BOOL)fp12;
+ (id)_accountForURL:(id)fp8;
+ (id)infoForURL:(id)fp8;
+ (id)URLForInfo:(id)fp8;
+ (id)accountWithURLString:(id)fp8;
+ (id)accountWithURLString:(id)fp8 includeInactiveAccounts:(BOOL)fp12;
+ (id)mailboxUidForURL:(id)fp8 forceCreation:(BOOL)fp12;
+ (id)mailboxUidForURL:(id)fp8;
+ (id)mailboxUidForMailboxID:(unsigned int)fp8;
+ (void)renameMailboxesUsingDefaultSecurePorts;
- (BOOL)isValidAccountWithError:(id)fp8 accountBeingEdited:(id)fp12 userCanOverride:(char *)fp16;
- (BOOL)cheapStoreAtPathIsEmpty:(id)fp8;
- (id)init;
- (id)initWithPath:(id)fp8;
- (void)dealloc;
- (void)heal;
- (BOOL)isValid;
- (void)finalize;
- (void)_updateSpecialMailboxForType:(int)fp8 fromSyncedDictionary:(id)fp12;
- (void)updateFromSyncedDictionary:(id)fp8;
- (id)path;
- (void)setPath:(id)fp8;
- (id)tildeAbbreviatedPath;
- (id)applescriptFullUserName;
- (void)setApplescriptFullUserName:(id)fp8;
- (id)fullUserName;
- (void)setFullUserName:(id)fp8;
- (id)localizedDeliveryAccount;
- (id)smtpIdentifier;
- (id)deliveryAccount;
- (void)setDeliveryAccount:(id)fp8;
- (void)deliveryAccountWillBeRemoved:(id)fp8;
- (BOOL)deliveryAccountIsLocked;
- (void)setDeliveryAccountIsLocked:(BOOL)fp8;
- (BOOL)isDotMacAccount;
- (id)firstEmailAddress;
- (id)rawEmailAddresses;
- (id)emailAddresses;
- (id)applescriptEmailAddresses;
- (void)setApplescriptEmailAddresses:(id)fp8;
- (void)setEmailAddresses:(id)fp8;
- (id)emailAliases;
- (id)emailAliasesLastSyncDate;
- (void)setEmailAliases:(id)fp8 syncDate:(id)fp12;
- (BOOL)shouldAutoFetch;
- (void)setShouldAutoFetch:(BOOL)fp8;
- (BOOL)fileManager:(id)fp8 shouldProceedAfterError:(id)fp12;
- (void)_synchronouslyInvalidateAndDelete:(BOOL)fp8;
- (void)deleteAccount;
- (void)saveState;
- (void)doRoutineCleanup;
- (void)releaseAllConnections;
- (void)setIsOffline:(BOOL)fp8;
- (void)setIsWillingToGoOnline:(BOOL)fp8;
- (BOOL)canFetch;
- (id)defaultsDictionary;
- (void)nowWouldBeAGoodTimeToStartBackgroundSynchronization;
- (BOOL)canAppendMessages;
- (BOOL)canBeSynchronized;
- (void)synchronizeAllMailboxes;
- (void)fetchAsynchronously;
- (void)fetchSynchronously;
- (BOOL)isFetching;
- (void)newMailHasBeenReceived;
- (id)primaryMailboxUid;
- (id)rootMailboxUid;
- (BOOL)rootChildrenCanBePromoted;
- (id)draftsMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)junkMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)sentMessagesMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)trashMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)trueNotesMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)trueOrFakeNotesMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)notesMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)todosMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)allMailboxUids;
- (void)setDraftsMailboxUid:(id)fp8;
- (void)setTrashMailboxUid:(id)fp8;
- (void)setJunkMailboxUid:(id)fp8;
- (void)setSentMessagesMailboxUid:(id)fp8;
- (void)setNotesMailboxUid:(id)fp8;
- (void)setToDosMailboxUid:(id)fp8;
- (void)deleteMessagesFromMailboxUid:(id)fp8 olderThanNumberOfDays:(unsigned int)fp12;
- (void)_setEmptyFrequency:(int)fp8 forKey:(id)fp12;
- (int)_emptyFrequencyForKey:(id)fp8 defaultValue:(id)fp12;
- (int)emptySentMessagesFrequency;
- (void)setEmptySentMessagesFrequency:(int)fp8;
- (int)emptyJunkFrequency;
- (void)setEmptyJunkFrequency:(int)fp8;
- (id)lastToDoCalendar;
- (void)setLastToDoCalendar:(id)fp8;
- (void)todoCalendarGroupTitle:(id *)fp8 groupID:(id *)fp12;
- (void)setToDoCalendarGroupTitle:(id)fp8 groupID:(id)fp12;
- (void)deleteToDoCalendarGroup;
- (int)emptyTrashFrequency;
- (void)setEmptyTrashFrequency:(int)fp8;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)setShouldMoveDeletedMessagesToTrash:(BOOL)fp8;
- (BOOL)canMoveDeletedMessagesToTrash;
- (BOOL)shouldStoreNotesInInbox;
- (void)setShouldStoreNotesInInbox:(BOOL)fp8;
- (void)emptySpecialMailboxesThatNeedToBeEmptiedAtQuit;
- (id)displayName;
- (id)displayNameForMailboxUid:(id)fp8;
- (BOOL)containsMailboxes;
- (BOOL)_resetSpecialMailboxes;
- (void)resetSpecialMailboxes;
- (id)mailboxPathExtension;
- (BOOL)canCreateNewMailboxes;
- (BOOL)newMailboxNameIsAcceptable:(id)fp8 reasonForFailure:(id *)fp12;
- (BOOL)canMailboxBeRenamed:(id)fp8;
- (BOOL)canMailboxBeDeleted:(id)fp8;
- (id)createMailboxWithParent:(id)fp8 name:(id)fp12;
- (id)createMailboxWithParent:(id)fp8 name:(id)fp12 displayName:(id)fp16;
- (BOOL)renameMailbox:(id)fp8 newName:(id)fp12 parent:(id)fp16;
- (BOOL)deleteMailbox:(id)fp8;
- (void)_resetAllMailboxURLs;
- (void)setUsername:(id)fp8;
- (void)setHostname:(id)fp8;
- (void)setPortNumber:(unsigned int)fp8;
- (void)accountInfoDidChange;
- (void)postUserInfoHasChangedForMailboxUid:(id)fp8 userInfo:(id)fp12;
- (void)setConnectionError:(id)fp8;
- (id)connectionError;
- (id)_guessedISPAccountDictionary;
- (id)storeForMailboxUid:(id)fp8;
- (Class)storeClass;
- (Class)todoStoreClass;
- (void)setUnreadCount:(unsigned int)fp8 forMailbox:(id)fp12;
- (BOOL)hasUnreadMail;
- (id)mailboxUidForRelativePath:(id)fp8 create:(BOOL)fp12;
- (id)valueInMailboxesWithName:(id)fp8;
- (id)objectSpecifierForMessageStore:(id)fp8;
- (id)objectSpecifierForMailboxUid:(id)fp8;
- (id)objectSpecifier;
- (id)URLString;
- (BOOL)synchronizesDataWithServer;
- (Class)reconciliationAgentClass;
- (BOOL)supportsMetadata;
- (id)todoCalendarsAccount;
- (BOOL)allowsCalendarCreation;
- (BOOL)isEditableByUser;
- (BOOL)canParticipateInRules;
- (BOOL)providesAccountInformation;
- (BOOL)isZeroConfiguration;
- (BOOL)isRemoteAccount;
- (BOOL)hasTrashMailbox;
- (BOOL)supportsAppleScript;
- (id)currentToDosMailboxName;
- (void)setCurrentToDosMailboxName:(id)fp8;
- (id)smartNotesMailboxUid;

@end

@interface MailAccount (Internal)
+ (void)setAllEmailAddresses:(id)fp8;
+ (void)setAllEmailAddressesWithFullUserName:(id)fp8;
+ (BOOL)_mailboxListingNotificationAreEnabled;
+ (void)_disableMailboxListingNotifications;
+ (void)_enableMailboxListingNotifications:(BOOL)fp8;
+ (id)_accountWithPath:(id)fp8;
+ (void)_postMailAccountsHaveChanged;
+ (void)resetAccountExistsForSigning;
+ (void)_setOutboxMailboxUid:(id)fp8;
+ (id)_outboxMailboxUid;
- (BOOL)_setPath:(id)fp8;
- (void)setIsActive:(BOOL)fp8;
- (void)_postMailAccountsHaveChangedIfNeeded;
- (id)_pathComponentForUidName:(id)fp8;
- (id)_uidNameForPathComponent:(id)fp8;
- (void)_readCustomInfoFromMailboxCache:(id)fp8;
- (void)_writeCustomInfoToMailboxCache:(id)fp8;
- (id)_copyMailboxUidWithParent:(id)fp8 name:(id)fp12 attributes:(unsigned int)fp16 existingMailboxUid:(id)fp20;
- (void)_synchronouslyLoadListingForParent:(id)fp8;
- (void)_loadMailboxListingIntoCache:(id)fp8 attributes:(unsigned int)fp12 parent:(id)fp16;
- (void)_mailboxesWereRemovedFromTree:(id)fp8 withFileSystemPaths:(id)fp12;
- (BOOL)_usesMailboxCache;
- (void)_synchronizeMailboxListWithFileSystemBeforeImport:(BOOL)fp8;
- (void)_synchronizeMailboxListWithFileSystem;
- (void)_synchronizeMailboxListWithFileSystemBeforeImport;
- (void)_finishSynchronizingMailboxesAfterImport;
- (void)_loadEntriesFromFileSystemPath:(id)fp8 parent:(id)fp12;
- (void)_writeMailboxCacheWithPrejudice:(BOOL)fp8;
- (id)_insertMailbox:(id)fp8 intoParent:(id)fp12 withName:(id)fp16;
- (BOOL)_setChildren:(id)fp8 forMailboxUid:(id)fp12;
- (BOOL)_setChildren:(id)fp8 addedChild:(id)fp12 forMailboxUid:(id)fp16;
- (BOOL)_deleteMailbox:(id)fp8;
- (id)description;
- (void)_fetchSynchronouslyIfNeeded;
- (void)_backgroundFetchCompletedCount:(unsigned int)fp8;
- (void)_backgroundFetchCompleted;
- (void)_emptySpecialMailboxesIfNeeded;
- (void)_emptySpecialMailboxesIfNeededForQuit:(BOOL)fp8;
- (void)_clearAllPathBasedCachesAndDelete:(BOOL)fp8;
- (id)_defaultSpecialMailboxNameForType:(int)fp8;
- (BOOL)_assignSpecialMailboxToAppropriateIvar:(id)fp8 forType:(int)fp12;
- (void)_setSpecialMailboxName:(id)fp8 forType:(int)fp12;
- (void)_setSpecialMailbox:(id)fp8 forType:(int)fp12;
- (id)_specialMailboxNameForType:(int)fp8;
- (id)_specialMailboxUidWithType:(int)fp8 create:(BOOL)fp12;
- (BOOL)_canEmptyMessagesFromMailboxUid:(id)fp8;
- (BOOL)_shouldLogDeleteActivity;
- (id)_infoForMatchingURL:(id)fp8;
- (id)_URLScheme;
- (id)_URLForInfo:(id)fp8;
- (id)_mailboxPathPrefix;
- (id)rootMailboxUidEvenIfInactive:(BOOL)fp8;
- (id)allMailboxUidsEvenIfInactive:(BOOL)fp8;
@end

@interface MailAccount (ScriptingSupport)
- (id)indicesOfObjectsByEvaluatingObjectSpecifier:(id)fp8;
- (id)mailboxes;
- (void)replaceInMailboxes:(id)fp8 atIndex:(unsigned int)fp12;
- (void)insertInMailboxes:(id)fp8 atIndex:(unsigned int)fp12;
- (void)insertInMailboxes:(id)fp8;
- (void)removeFromMailboxesAtIndex:(unsigned int)fp8;
- (BOOL)emptyTrashOnQuit;
- (void)setEmptyTrashOnQuit:(BOOL)fp8;
- (BOOL)emptySentMessagesOnQuit;
- (void)setEmptySentMessagesOnQuit:(BOOL)fp8;
- (BOOL)emptyJunkOnQuit;
- (void)setEmptyJunkOnQuit:(BOOL)fp8;
@end

@interface MailboxUidChildrenEnumerator : NSEnumerator
{
    struct __CFTree *_root;
    struct __CFTree *_currentTree;
    BOOL _includeHidden;
}

- (void)dealloc;
- (id)_initWithTree:(struct __CFTree *)fp8 includeHiddenChildren:(BOOL)fp12;
- (id)nextObject;

@end

@interface _SmartMailboxesEnumerator : NSEnumerator
{
    NSArray *smartMailboxes;
    int currentMailboxIndex;
    _MailboxUidEnumerator *currentMailboxEnumerator;
}

- (void)dealloc;
- (void)finalize;
- (id)initWithSmartMailboxUids:(id)fp8;
- (id)nextObject;

@end

@interface _MailboxUidEnumerator : NSEnumerator
{
    struct __CFTree *_startTree;
    struct __CFTree *_lastTree;
}

- (void)dealloc;
- (void)finalize;
- (id)initWithTree:(struct __CFTree *)fp8;
- (id)nextObject;

@end

@interface MailboxUid : NSObject
{
    NSString *uniqueId;
    NSString *_pathComponent;
    MailAccount *_account;
    unsigned int _attributes;
    unsigned int _unreadCount;
    void *_tree;
    NSString *pendingNameChange;
    BOOL isSmartMailbox;
    NSMutableArray *criteria;
    BOOL allCriteriaMustBeSatisfied;
    NSString *_realFullPath;
    unsigned int _numberOfVisibleChildren;
    BOOL failedToOpen;
    MFError *openFailureError;
    NSMutableIndexSet *_visibleChildrenIndexes;
    BOOL _isPublicOrShared;
}

+ (id)smartMailboxUids;
+ (void)setSmartMailboxUids:(id)fp8;
+ (id)specialSmartMailboxUids;
+ (void)addSpecialSmartMailboxUid:(id)fp8;
+ (void)removeSpecialSmartMailboxUid:(id)fp8;
+ (void)setSpecialSmartMailboxUids:(id)fp8;
+ (id)_smartMailboxWithIdentifier:(id)fp8 inArray:(id)fp12;
+ (id)smartMailboxWithIdentifier:(id)fp8;
+ (id)smartMailboxesEnumerator;
+ (BOOL)allMailboxesAreNoteType:(id)fp8;
+ (BOOL)typeIsGeneric:(int)fp8;
+ (id)descriptionForMailboxType:(int)fp8 plural:(BOOL)fp12;
+ (id)specialMailboxUids;
+ (void)setShouldIndexTrash:(BOOL)fp8;
+ (void)reimportJunk;
+ (void)setShouldIndexJunk:(BOOL)fp8;
- (BOOL)isSmartMailbox;
- (void)setIsSmartMailbox:(BOOL)fp8;
- (void)dealloc;
- (id)init;
- (id)initWithAccount:(id)fp8;
- (id)initWithName:(id)fp8 attributes:(unsigned int)fp12 forAccount:(id)fp16;
- (id)initWithMailboxUid:(id)fp8;
- (id)initWithDictionaryRepresentation:(id)fp8;
- (id)dictionaryRepresentation;
- (id)representedMailbox;
- (id)displayName;
- (void)setPendingNameChange:(id)fp8;
- (BOOL)canBeRenamed;
- (id)name;
- (void)setName:(id)fp8;
- (BOOL)isPublicOrShared;
- (void)setIsPublicOrShared:(BOOL)fp8;
- (void)notifyForUnreadCount:(unsigned int)fp8 andOldUnreadCount:(unsigned int)fp12;
- (unsigned int)unreadCount;
- (void)setUnreadCount:(unsigned int)fp8;
- (unsigned int)totalCount;
- (id)children;
- (BOOL)hasChildren;
- (void)invalidateCachedNumberOfVisibleChildren;
- (unsigned int)numberOfVisibleChildren;
- (id)childEnumerator;
- (id)childEnumeratorIncludingHiddenChildren:(BOOL)fp8;
- (id)depthFirstEnumerator;
- (unsigned int)numberOfChildren;
- (id)childAtIndex:(unsigned int)fp8;
- (id)visibleChildAtIndex:(unsigned int)fp8;
- (unsigned int)indexOfChild:(id)fp8;
- (id)childWithName:(id)fp8;
- (id)mutableCopyOfChildren;
- (id)mutableCopyOfChildrenIncludingHiddenChildren:(BOOL)fp8;
- (void)_deleteChildrenWithURLsIfInvalid:(id)fp8 fullPaths:(id)fp12;
- (BOOL)setChildren:(id)fp8;
- (void)sortChildren;
- (id)parent;
- (void)setParent:(id)fp8;
- (BOOL)hasAlternateParent;
- (void)flushCriteria;
- (id)deepCopy;
- (void)setRepresentedAccount:(id)fp8;
- (id)representedAccount;
- (id)account;
- (id)applescriptAccount;
- (BOOL)isValid;
- (void)invalidate;
- (BOOL)isContainer;
- (BOOL)isStore;
- (BOOL)isSpecialMailboxUid;
- (id)_stringByAppendingPathComponentsForAccount:(id)fp8 root:(struct __CFTree *)fp12 prefix:(id)fp16 separator:(id)fp20 pathExtension:(id)fp24;
- (id)accountRelativePath;
- (id)fullPathNonNil;
- (id)fullPath;
- (id)realFullPath;
- (id)tildeAbbreviatedPath;
- (id)pathRelativeToMailbox:(id)fp8;
- (id)URL;
- (id)URLStringWithAccount:(id)fp8;
- (id)oldURLString;
- (id)URLString;
- (int)compareWithMailboxUid:(id)fp8;
- (int)indexToInsertChildMailboxUid:(id)fp8;
- (BOOL)isDescendantOfMailbox:(id)fp8;
- (id)description;
- (int)type;
- (void)setType:(int)fp8;
- (BOOL)isRSSMailboxOrFolder;
- (BOOL)shouldMaintainMessageTypeUnity;
- (int)preferredMessageType;
- (BOOL)isVisible;
- (BOOL)isIndexable;
- (void)writeIndexFlagFileIfNeeded;
- (void)removeIndexFlagFileIfNeeded;
- (id)_loadUserInfo;
- (id)userInfoObjectForKey:(id)fp8;
- (BOOL)parentStoresUserInfo;
- (void)setUserInfoObject:(id)fp8 forKey:(id)fp12;
- (BOOL)userInfoBoolForKey:(id)fp8;
- (void)setUserInfoBool:(BOOL)fp8 forKey:(id)fp12;
- (void)saveUserInfo;
- (id)userInfoDictionary;
- (void)setUserInfoWithDictionary:(id)fp8;
- (id)userInfo;
- (id)ancestralAccount;
- (id)criteria;
- (id)criterion;
- (void)setCriteria:(id)fp8;
- (id)abGroupsUsedInCriteria;
- (BOOL)criteriaAreValid:(id *)fp8;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)fp8;
- (void)addressBookDidChange:(id)fp8;
- (id)store;
- (id)toDoStore;
- (BOOL)failedToOpen;
- (id)openFailureError;
- (void)setFailedToOpen:(BOOL)fp8 error:(id)fp12;
- (id)copyWithZone:(id)fp8;
- (BOOL)allowsMoveDeletedMessagesToTrash;
- (id)uniqueId;
- (void)setUniqueId:(id)fp8;
- (unsigned int)attributes;
- (void)setAttributes:(unsigned int)fp8;

@end

@interface MailboxUid (SmartMailboxCycleDetection)
- (BOOL)isPointedToByCriterion:(id)fp8 traversedMailboxes:(id)fp12;
- (BOOL)isPointedToBySmartMailbox:(id)fp8 traversedMailboxes:(id)fp12;
- (BOOL)isPointedToBySmartMailbox:(id)fp8;
@end

@interface Criterion (SmartMailboxCycleDetection)
- (id)targetSmartMailbox;
@end

@interface SpecialMailboxUid : MailboxUid
{
}

+ (id)specialMailboxWithIdentifier:(id)fp8;
+ (id)specialMailboxUidForMailboxUidType:(int)fp8;
+ (id)inboxMailboxUid;
+ (id)sentMessagesMailboxUid;
+ (id)draftsMailboxUid;
+ (id)junkMailboxUid;
+ (id)outboxMailboxUid;
+ (id)trashMailboxUid;
+ (id)notesMailboxUid;
+ (id)todosMailboxUid;
+ (id)replaceToDosSpecialMailboxWithChildrenInArray:(id)fp8;
- (id)criterion;
- (id)displayName;
- (id)name;
- (id)account;
- (id)children;
- (id)childEnumeratorIncludingHiddenChildren:(BOOL)fp8;
- (id)mutableCopyOfChildrenIncludingHiddenChildren:(BOOL)fp8;
- (id)childAtIndex:(unsigned int)fp8;
- (unsigned int)numberOfChildren;
- (unsigned int)numberOfVisibleChildren;
- (unsigned int)unreadCount;
- (id)tildeAbbreviatedPath;
- (id)_viewerAttributesKey;
- (id)_loadUserInfo;
- (void)saveUserInfo;

@end

@interface SpecialMailboxUid (AppleScript)
+ (id)appleScriptNameForMailboxType:(int)fp8;
- (id)appleScriptKey;
- (id)objectSpecifier;
- (id)messages;
@end

@interface IMAPAccount : MailAccount
{
    NSString *_separatorChar;
    NSArray *_lastKnownCapabilities;
    IMAPConnectionPool *_connectionPool;
    NSMutableArray *_mailboxesToSynchronize;
    unsigned int _readBufferSize:31;
    unsigned int _lastConnectionFailed:1;
    IMAPOperationCache *_offlineCache;
    unsigned int _shouldIncludePrefixInPath:1;
    NSLock *_mailboxListingLock;
    NSLock *_connectionPoolLock;
    BOOL _allowsInputForConnectionProblems;
    NSMutableSet *_mailboxesWithChangedUidNext;
    NSMutableDictionary *_IMAPMailboxes;
    NSMutableDictionary *_IMAPQuotaRoots;
    unsigned int _isFetchingUnreadCountsForAllMailboxes:1;
    unsigned int _isFetchingUnreadCountsAndCheckingNewMessagesForAllMailboxes:1;
    double _lastUnreadCountsUpdateTime;
    double _lastUnreadCountsAndNewMessagesUpdateTime;
    NSString *_fileSystemServerPathPrefix;
    NSLock *_fsPrefixLock;
    BOOL _recoveringFromConnectionLoss;
    NSArray *_namespacePrefixes;
}

+ (void)initialize;
+ (id)accountTypeString;
+ (void)_deleteQueuedMailboxes:(id)fp8;
- (id)init;
- (void)_readCustomInfoFromMailboxCache:(id)fp8;
- (void)_writeCustomInfoToMailboxCache:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (void)saveState;
- (BOOL)_syncOnly_defaultValueForShouldStoreJunkOnServer;
- (void)updateFromSyncedDictionary:(id)fp8;
- (void)doRoutineCleanup;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (void)setDisplayName:(id)fp8;
- (unsigned int)defaultPortNumber;
- (unsigned int)defaultSecurePortNumber;
- (id)serviceName;
- (id)secureServiceName;
- (id)saslProfileName;
- (BOOL)requiresAuthentication;
- (Class)connectionClass;
- (id)authenticatedConnection;
- (BOOL)compactWhenClosingMailboxes;
- (void)setCompactWhenClosingMailboxes:(BOOL)fp8;
- (void)setCachePolicy:(int)fp8 permanently:(BOOL)fp12;
- (int)cachePolicy;
- (BOOL)useIDLEIfAvailable;
- (void)setUseIDLEIfAvailable:(BOOL)fp8;
- (BOOL)needToSynchronizeMailboxCaches;
- (void)_didSynchronizeMailboxCachesAndFoundChanges:(BOOL)fp8;
- (BOOL)_setChildren:(id)fp8 forMailboxUid:(id)fp12;
- (BOOL)_setStoreSpecialMailboxUidType:(int)fp8 onServer:(BOOL)fp12;
- (BOOL)storeDraftsOnServer;
- (void)setStoreDraftsOnServer:(BOOL)fp8;
- (BOOL)storeNotesOnServer;
- (void)setStoreNotesOnServer:(BOOL)fp8;
- (BOOL)storeToDosOnServer;
- (void)setStoreToDosOnServer:(BOOL)fp8;
- (BOOL)storeJunkOnServer;
- (void)setStoreJunkOnServer:(BOOL)fp8;
- (BOOL)storeSentMessagesOnServer;
- (void)setStoreSentMessagesOnServer:(BOOL)fp8;
- (BOOL)storeTrashOnServer;
- (void)setStoreTrashOnServer:(BOOL)fp8;
- (id)primaryMailboxUid;
- (BOOL)handleResponseCodeFromResponse:(id)fp8;
- (void)_handleAlertResponse:(id)fp8;
- (unsigned int)readBufferSize;
- (void)setReadBufferSize:(unsigned int)fp8;
- (void)_synchronizeMailboxesSynchronously;
- (void)_synchronizeMailboxes:(id)fp8;
- (void)synchronizeAllMailboxes;
- (void)_checkForNewMessagesInStore:(id)fp8 unreadCountDelta:(unsigned int)fp12;
- (id)_dataForTemporaryUid:(unsigned long)fp8;
- (unsigned int)minimumPartialDownloadSize;
- (BOOL)allowsPartialDownloads;
- (void)setAllowsPartialDownloads:(BOOL)fp8;
- (BOOL)_connectAndAuthenticate:(id)fp8;
- (void)handleOpenMailboxError:(id)fp8;
- (id)gatewayForStore:(id)fp8 options:(int)fp12;
- (id)gatewayForExistingConnectionToMailbox:(id)fp8;
- (void)recoverFromConnectionLoss;
- (id)_gatewayForMailboxUid:(id)fp8 name:(id)fp12 options:(int)fp16;
- (id)_getPotentialGatewayForMailbox:(id)fp8 options:(int)fp12 createdNewConnection:(char *)fp16 needsSelect:(char *)fp20;
- (BOOL)_shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)fp8;
- (BOOL)_recoverFromConnectionlessState;
- (void)_releaseAllConnectionsAndCallSuper:(BOOL)fp8 saveOfflineCache:(BOOL)fp12;
- (void)releaseAllConnections;
- (void)_validateConnections;
- (void)validateConnections;
- (void)filterMailboxList:(id)fp8 forMailbox:(id)fp12 options:(int)fp16;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (id)IMAPMailboxForMailboxUid:(id)fp8 createIfNeeded:(BOOL)fp12;
- (id)IMAPMailboxForMailboxName:(id)fp8 createIfNeeded:(BOOL)fp12;
- (id)_IMAPMailboxForMailboxUid:(id)fp8 name:(id)fp12 createIfNeeded:(BOOL)fp16;
- (id)_addIMAPMailboxForMailboxUid:(id)fp8 name:(id)fp12;
- (void)_renameIMAPMailboxWithMailboxUid:(id)fp8 fromName:(id)fp12 toName:(id)fp16;
- (void)_removeIMAPMailboxWithName:(id)fp8;
- (void)_startObserving:(BOOL)fp8 IMAPMailbox:(id)fp12;
- (id)quotaRootForName:(id)fp8 createIfNeeded:(BOOL)fp12;
- (void)clearQuotaRoots;
- (BOOL)canGoOffline;
- (void)_setIsOffline:(BOOL)fp8;
- (void)setIsOffline:(BOOL)fp8;
- (void)_asynchronouslyFetchUnreadCountsCheckForNewMessages:(BOOL)fp8;
- (void)fetchToDosSynchronously;
- (void)fetchSynchronously;
- (void)_setSeparatorChar:(id)fp8;
- (id)separatorChar;
- (id)lastKnownCapabilities;
- (BOOL)supportsIDLE;
- (id)additionalHeaderFields;
- (id)_listingForMailboxUid:(id)fp8 listAllChildren:(BOOL)fp12 onlySubscribed:(BOOL)fp16;
- (id)_namespacePrefixesForPrivate:(BOOL)fp8 public:(BOOL)fp12 shared:(BOOL)fp16;
- (id)_recursivelyFilterMailboxList:(id)fp8 accordingToList:(id)fp12;
- (id)_listingForMailboxUid:(id)fp8 listAllChildren:(BOOL)fp12;
- (BOOL)_createMailbox:(id)fp8 withGateway:(id)fp12;
- (id)createMailboxWithParent:(id)fp8 name:(id)fp12 displayName:(id)fp16;
- (BOOL)_askToChangePathPrefixToCreateMailbox:(id)fp8 displayName:(id)fp12 withGateway:(id)fp16;
- (BOOL)_deleteMailbox:(id)fp8;
- (void)_setSpecialMailbox:(id)fp8 forType:(int)fp12;
- (id)_specialMailboxNameForType:(int)fp8;
- (BOOL)_isMailboxTypeStoredLocally:(int)fp8;
- (id)_localMailboxNameForType:(int)fp8 usingDisplayName:(id)fp12;
- (void)_renameLocalSpecialMailboxesToName:(id)fp8;
- (id)_specialMailboxUidWithType:(int)fp8 create:(BOOL)fp12 isLocal:(BOOL)fp16;
- (id)_specialMailboxUidWithType:(int)fp8 create:(BOOL)fp12;
- (BOOL)canBeSynchronized;
- (void)considerSynchronizingNow;
- (void)nowWouldBeAGoodTimeToStartBackgroundSynchronization;
- (void)_nowWouldBeAGoodTimeToStartBackgroundSynchronizationWithUserInput:(BOOL)fp8;
- (void)_fetchUnreadCountsForMailboxUid:(id)fp8 recursively:(BOOL)fp12 gateway:(id)fp16 checkForNewMessages:(BOOL)fp20;
- (void)_fetchUnreadCountsForMailboxUid:(id)fp8 recursively:(BOOL)fp12 gateway:(id)fp16;
- (void)_fetchUnreadCountsCheckForNewMessages:(BOOL)fp8;
- (void)_synchronizeAccountWithServerWithUserInput:(id)fp8;
- (void)_clearAllPathBasedCachesAndDelete:(BOOL)fp8;
- (id)_copyMailboxUidWithParent:(id)fp8 name:(id)fp12 attributes:(unsigned int)fp16 existingMailboxUid:(id)fp20;
- (void)_synchronouslyLoadListingForParent:(id)fp8;
- (void)refreshMailboxListingRootedAtUid:(id)fp8;
- (void)_waitForMailboxListingLoadToComplete;
- (void)_mailboxesWereRemovedFromTree:(id)fp8 withFileSystemPaths:(id)fp12;
- (void)_recursivelyModifySubscriptions:(BOOL)fp8 forMailbox:(id)fp12 children:(id)fp16 withGateway:(id)fp20;
- (BOOL)renameMailbox:(id)fp8 newName:(id)fp12 parent:(id)fp16;
- (void)insertInMailboxes:(id)fp8 atIndex:(unsigned int)fp12;
- (id)_pathComponentForUidName:(id)fp8;
- (id)_uidNameForPathComponent:(id)fp8;
- (id)_pathForMailboxName:(id)fp8 toCreateInMailboxUid:(id)fp12;
- (id)_nameForMailboxUid:(id)fp8;
- (id)nameForMailboxUid:(id)fp8;
- (id)_mailboxUidForName:(id)fp8;
- (BOOL)canMailboxBeDeleted:(id)fp8;
- (id)serverPathPrefix;
- (void)_setServerPathPrefix:(id)fp8 permanently:(BOOL)fp12 shouldSync:(BOOL)fp16;
- (void)setServerPathPrefix:(id)fp8 permanently:(BOOL)fp12;
- (id)_fileSystemServerPathPrefix;
- (void)_setFileSystemServerPathPrefix;
- (void)syncFileSystemWithServerPathPrefix;
- (id)_mailboxPathPrefix;
- (void)_loadEntriesFromFileSystemPath:(id)fp8 parent:(id)fp12;
- (void)deleteMessagesFromMailboxUid:(id)fp8 olderThanNumberOfDays:(unsigned int)fp12;
- (BOOL)_canEmptyMessagesFromMailboxUid:(id)fp8;
- (id)offlineCacheIfOffline;
- (id)offlineCache;
- (void)_clearOfflineCache;
- (id)mailboxUidForRelativePath:(id)fp8 create:(BOOL)fp12;
- (id)_URLScheme;
- (id)_infoForMatchingURL:(id)fp8;
- (BOOL)synchronizesDataWithServer;
- (Class)reconciliationAgentClass;
- (BOOL)recoveringFromConnectionLoss;
- (void)setRecoveringFromConnectionLoss:(BOOL)fp8;
- (id)connectionPool;
- (void)setConnectionPool:(id)fp8;

@end

@interface _IMAPMailboxDeletionQueueEntry : NSObject
{
    NSArray *urls;
    NSArray *paths;
    IMAPAccount *account;
}

- (void)dealloc;

@end

@interface IMAPAccount (ScriptingSupport)
- (int)messageCaching;
- (void)setMessageCaching:(int)fp8;
@end

@interface iToolsAccount : IMAPAccount
{
    BOOL _isPrimaryiToolsAccount;
}

+ (id)defaultPathNameForAccountWithHostname:(id)fp8 username:(id)fp12;
+ (id)primaryUsername;
+ (BOOL)primaryUsernameExists;
+ (id)iToolsMailHostname;
+ (id)iToolsSMTPHostname;
+ (id)accountTypeString;
+ (BOOL)defaultsToSSL;
- (BOOL)_isReallyPrimaryiToolsAccount;
- (BOOL)isPrimaryiToolsAccount;
- (void)setIsPrimaryiToolsAccount:(BOOL)fp8;
- (BOOL)isActive;
- (id)hostname;
- (void)setHostname:(id)fp8;
- (void)setPortNumber:(unsigned int)fp8;
- (unsigned int)portNumber;
- (void)setUsername:(id)fp8;
- (void)setPasswordInKeychain:(id)fp8;
- (void)_removePasswordInKeychain;
- (id)passwordFromKeychain;
- (id)displayName;
- (id)username;
- (id)rawEmailAddresses;
- (id)emailAddresses;
- (void)setDeliveryAccount:(id)fp8;
- (id)deliveryAccount;
- (id)accountTypeString;

@end

@interface POPAccount : MailAccount
{
    POP3FetchStore *_fetcher;
    ActivityMonitor *_fetchMonitor;
    NSLock *_connectionActivityLock;
    BOOL _fetcherNeedsReset;
    BOOL _deletingMessages;
    BOOL _hasDoneBackgroundSynchronization;
    BOOL _shouldAttemptAPOP;
}

+ (id)accountTypeString;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (BOOL)supportsMetadata;
- (BOOL)_configureFetcherObject;
- (void)fetchSynchronously;
- (void)resetFetcher;
- (void)releaseAllConnections;
- (BOOL)canGoOffline;
- (void)setIsOffline:(BOOL)fp8;
- (void)_readCustomInfoFromMailboxCache:(id)fp8;
- (void)updateFromSyncedDictionary:(id)fp8;
- (unsigned int)defaultPortNumber;
- (unsigned int)defaultSecurePortNumber;
- (id)serviceName;
- (id)secureServiceName;
- (id)saslProfileName;
- (BOOL)requiresAuthentication;
- (Class)storeClass;
- (Class)todoStoreClass;
- (Class)connectionClass;
- (void)setPreferredAuthScheme:(id)fp8;
- (id)mailboxPathExtension;
- (id)primaryMailboxUid;
- (BOOL)canCreateNewMailboxes;
- (BOOL)canMailboxBeRenamed:(id)fp8;
- (BOOL)_setPath:(id)fp8;
- (int)bigMessageWarningSize;
- (void)setBigMessageWarningSize:(int)fp8;
- (BOOL)shouldAttemptAPOP;
- (void)setShouldAttemptAPOP:(BOOL)fp8;
- (void)setMessageDeletionPolicy:(int)fp8;
- (void)setDelayedMessageDeletionInterval:(unsigned int)fp8;
- (int)messageDeletionPolicy;
- (unsigned int)delayedMessageDeletionInterval;
- (BOOL)deletingMessages;
- (void)deleteMessagesNow:(id)fp8;
- (void)deleteSeenMessagesNow;
- (void)insertInMailboxes:(id)fp8 atIndex:(unsigned int)fp12;
- (void)acquireConnectionActivityLock;
- (void)relinquishConnectionActivityLock;
- (id)createSeenMessagesManager;
- (void)_addAccountAndSeenMessagesToMessageManager;
- (id)_URLScheme;
- (id)_infoForMatchingURL:(id)fp8;
- (id)storeForMailboxUid:(id)fp8;
- (id)todoCalendarsAccount;

@end

@interface POPAccount (Applescript)
- (BOOL)deleteMessagesWhenMovedFromInbox;
- (void)setDeleteMessagesWhenMovedFromInbox:(BOOL)fp8;
- (BOOL)deleteMessagesOnServer;
- (void)setDeleteMessagesOnServer:(BOOL)fp8;
- (id)mailboxes;
- (id)objectSpecifierForMailboxUid:(id)fp8;
- (id)valueInMailboxesWithName:(id)fp8;
@end

@interface _RootlessMailboxUid : MailboxUid
{
}

- (id)displayName;
- (id)fullPath;
- (id)tildeAbbreviatedPath;
- (id)storeForMailboxUid:(id)fp8;

@end

@interface LocalAccount : MailAccount
{
    NSMutableArray *_disembodiedUids;
}

+ (id)localAccount;
+ (id)defaultPathNameForAccount;
+ (id)defaultPathNameForAccountWithHostname:(id)fp8 username:(id)fp12;
+ (id)accountTypeString;
- (id)initWithPath:(id)fp8;
- (id)rootMailboxUid;
- (id)uniqueId;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (id)primaryMailboxUid;
- (void)setPath:(id)fp8;
- (id)displayName;
- (void)setHostname:(id)fp8;
- (void)setUsername:(id)fp8;
- (id)password:(BOOL)fp8;
- (void)setPassword:(id)fp8;
- (BOOL)canFetch;
- (BOOL)shouldAutoFetch;
- (BOOL)shouldStoreNotesInInbox;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)fp8;
- (int)emptyTrashFrequency;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)_synchronouslyLoadListingForParent:(id)fp8;
- (id)_copyMailboxUidWithParent:(id)fp8 name:(id)fp12 attributes:(unsigned int)fp16 existingMailboxUid:(id)fp20;
- (BOOL)_setChildren:(id)fp8 forMailboxUid:(id)fp12;
- (id)createMailboxWithParent:(id)fp8 name:(id)fp12 displayName:(id)fp16;
- (id)createMailboxWithParent:(id)fp8 name:(id)fp12 error:(id *)fp16;
- (BOOL)renameMailbox:(id)fp8 newName:(id)fp12 parent:(id)fp16;
- (void)insertInMailboxes:(id)fp8 atIndex:(unsigned int)fp12;
- (id)mailboxUidForFileSystemPath:(id)fp8;
- (id)_URLScheme;
- (id)_infoForMatchingURL:(id)fp8;
- (BOOL)synchronizesDataWithServer;
- (id)_specialMailboxNameForType:(int)fp8;
- (id)todosMailboxUidCreateIfNeeded:(BOOL)fp8;
- (BOOL)isEditableByUser;
- (BOOL)canParticipateInRules;
- (BOOL)providesAccountInformation;
- (BOOL)isZeroConfiguration;
- (BOOL)isRemoteAccount;
- (BOOL)hasTrashMailbox;
- (BOOL)supportsAppleScript;

@end

@interface Connection : NSObject
{
    id <SASLSecurityLayer> _securityLayer;
    _NSSocket *_socket;
    char *_buffer;
    int _bufferRemainingBytes;
    unsigned int _bufferStart;
    unsigned int _bufferLength;
    NSData *_logData;
    NSString *_hostname;
    unsigned int _portNumber;
    int _securityLayerType;
    NSString *_username;
    NSString *_password;
    SASLAuthenticator *_authenticator;
    Class _accountClass;
    double _connectTimeout;
    double _readWriteTimeout;
    BOOL _canReauthenticate;
}

+ (void)initialize;
+ (void)logBytes:(const char *)fp8 length:(int)fp12;
+ (void)flushLog;
+ (id)logClasses;
+ (void)setLogClasses:(id)fp8;
+ (BOOL)logAllSocketActivity;
+ (void)setLogAllSocketActivity:(BOOL)fp8;
+ (id)logActivityOnPorts;
+ (void)setLogActivityOnPorts:(id)fp8;
+ (id)logActivityOnHosts;
+ (void)setLogActivityOnHosts:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (void)_setupSSLDomainError:(id)fp8 hostname:(id)fp12 socket:(id)fp16;
- (BOOL)connectAndSetSecurityLayerUsingAccount:(id)fp8;
- (BOOL)connectUsingAccount:(id)fp8;
- (BOOL)reconnect;
- (BOOL)_connectUsingAccount:(id)fp8 securityLayerType:(int)fp12;
- (BOOL)_connectUsingHostname:(id)fp8 onPort:(unsigned int)fp12 securityLayerType:(int)fp16 accountClass:(Class)fp20;
- (void)_clearSuccessfulConnection;
- (void)_setSuccessfulConnectionHostname:(id)fp8 onPort:(unsigned int)fp12 securityLayerType:(int)fp16 accountClass:(Class)fp20;
- (void)_setupConnection;
- (BOOL)_teardownConnectionWithResult:(BOOL)fp8;
- (BOOL)authenticateUsingAccount:(id)fp8;
- (BOOL)_reauthenticate;
- (void)_clearSuccessfulAuthentication;
- (void)_setSuccessfulAuthenticationUsername:(id)fp8 password:(id)fp12 authenticator:(id)fp16;
- (id)capabilities;
- (id)authenticationMechanisms;
- (BOOL)_writeData:(id)fp8 dontLogBytesInRange:(struct _NSRange)fp12 error:(id *)fp20;
- (BOOL)_writeData:(id)fp8 error:(id *)fp12;
- (int)_readBytesFromSocketIntoBuffer:(char *)fp8 amount:(int)fp12 requireAllBytes:(BOOL)fp16 error:(id *)fp20;
- (BOOL)_fillBuffer:(id *)fp8;
- (BOOL)_readLineIntoData:(id)fp8 error:(id *)fp12;
- (BOOL)_readBytesIntoData:(id)fp8 desiredLength:(unsigned int)fp12 error:(id *)fp16;
- (BOOL)_authenticateUsingAccount:(id)fp8 authenticator:(id)fp12;
- (BOOL)_startTLSForHostname:(id)fp8 onPort:(unsigned int)fp12 securityLayerType:(int)fp16 accountClass:(Class)fp20;
- (int)_startTLSForSecurityLayerType:(int)fp8;
- (BOOL)isValid;
- (void)disconnect;
- (void *)_socket;
- (BOOL)_hasBytesAvailable;
- (double)readWriteTimeout;
- (void)setReadWriteTimeout:(double)fp8;
- (double)connectTimeout;
- (void)setConnectTimeout:(double)fp8;

@end

@interface MessageThread : Message
{
    NSMutableArray *filteredMessages;
    int unreadMessageCount;
    int flaggedMessageCount;
    int junkMessageCount;
    int attachmentCount;
    NSString *formattedUnreadMessageCount;
    NSMutableDictionary *pendingChanges;
    BOOL updateSubjectEtcUponClosing;
    BOOL isOpen;
    BOOL showDateInSubject;
    BOOL _containsOnlyNotes;
    Message *newestMessage;
    Message *oldestMessage;
    Message *realNewestMessage;
    Message *oldestUnreadMessage;
    Message *messageWithHighestLibraryID;
    Message *messageWithHighestRemoteID;
    Message *messageWithHighestNumberWithinStores;
}

+ (id)messagesByExpandingThreads:(id)fp8;
+ (id)_storeForMailbox:(id)fp8 fromStores:(id)fp12 cache:(id)fp16;
+ (id)findNewestMessageInMessages:(id)fp8;
+ (id)findOldestUnreadMessageInMessages:(id)fp8;
+ (id)findMessageWithHighestLibraryIDInMessages:(id)fp8;
+ (id)findMessageWithHighestRemoteIDInMessages:(id)fp8;
- (id)initWithMessages:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)filteredMessages;
- (id)filteredMessageIDs;
- (void)addMessages:(id)fp8 usingSortFunction:(void *)fp12 context:(struct _MessageSortingInformation *)fp16 makePending:(BOOL)fp20;
- (void)deleteMessage:(id)fp8 makePending:(BOOL)fp12;
- (BOOL)commitPendingChangesForSeriesID:(id)fp8;
- (void)discardPendingChangesForSeriesID:(id)fp8;
- (BOOL)flagsHaveChanged;
- (void)updateSubjectEtc:(BOOL)fp8;
- (id)formattedUnreadMessageCount;
- (int)numberOfFilteredMessages;
- (int)numberOfPendingFilteredMessages;
- (id)pendingFilteredMessages;
- (int)numberOfUnreadMessages;
- (void)setNewestMessage:(id)fp8;
- (void)setOldestMessage:(id)fp8;
- (id)to;
- (id)subject;
- (double)dateReceivedAsTimeIntervalSince1970;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (id)sender;
- (id)senderAddressComment;
- (id)messageID;
- (id)messageStore;
- (id)messageBody;
- (unsigned int)messageSize;
- (unsigned int)numberOfAttachments;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (BOOL)isThread;
- (BOOL)containsOnlyNotes;
- (BOOL)isOpen;
- (void)setIsOpen:(BOOL)fp8;
- (BOOL)willBeDeletedIfMessagesAreDeleted:(id)fp8;
- (void)sortMessagesUsingFunction:(void *)fp8 context:(struct _MessageSortingInformation *)fp12 makePending:(BOOL)fp16;
- (void)invertOrderOfMessagesMakePending:(BOOL)fp8;
- (id)oldestMessage;
- (id)newestMessage;
- (id)oldestUnreadMessage;
- (void)setJunkFlags;
- (id)_unlockedMessageWithHighestLibraryID;
- (id)messageWithHighestLibraryID;
- (id)_unlockedMessageWithHighestRemoteID;
- (id)messageWithHighestRemoteID;
- (id)messageWithHighestNumberWithinStores:(id)fp8;
- (id)mailbox;
- (id)preferredEmailAddressToReplyWith;

@end

@interface Message (Threads)
- (BOOL)isThread;
- (BOOL)containsOnlyNotes;
- (BOOL)shouldUseSubjectForThreading;
@end

@interface NSMailDelivery : NSObject
{
}

+ (void)_loadMailDefaults;
+ (void)_unloadMailDefaults;
+ (BOOL)deliverMessage:(id)fp8 headers:(id)fp12 format:(id)fp16 protocol:(id)fp20;
+ (BOOL)deliverMessage:(id)fp8 subject:(id)fp12 to:(id)fp16;
+ (BOOL)hasDeliveryClassBeenConfigured;

@end

@interface MailDelivery : NSObject
{
    id _delegate;
    Message *_message;
    MailAccount *_archiveAccount;
    DeliveryAccount *_account;
    unsigned int _askForReadReceipt:1;
    unsigned int _threaded:1;
    unsigned int _status:4;
    unsigned int __UNUSED__:25;
}

+ (id)newWithMessage:(id)fp8;
+ (BOOL)deliverMessage:(id)fp8 askForReadReceipt:(BOOL)fp12;
+ (BOOL)deliverMessage:(id)fp8;
+ (BOOL)returnMessageToSender:(id)fp8;
- (id)initWithMessage:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)message;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (id)archiveAccount;
- (void)setArchiveAccount:(id)fp8;
- (id)account;
- (void)setAccount:(id)fp8;
- (BOOL)askForReadReceipt;
- (void)setAskForReadReceipt:(BOOL)fp8;
- (int)deliveryStatus;
- (id)headersForDelivery;
- (void)deliverAsynchronously;
- (int)deliverSynchronously;
- (int)deliverMessageHeaderData:(id)fp8 bodyData:(id)fp12 toRecipients:(id)fp16;

@end

@interface DeliveryAccount : Account
{
}

+ (id)_deliveryAccounts;
+ (id)deliveryAccounts;
+ (void)setDeliveryAccounts:(id)fp8;
+ (void)addDeliveryAccount:(id)fp8;
+ (void)insertObjectInDeliveryAccounts:(id)fp8 atIndex:(unsigned int)fp12;
+ (void)removeDeliveryAccount:(id)fp8;
+ (void)_postDeliveryAccountsHaveChanged;
+ (id)readDeliveryAccountsFromDefaults;
+ (void)saveAccountInfoToDefaults;
+ (id)accountWithUniqueId:(id)fp8;
+ (id)accountWithIdentifier:(id)fp8;
+ (id)accountWithDomain:(id)fp8;
+ (id)accountWithWhichToSendMessage:(id)fp8;
+ (id)accountForHeaders:(id)fp8 message:(id)fp12;
+ (id)existingAccountWithHostname:(id)fp8 username:(id)fp12;
+ (id)accountWithHostname:(id)fp8 username:(id)fp12;
+ (id)accountWithHostname:(id)fp8 username:(id)fp12 lookForExistingAccounts:(BOOL)fp16 addToDeliveryAccountsIfNeeded:(BOOL)fp20;
+ (id)newDefaultInstance;
- (Class)deliveryClass;
- (id)displayName;
- (id)identifier;
- (void)updateFromSyncedDictionary:(id)fp8;
- (BOOL)shouldUseAuthentication;
- (void)setShouldUseAuthentication:(BOOL)fp8;
- (unsigned long long)maximumMessageBytes;
- (void)setMaximumMessageBytes:(unsigned long long)fp8;
- (id)remoteMailAccountsEmployedBy;

@end

@interface SMTPDelivery : MailDelivery
{
    SMTPConnection *_connection;
}

- (Class)deliveryClass;
- (int)deliverMessageHeaderData:(id)fp8 bodyData:(id)fp12 toRecipients:(id)fp16;

@end

@interface SMTPConnection : Connection
{
    unsigned int _lastResponseCode:31;
    unsigned int _hideLoggedData:1;
    id _lastResponse;
    int _greeting;
    NSMutableArray *_serviceExtensions;
    NSMutableData *_mdata;
    NSString *_domainName;
    int _originalSocketTimeout;
    int _lastCommandTimestamp;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (int)state;
- (id)lastResponse;
- (unsigned int)lastResponseCode;
- (id)domainName;
- (void)setDomainName:(id)fp8;
- (unsigned long long)maximumMessageBytes;
- (id)authenticationMechanisms;
- (BOOL)authenticateUsingAccount:(id)fp8;
- (BOOL)_reauthenticate;
- (BOOL)_authenticateUsingAccount:(id)fp8 authenticator:(id)fp12;
- (int)_authenticateUsingHostname:(id)fp8 username:(id)fp12 password:(id)fp16 authenticator:(id)fp20;
- (BOOL)_startTLSForHostname:(id)fp8 onPort:(unsigned int)fp12 securityLayerType:(int)fp16 accountClass:(Class)fp20;
- (int)_startTLSForSecurityLayerType:(int)fp8;
- (BOOL)connectUsingAccount:(id)fp8;
- (BOOL)reconnect;
- (void)_setupConnection;
- (BOOL)_teardownConnectionWithResult:(BOOL)fp8;
- (int)mailFrom:(id)fp8;
- (int)rcptTo:(id)fp8;
- (int)noop;
- (int)sendDatas:(id)fp8;
- (int)quit;
- (long)timeLastCommandWasSent;

@end

@interface SMTPConnection (PrivateCommands)
- (int)_sendCommand:(const char *)fp8 length:(unsigned int)fp12 argument:(id)fp16 trailer:(unsigned char)fp20;
- (int)_getReply;
- (void)_readResponseRange:(struct _NSRange *)fp8 isContinuation:(char *)fp12;
- (id)_getValidDomain;
- (int)_doHandshakeWithSecurityLayerType:(int)fp8 tryHELOIfELHOFails:(BOOL)fp12;
- (int)_sendELHOWithClientDomainName:(id)fp8;
- (int)_sendHELOWithClientDomainName:(id)fp8;
- (BOOL)_hasParameter:(id)fp8 forKeyword:(id)fp12;
@end

@interface SMTPAccount : DeliveryAccount
{
    SMTPConnection *_connection;
    NSTimer *_timer;
    int _lastTimerSetTime;
}

+ (id)accountTypeString;
+ (id)newDefaultInstance;
- (Class)deliveryClass;
- (unsigned int)defaultPortNumber;
- (id)serviceName;
- (id)saslProfileName;
- (unsigned int)secondaryDefaultPortNumber;
- (unsigned int)tertiaryDefaultPortNumber;
- (Class)connectionClass;
- (id)preferredAuthScheme;
- (void)setPreferredAuthScheme:(id)fp8;
- (id)authenticatedConnection;
- (void)checkInConnection:(id)fp8;
- (void)setTimer;
- (void)connectionExpired:(id)fp8;
- (void)disconnect:(id)fp8;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned int)fp8;
- (void)releaseAllConnections;
- (void)setPasswordInKeychain:(id)fp8;
- (id)passwordFromKeychain;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (void)dealloc;
- (void)finalize;

@end

@interface SMTPAccount (Applescript)
- (id)objectSpecifier;
@end

@interface ActivityMonitorMultiTarget : NSObject
{
    id _primaryTarget;
    NSMutableSet *_allTargets;
}

- (void)dealloc;
- (BOOL)addActivityTarget:(id)fp8;
- (BOOL)removeActivityTarget:(id)fp8;
- (id)primaryTarget;
- (void)setPrimaryTarget:(id)fp8;
- (id)allTargets;
- (id)displayName;

@end

@interface ActivityMonitor : NSObject
{
    NSMachPort *_cancelPort;
    NSString *_taskName;
    NSString *_statusMessage;
    NSString *_descriptionString;
    double _percentDone;
    unsigned int _key:13;
    unsigned int _canCancel:1;
    unsigned int _shouldCancel:1;
    unsigned int _isActive:1;
    unsigned int _priority:8;
    unsigned int _changeCount:8;
    id _delegate;
    id _target;
    MFError *_error;
    int shouldUnifyDoneness;
    float previousDoneness;
    int currentProgressStage;
    int numberOfProgressStages;
    double _startTime;
    float _itemValue;
    float _itemMinValue;
    float _itemMaxValue;
    unsigned int _itemsDone;
    unsigned int _itemsTotal;
    BOOL _isProgressing;
    NSString *_itemDescription;
    float _doneValue;
    double _itemLastNotifiedTime;
    float _itemDone;
    unsigned int _itemFudgeFactor;
    int _activityType;
}

+ (float)determinateProgress;
+ (id)currentMonitor;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (BOOL)isActive;
- (void)setDelegate:(id)fp8;
- (void)postActivityStarting;
- (void)handlePortMessage:(id)fp8;
- (void)postActivityFinished;
- (void)_didChange;
- (int)changeCount;
- (void)setStatusMessage:(id)fp8;
- (void)setStatusMessage:(id)fp8 percentDone:(double)fp12;
- (id)statusMessage;
- (void)setPercentDone:(double)fp8;
- (double)percentDone;
- (float)unifiedFractionDone;
- (void)beginProgressFor:(int)fp8;
- (unsigned char)priority;
- (void)setPriority:(unsigned char)fp8;
- (id)activityDescription;
- (id)description;
- (id)taskName;
- (void)setTaskName:(id)fp8;
- (void)setActivityTarget:(id)fp8;
- (id)activityTarget;
- (void)addActivityTarget:(id)fp8;
- (void)removeActivityTarget:(id)fp8;
- (void)setPrimaryTarget:(id)fp8;
- (id)activityTargets;
- (BOOL)canBeCancelled;
- (void)setCanBeCancelled:(BOOL)fp8;
- (BOOL)shouldCancel;
- (void)setShouldCancel:(BOOL)fp8;
- (void)cancel;
- (int)acquireExclusiveAccessKey;
- (void)relinquishExclusiveAccessKey:(int)fp8;
- (void)setStatusMessage:(id)fp8 percentDone:(double)fp12 withKey:(int)fp20;
- (void)setStatusMessage:(id)fp8 withKey:(int)fp12;
- (void)setPercentDone:(double)fp8 withKey:(int)fp16;
- (id)error;
- (void)setError:(id)fp8;
- (void)_setCancelPort:(id)fp8;
- (id)cancelPort;
- (void)updateDoneValue;
- (void)setDoneValue:(float)fp8;
- (int)activityType;
- (void)setActivityType:(int)fp8;
- (void)setItemFudgeFactor:(unsigned int)fp8;
- (void)setIsProgressing:(BOOL)fp8;
- (void)setItemIndeterminateValue;
- (void)setItem:(id)fp8;
- (void)resetItemValue;
- (void)setItemValue:(float)fp8;
- (void)setItemsDone:(unsigned int)fp8;
- (void)setItemsTotal:(unsigned int)fp8;
- (void)incrementItemValue:(float)fp8;
- (void)incrementItemsDone:(unsigned int)fp8;
- (void)incrementItemsTotal:(unsigned int)fp8;
- (void)markCompleted:(BOOL)fp8;
- (void)resetActivityType;
- (id)itemDescription;
- (void)setItemDescription:(id)fp8;
- (unsigned int)itemsTotal;
- (unsigned int)itemsDone;
- (float)itemValue;
- (float)itemMaxValue;
- (void)setItemMaxValue:(float)fp8;
- (float)itemMinValue;
- (void)setItemMinValue:(float)fp8;
- (float)doneValue;
- (BOOL)isProgressing;

@end

@interface PlaceholderArchiveFileWrapper : ArchiveFileWrapper
{
}

- (BOOL)isPlaceholder;

@end

@interface ArchiveFileWrapper : NSFileWrapper
{
    NSData *_archiveData;
    int _archiveType;
    NSFileWrapper *_realFileWrapper;
    NSString *_quarantinePath;
}

- (void)dealloc;
- (void)finalize;
- (id)initWithData:(id)fp8 archiveType:(int)fp12;
- (BOOL)writeToFile:(id)fp8 atomically:(BOOL)fp12 updateFilenames:(BOOL)fp16;
- (id)expandQuarantined;
- (void)removeQuarantine;
- (unsigned int)approximateSize;
- (BOOL)isRegularFile;
- (BOOL)isDirectory;
- (BOOL)isSymbolicLink;
- (id)serializedRepresentation;
- (id)addFileWrapper:(id)fp8;
- (void)removeFileWrapper:(id)fp8;
- (id)fileWrappers;
- (id)keyForFileWrapper:(id)fp8;
- (id)addFileWithPath:(id)fp8;
- (id)addRegularFileWithContents:(id)fp8 preferredFilename:(id)fp12;
- (id)addSymbolicLinkWithDestination:(id)fp8 preferredFilename:(id)fp12;
- (id)preferredFilename;
- (void)getCompressedData:(id *)fp8 archiveType:(int *)fp12;

@end

@interface ASExtendedTableView : NSTableView
{
    struct {
        unsigned int delegateScrolls:1;
        unsigned int delegateProvidesDragImage:1;
        unsigned int delegateProvidesSourceDraggingMask:1;
        unsigned int delegateDoesCommandBySelector:1;
        unsigned int delegateDragWillEnd:1;
        unsigned int delegateDragWillEndOperation:1;
        unsigned int delegateDraggedImageMovedTo:1;
        unsigned int delegateProvidesBackgroundColor:1;
        unsigned int delegateProvidesBackgroundShadedRegions:1;
        unsigned int alwaysKeepColumnsSizedToFitAvailableSpace:1;
        unsigned int delegateProvidesColumnsToPinInPlace:1;
        unsigned int delegateProvidesHighlightStyle:1;
        unsigned int delegateProvidesHighlightColor:1;
        unsigned int delegateRespondsToWillDrawRowsInRange:1;
        unsigned int delegateRespondsToDidDrawRowsInRange:1;
        unsigned int delegateApprovesScrolling:1;
        unsigned int delegateRespondsToGotEvent:1;
        unsigned int delegateRespondsToShouldBeginDrag:1;
        unsigned int delegateRespondsToWillResizeColumnsToFit:1;
        unsigned int delegateRespondsToDidResizeColumnsToFit:1;
        unsigned int delegateRespondsToWillMoveToWindow:1;
        unsigned int delegateRespondsToDidMoveToWindow:1;
        unsigned int delegateRespondsToDidEndLiveResize:1;
    } _extendedTableViewFlags;
    BOOL _didLazyLoadMenu;
}

- (void)awakeFromNib;
- (void)finalize;
- (BOOL)_wantsLiveResizeToUseCachedImage;
- (void)viewDidEndLiveResize;
- (void)keyDown:(id)fp8;
- (void)setDelegate:(id)fp8;
- (id)menu;
- (struct _NSRange)completelyVisibleRowsCapacity:(int *)fp8;
- (void)stopObservingViewBoundsChange:(id)fp8;
- (void)startObservingViewBoundsChange:(id)fp8;
- (void)viewWillMoveToSuperview:(id)fp8;
- (void)asetvSuperviewBoundsChanged:(id)fp8;
- (void)showTableColumnsFromArray:(id)fp8 allColumns:(id)fp12;
- (id)getPersistentTableColumnsAsArray;
- (void)scrollRowToVisible:(int)fp8;
- (void)setTableColumn:(id)fp8 toVisible:(BOOL)fp12 atPosition:(int)fp16;
- (void)moveColumn:(int)fp8 toColumn:(int)fp12;
- (void)setAlwaysKeepColumnsSizedToFitAvailableSpace:(BOOL)fp8;
- (BOOL)alwaysKeepColumnsSizedToFitAvailableSpace;
- (float)totalWidthOfAllColumns;
- (int)numberOfColumnsToPinToLefthandSide;
- (int)_columnClosestToColumn:(int)fp8 whenMoved:(float)fp12;
- (void)betterSizeToFit;
- (void)sizeToFit;
- (void)_sizeToFitIfNecessary;
- (id)dragImageForRowsWithIndexes:(id)fp8 tableColumns:(id)fp12 event:(id)fp16 offset:(struct _NSPoint *)fp20;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (void)draggedImage:(id)fp8 movedTo:(struct _NSPoint)fp12;
- (void)_userSelectRow:(int)fp8 byExtendingSelection:(BOOL)fp12;
- (BOOL)shouldUseSecondaryHighlightColor;
- (id)_highlightColorForCell:(id)fp8;
- (void)_highlightRect:(struct _NSRect)fp8 withColor:(id)fp24 usingStyle:(int)fp28;
- (void)_colorizeRow:(int)fp8 inRect:(struct _NSRect)fp12 clipRect:(struct _NSRect)fp28;
- (void)drawBackgroundInClipRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawRow:(int)fp8 clipRect:(struct _NSRect)fp12;
- (struct _NSRect)cellFrameForPaddedRect:(struct _NSRect)fp8;
- (struct _NSRect)paddedRectForCellFrame:(struct _NSRect)fp8;
- (struct _NSRect)frameOfCellAtColumn:(int)fp8 row:(int)fp12;
- (int)_distanceInDragDirectionBeforeDragAttempt;
- (int)_distanceInNonDragDirectionBeforeAbortingDragAttempt;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)_postEventNotification:(id)fp8 fromCell:(id)fp12;
- (BOOL)_dragShouldBeginFromMouseDown:(id)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;

@end

@interface ASExtendedTableHeaderView : NSTableHeaderView
{
    BOOL _didLazyLoadMenu;
}

- (void)_reorderColumn:(int)fp8 withEvent:(id)fp12;
- (id)menu;

@end

@interface NSTableView (ASExtendedTableViewContextualMenuSupport)
- (id)menuForEvent:(id)fp8;
@end

@interface MutableByteSet : ByteSet
{
}

- (void)addBytesInRange:(struct _NSRange)fp8;
- (void)removeBytesInRange:(struct _NSRange)fp8;
- (void)invert;

@end

@interface ByteSet : NSObject <NSCopying, NSMutableCopying>
{
    char mySet[32];
}

+ (id)asciiWhitespaceSet;
+ (id)ASCIIByteSet;
+ (id)nonASCIIByteSet;
+ (id)suspiciousCodepage1252ByteSet;
- (BOOL)byteIsMember:(BOOL)fp8;
- (id)invertedSet;
- (id)initWithRange:(struct _NSRange)fp8;
- (id)initWithCString:(const char *)fp8;
- (id)initWithBytes:(const void *)fp8 length:(unsigned int)fp12;
- (id)_initWithSet:(const char *)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;

@end

@interface DataScanner : NSObject
{
    NSData *myData;
    unsigned int myLocation;
}

+ (id)scannerWithData:(id)fp8;
- (void)setData:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)data;
- (unsigned int)scanLocation;
- (void)setScanLocation:(unsigned int)fp8;
- (BOOL)scanByte:(char *)fp8;
- (BOOL)scanInt:(int *)fp8;
- (BOOL)scanData:(id)fp8 intoData:(id *)fp12;
- (BOOL)scanCString:(const char *)fp8 intoData:(id *)fp12;
- (BOOL)scanBytesFromSet:(id)fp8 intoData:(id *)fp12;
- (void)incrementLocation;
- (BOOL)scanUpToData:(id)fp8 intoData:(id *)fp12;
- (BOOL)scanUpToCString:(const char *)fp8 intoData:(id *)fp12;
- (BOOL)scanUpToBytesFromSet:(id)fp8 intoData:(id *)fp12;
- (BOOL)isAtEnd;
- (BOOL)byteAtScanLocation;
- (id)nextTokenWithPunctuation:(id)fp8;
- (id)initWithData:(id)fp8;

@end

@interface Defaults : NSObject
{
}

+ (void)initialize;
+ (void)_userDefaultsChanged:(id)fp8;
+ (id)sharedInstance;
+ (void)setupLoggingDefaults;
+ (id)logMessages;
+ (id)macBuddyPlist;
+ (id)mailSetupFromMacBuddy;
+ (id)mailSetupFromMCX;
+ (BOOL)mcxPrefIsForced:(id)fp8;
+ (void)setMCXPrefValue:(id)fp8 forKey:(id)fp12;
+ (id)localeCache;
+ (void)resetLocaleCache;
+ (double)backgroundThreadPriority;
- (id)primaryEmailAddress;
- (void)setPrimaryEmailAddress:(id)fp8;
- (int)headerDetailLevel;
- (void)setHeaderDetailLevel:(int)fp8;
- (id)_regexesForCustomDisplayedHeaders;
- (id)headersToDisplayFromHeaderKeys:(id)fp8 headerDetailLevel:(int)fp12;
- (id)customDisplayedHeaders;
- (void)setCustomDisplayedHeaders:(id)fp8;
- (int)sendFormat;
- (void)setSendFormat:(int)fp8;
- (id)mailAccountDirectory;
- (id)supportDirectory;
- (void)setDefaultMailDirectory:(id)fp8;
- (id)defaultMailDirectory;
- (void)setDefaultRSSDirectory:(id)fp8;
- (id)defaultRSSDirectory;
- (id)archiveMailbox;
- (id)draftsMailbox;
- (id)notesMailbox;
- (id)trashMailboxName;
- (id)todosMailbox;
- (id)quotingColorList;
- (void)setQuotingColorList:(id)fp8;
- (id)colorForQuoteLevel:(int)fp8;
- (id)userStyleSheetURL;
- (id)alternateAddressesForSelf;
- (id)dictionaryForKey:(id)fp8;
- (id)stringForKey:(id)fp8;
- (void)removeObjectForKey:(id)fp8;
- (void)setObject:(id)fp8 forKey:(id)fp12;
- (id)objectForKey:(id)fp8;
- (void)setBool:(BOOL)fp8 forKey:(id)fp12;
- (BOOL)boolForKey:(id)fp8;
- (int)integerForKey:(id)fp8;
- (BOOL)synchronize;

@end

@interface NSUserDefaults (MessageAdditions)
- (id)downloadDirectoryPath;
- (void)setDownloadDirectoryPath:(id)fp8;
- (id)autoDownloadDirectoryPath;
- (BOOL)junkMailTransitionHasBeenShown;
- (void)setJunkMailTransitionHasBeenShown:(BOOL)fp8;
- (int)junkMailDaysTillOfferingTransition;
- (void)setJunkMailDaysTillOfferingTransition:(int)fp8;
- (BOOL)junkMailTrustHeaders;
- (void)setJunkMailTrustHeaders:(BOOL)fp8;
- (int)junkMailBehavior;
- (void)setJunkMailBehavior:(int)fp8;
- (BOOL)junkMailEvaluationAfterRules;
- (void)setJunkMailEvaluationAfterRules:(BOOL)fp8;
- (double)autoSaveDelay;
- (double)autoSaveStoreDelay;
- (BOOL)autosaveWindows;
- (void)setAutosaveWindows:(BOOL)fp8;
- (id)defaultNoteToDoAccount;
- (void)setDefaultNoteToDoAccount:(id)fp8;
- (id)defaultNoteAccount;
- (id)defaultToDoAccount;
- (BOOL)iPhoneHasBeenSynced;
- (BOOL)allowArrowKeyMainWindowFocusChange;
- (id)notePaperColor;
- (id)userNotePaperColor;
- (id)defaultNotePaperColor;
@end

@interface NSArray (NSEmailAddressArray)
- (id)uncommentedAddressList;
- (id)addressString;
- (id)addressStringWithMaxNumberOfAddresses:(unsigned int)fp8;
@end

@interface NSString (EmailAddressString)
+ (id)nameExtensions;
+ (id)nameExtensionsThatDoNotNeedCommas;
+ (id)partialSurnames;
+ (id)formattedAddressWithName:(id)fp8 email:(id)fp12 useQuotes:(BOOL)fp16;
- (id)uncommentedAddress;
- (id)uncommentedAddressRespectingGroups;
- (BOOL)isEmptyGroup;
- (id)addressComment;
- (void)firstName:(id *)fp8 middleName:(id *)fp12 lastName:(id *)fp16 extension:(id *)fp20;
- (BOOL)appearsToBeAnInitial;
- (id)addressList;
- (id)trimCommasSpacesQuotes;
- (id)componentsSeparatedByCommaRespectingQuotesAndParens;
- (id)componentsSeparatedByCharactersRespectingQuotesAndParens:(id)fp8;
- (id)searchStringComponents;
- (BOOL)isLegalEmailAddress;
- (id)addressDomain;
@end

@interface ExpandingSplitView : NSSplitView
{
    float _oldSplitPosition;
    int dividerToolTipTag;
    NSString *toolTipString;
    NSImage *splitterDimple;
    NSImage *splitterBackground;
    float _dividerThickness;
    int _dividerType;
}

- (void)dealloc;
- (void)finalize;
- (int)dividerType;
- (void)setDividerType:(int)fp8;
- (void)mouseDown:(id)fp8;
- (float)getSplitPercentage;
- (BOOL)_isSubviewAtIndexVisible:(unsigned int)fp8;
- (BOOL)isSecondViewVisible;
- (BOOL)isFirstViewVisible;
- (void)resizeSubviewsToPercentage:(float)fp8;
- (void)setDividerToolTip:(id)fp8;
- (float)dividerThickness;
- (struct _NSRect)dividerRect;
- (void)drawDividerInRect:(struct _NSRect)fp8;
- (id)accessibilityAttributeValue:(id)fp8;

@end

@interface SafeObserver : NSObject
{
    unsigned int _retainCount;
    BOOL _inDealloc;
}

+ (void)initialize;
+ (void)lockSafeObservers;
+ (void)unlockSafeObservers;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (id)willDealloc;
- (void)release;
- (unsigned int)retainCount;

@end

@interface NSURL (Goodies)
- (id)completePath;
@end

@interface NSMutableDictionary (Goodies)
- (void)setBool:(BOOL)fp8 forKey:(id)fp12;
- (void)setInteger:(int)fp8 forKey:(id)fp12;
- (void)setFloat:(float)fp8 forKey:(id)fp12;
- (void)setSize:(struct _NSSize)fp8 forKey:(id)fp16;
- (void)setObject:(id)fp8 forIntegerKey:(int)fp12;
- (void)removeObjectForIntegerKey:(int)fp8;
- (void)addObject:(id)fp8 forKey:(id)fp12;
@end

@interface NSKeyedUnarchiver (Goodies)
+ (id)safeUnarchiveObjectWithData:(id)fp8;
@end

@interface NSDictionary (Goodies)
- (BOOL)boolForKey:(id)fp8;
- (int)integerForKey:(id)fp8;
- (float)floatForKey:(id)fp8;
- (struct _NSSize)sizeForKey:(id)fp8;
- (id)objectForIntegerKey:(int)fp8;
@end

@interface NSDate (Goodies)
+ (id)createDateInCommonFormatsWithString:(id)fp8;
+ (id)lenientDateInCommonFormatsWithString:(id)fp8;
- (id)descriptionInBSDMailboxFormat;
- (id)replyPrefixForSender:(id)fp8 withSpacer:(BOOL)fp12;
@end

@interface NSFileWrapper (HFSDataConversion)
- (id)appleSingleDataWithFilename:(const char *)fp8 length:(unsigned int)fp12;
- (id)appleDoubleDataWithFilename:(const char *)fp8 length:(unsigned int)fp12;
@end

@interface NSData (HFSDataConversion)
- (id)wrapperForAppleFileDataWithFileEncodingHint:(unsigned long)fp8;
- (id)wrapperForBinHex40DataWithFileEncodingHint:(unsigned long)fp8;
@end

@interface MonitoredInvocationQueue : InvocationQueue
{
    int _activityType;
    NSString *_activityName;
    id <MonitoredInvocationQueueDelegate> _delegate;
}

- (id)init;
- (void)dealloc;
- (void)_drainQueue;
- (void)addInvocation:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (id)activityName;
- (void)setActivityName:(id)fp8;
- (int)activityType;
- (void)setActivityType:(int)fp8;

@end

@interface InvocationQueue : NSObject
{
    NSMutableArray *_items;
    unsigned int _maxThreads:16;
    unsigned int _numThreads:16;
    BOOL _periodicallyFlushQueuedEvents;
    double _threadRecycleTimeout;
    NSConditionLock *_threadRecycleLock;
}

+ (void)initialize;
+ (void)cancelAllMonitoredItems;
- (id)init;
- (void)setMaxThreadCount:(unsigned int)fp8;
- (unsigned int)maxThreadCount;
- (void)dealloc;
- (void)finalize;
- (void)removeAllItems;
- (void)stop;
- (void)_drainQueue;
- (void)addInvocation:(id)fp8;
- (unsigned int)invocationCount;
- (void)setThreadRecycleTimeout:(double)fp8;
- (double)threadRecycleTimeout;
- (BOOL)periodicallyFlushQueuedEvents;
- (void)setPeriodicallyFlushQueuedEvents:(BOOL)fp8;

@end

@interface DOMDocument (JunkAdditions)
- (id)junkStringNonWhiteSpaceCount:(int *)fp8 URLs:(id)fp12 imageURLs:(id)fp16;
@end

@interface MainThread : NSObject
{
}

+ (id)mainThread;
+ (BOOL)runningOnMainThread;

@end

@interface NSThread (MainThreadAdditions)
- (void)performOneway:(BOOL)fp8 result:(void *)fp12 withTarget:(id)fp16 selector:(SEL)fp20;
@end

@interface NSNotificationCenter (MainThreadPosting)
- (void)postNotificationInMainThread:(id)fp8;
@end

@interface NSObject (MainThreadMessaging)
- (void)performSelectorInMainThread:(SEL)fp8;
- (void)performSelectorInMainThread:(SEL)fp8 withObject:(id)fp12;
- (void)performSelectorInMainThread:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (void)performOnewaySelectorInMainThread:(SEL)fp8;
- (void)performOnewaySelectorInMainThread:(SEL)fp8 withObject:(id)fp12;
- (void)performOnewaySelectorInMainThread:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
@end

@interface MFError : NSError
{
    NSMutableDictionary *_moreUserInfo;
}

+ (id)errorWithDomain:(id)fp8 code:(long)fp12 localizedDescription:(id)fp16;
+ (id)errorWithDomain:(id)fp8 code:(long)fp12 localizedDescription:(id)fp16 title:(id)fp20 helpTag:(id)fp24 userInfo:(id)fp28;
+ (id)errorWithException:(id)fp8;
- (void)setUserInfoObject:(id)fp8 forKey:(id)fp12;
- (id)userInfo;
- (id)localizedDescription;
- (id)moreInfo;
- (id)helpAnchor;
- (id)shortDescription;
- (void)setLocalizedDescription:(id)fp8;
- (void)setMoreInfo:(id)fp8;
- (void)setHelpTag:(id)fp8;
- (void)setShortDescription:(id)fp8;
- (void)useGenericDescription:(id)fp8;
- (BOOL)alertShowHelp:(id)fp8;
- (void)dealloc;
- (void)finalize;

@end

@interface NSError (MessageAdditions)
- (BOOL)isUserCancelledError;
- (BOOL)shouldBeReportedToUser;
- (id)moreInfo;
- (id)helpAnchor;
- (id)shortDescription;
@end

@interface MonitoredInvocation : NSInvocation
{
    ActivityMonitor *_monitor;
}

+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 taskName:(id)fp16 priority:(unsigned char)fp20 canBeCancelled:(BOOL)fp24;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object:(id)fp16 taskName:(id)fp20 priority:(unsigned char)fp24 canBeCancelled:(BOOL)fp28;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20 taskName:(id)fp24 priority:(unsigned char)fp28 canBeCancelled:(BOOL)fp32;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20 object3:(id)fp24 taskName:(id)fp28 priority:(unsigned char)fp32 canBeCancelled:(BOOL)fp36;
- (void)dealloc;
- (void)finalize;
- (id)monitor;
- (void)setMonitor:(id)fp8;
- (void)invoke;

@end

@interface NSInvocation (MailExtensions)
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object:(id)fp16;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20 object3:(id)fp24;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20 object3:(id)fp24 object4:(id)fp28;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20 object3:(id)fp24 object4:(id)fp28 object5:(id)fp32;
+ (id)invocationWithSelector:(SEL)fp8 target:(id)fp12 object1:(id)fp16 object2:(id)fp20 object3:(id)fp24 object4:(id)fp28 object5:(id)fp32 object6:(id)fp36;
- (void)invokeWithObject:(id)fp8;
@end

@interface NetworkController : NSObject
{
    struct __SCDynamicStore *_store;
    NSString *_domainName;
    unsigned int _waitingForDialToFinish:1;
    unsigned int _checkedNetwork:1;
    unsigned int _isNetworkUp:1;
    NSTimer *_notificationTimer;
    NSMutableSet *_watchedHosts;
}

+ (id)sharedInstance;
+ (id)subnetForIPAddress:(id)fp8;
+ (id)baseDomainsForDomains:(id)fp8;
+ (id)applyIDNAToHostname:(id)fp8 encode:(BOOL)fp12;
+ (id)encodeAddressForIDNA:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (BOOL)isNetworkUp;
- (id)domainName;
- (id)domainNames;
- (id)IPAddresses;
- (id)primaryEthernetAddressAsString;
- (BOOL)isHostReachable:(id)fp8;
- (void)startWatchingReachabilityOfHost:(id)fp8;

@end

@interface NetworkController (Private)
- (void)_postNotification:(id)fp8;
- (void)_postNetworkChangeNotification:(id)fp8;
- (void)_triggerDialForHostname:(id)fp8;
- (void)_registerForNotificationKeys:(id)fp8 patterns:(id)fp12;
@end

@interface NSArray (AppleScriptConveniences)
- (id)arrayByEvaluatingObjectSpecifiers;
@end

@interface NSAppleEventDescriptor (MessageRuleAdditions)
- (BOOL)isSendToSelfEvent;
@end

@interface NSAppleScript (MessageRuleAdditions)
+ (id)_createScriptAtPath:(id)fp8 errorInfo:(id *)fp12;
+ (BOOL)executeHandlerWithName:(id)fp8 inScriptAtPath:(id)fp12 withArguments:(id)fp16 error:(id *)fp20;
+ (BOOL)executeHandlerWithEventClass:(unsigned long)fp8 eventID:(unsigned long)fp12 inScriptAtPath:(id)fp16 withArguments:(id)fp20 error:(id *)fp24;
+ (id)appleScriptLock;
- (id)executeHandlerWithName:(id)fp8 andArguments:(id)fp12 error:(id *)fp16;
- (id)executeHandlerWithEventClass:(unsigned long)fp8 eventID:(unsigned long)fp12 andArguments:(id)fp16 error:(id *)fp20;
@end

@interface NSArray (DeepCopying)
- (id)twiceMutableCopy;
@end

@interface NSArray (DateComparisonForRecents)
- (int)indexOfOldestDate;
- (int)indexOfThirdDate;
- (id)thirdDate;
@end

@interface NSArray (MessagesFromMixedStoresConvenience)
- (id)dictionaryWithToDosSortedByStore;
- (id)dictionaryWithMessagesSortedByStore;
- (id)dictionaryWithMessagesSortedByMailbox;
@end

@interface NSMutableArray (LockedAdditions)
- (void)addObjectsFromArrayUsingLock:(id)fp8;
@end

@interface NSMutableArray (SortedArrayExtensions)
- (unsigned int)insertObject:(id)fp8 usingSortFunction:(void *)fp12 context:(void *)fp16;
- (unsigned int)indexOfObject:(id)fp8 usingSortFunction:(void *)fp12 context:(void *)fp16;
- (unsigned int)indexOfSimilarObject:(id)fp8 usingSortFunction:(void *)fp12 context:(void *)fp16;
@end

@interface NSMutableArray (Convenience)
- (unsigned int)highestIndexOfObject:(id)fp8 inRange:(struct _NSRange)fp12;
- (BOOL)insertObjectIfAbsent:(id)fp8 usingSortFunction:(void *)fp12 context:(void *)fp16;
- (void)addAbsentObjectsFromArray:(id)fp8;
- (BOOL)addObjectIfAbsent:(id)fp8;
- (BOOL)addObjectIfAbsentAccordingToEquals:(id)fp8;
- (void)addObjectsFromSet:(id)fp8;
- (void)removeObjectsFromSet:(id)fp8;
@end

@interface NSArray (DerivedArray)
- (id)arrayByAddingAbsentObjectsFromArray:(id)fp8 accordingToEquals:(BOOL)fp12;
- (id)indicesOfStringsWithPrefix:(id)fp8;
@end

@interface NSArray (removeSelf)
- (id)componentsJoinedByData:(id)fp8;
- (id)attributedComponentsJoinedByString:(id)fp8;
@end

@interface NSMutableAttributedString (MessageFrameworkAdditions)
- (void)removeTabs;
- (void)replaceCustomAttachmentAttributesWithAttachments:(id)fp8 confirmWithView:(id)fp12;
- (void)_removeAttachmentsAndReplaceWithCustomAttribute:(BOOL)fp8;
- (void)removeAllAttachmentsAndReplaceWithCustomAttachmentAttribute;
- (void)removeAllAttachments;
- (void)removeAllFormattingExceptAttachments;
- (void)removeQuotingDisplayAttributesInRange:(struct _NSRange)fp8;
- (void)fixQuotingDisplayAttributesInRange:(struct _NSRange)fp8;
- (void)changeQuoteLevelInRange:(struct _NSRange)fp8 by:(int)fp16 undoManager:(id)fp20;
@end

@interface NSAttributedString (FontAdditions)
+ (void)resetHeaderAttributes;
+ (id)boldHeaderAttributes;
+ (id)boldGrayHeaderAttributes;
+ (id)bigBoldWhiteHeaderAttributes;
+ (id)mediumWhiteHeaderAttributes;
+ (id)blueHeaderAttributes;
+ (id)headerAttributes;
+ (id)fixedPitchAttributes;
+ (float)headerFontSize;
@end

@interface NSAttributedString (MessagePasteboardSupport)
+ (id)attributedStringFromMessageData:(id)fp8;
- (id)messageDataForRange:(struct _NSRange)fp8;
@end

@interface NSAttributedString (AddressingSupport)
- (id)addressAtIndex:(int)fp8;
- (id)addressListForRange:(struct _NSRange)fp8;
@end

@interface NSAttributedString (find_attribute)
- (id)nextAttribute:(id)fp8 fromLocation:(unsigned int)fp12 effectiveRange:(struct _NSRange *)fp16;
@end

@interface NSAttributedString (plain_or_rich)
- (id)attachments;
- (id)attachmentsInRange:(struct _NSRange)fp8;
- (id)mimeTextAttachments;
- (struct _NSRange)rangeOfAttachment:(id)fp8;
- (BOOL)containsAttachments;
- (BOOL)containsAttachmentsThatCouldConfuseWindowsClients;
- (BOOL)containsRichTextInRange:(struct _NSRange)fp8;
- (BOOL)containsRichText;
- (BOOL)containsOnlyAttachments;
@end

@interface MimeTextAttachment (IndexingSupport)
- (id)stringForIndexing;
@end

@interface NSTextAttachment (IndexingSupport)
- (id)stringForIndexing;
@end

@interface NSDictionary (NSBundleExtras)
- (id)shortVersionFromInfoDictionary;
@end

@interface NSBundle (MessageFrameworkAdditions)
+ (BOOL)localization:(id)fp8 isPreferredOverLocalization:(id)fp12;
+ (id)syncBundle;
- (BOOL)loadNibNamed:(id)fp8 owner:(id)fp12;
- (id)localizedShortVersion;
- (void)createLocalization:(id)fp8;
@end

@interface NSCharacterSet (NSCharacterSetUtils)
+ (id)goodFileCharacterSet;
+ (id)unsafeDomainNameCharacterSet;
+ (id)replacementCharacterSet;
@end

@interface NSColor (NSColorUtilities)
+ (id)allQuotingColors;
+ (id)defaultQuotingColors;
+ (id)allHighlightColors;
+ (int)highlightColorValueForColor:(id)fp8;
+ (id)colorForHighlightColorValue:(int)fp8;
+ (id)colorPlist;
+ (int)intWithIdentifierColor:(id)fp8;
+ (id)identifierForColor:(id)fp8;
+ (id)colorForIdentifier:(id)fp8;
+ (id)colorForEnrichedValue:(id)fp8;
+ (void)_configureColorMenuForBoneHeadClients:(id)fp8;
+ (void)configureColorMenu:(id)fp8;
+ (id)createSwatchForColor:(id)fp8;
+ (id)colorWithIntValue:(int)fp8;
+ (id)colorWithHexString:(id)fp8;
+ (void)setThreadBackgroundColor:(id)fp8;
+ (id)lighterThreadBackgroundColor;
+ (void)clearThreadBackgroundColors;
+ (id)threadBackgroundColor;
+ (id)junkMailColor;
+ (id)linkColor;
+ (id)visitedLinkColor;
+ (id)activeLinkColor;
+ (id)splitterColor;
+ (id)subjectAdditionColor;
+ (id)aquaBlueColor;
+ (id)activeAlternateBackgroundColor;
+ (id)inactiveAlternateBackgroundColor;
- (int)intValue;
- (id)hexString;
@end

@interface NSMutableData (NSDataUtils)
- (void)appendCString:(const char *)fp8;
- (void)appendByte:(BOOL)fp8;
- (void)convertNetworkLineEndingsToUnix;
@end

@interface NSData (NSDataUtils)
- (id)unquotedFromSpaceDataWithRange:(struct _NSRange)fp8;
- (id)quotedFromSpaceDataForMessage;
- (struct _NSRange)rangeOfRFC822HeaderData;
- (id)subdataToIndex:(unsigned int)fp8;
- (id)subdataFromIndex:(unsigned int)fp8;
- (struct _NSRange)rangeOfData:(id)fp8;
- (struct _NSRange)rangeOfData:(id)fp8 options:(unsigned int)fp12;
- (struct _NSRange)rangeOfData:(id)fp8 options:(unsigned int)fp12 range:(struct _NSRange)fp16;
- (struct _NSRange)rangeOfByteFromSet:(id)fp8;
- (struct _NSRange)rangeOfByteFromSet:(id)fp8 options:(unsigned int)fp12;
- (struct _NSRange)rangeOfByteFromSet:(id)fp8 options:(unsigned int)fp12 range:(struct _NSRange)fp16;
- (struct _NSRange)rangeOfCString:(const char *)fp8;
- (struct _NSRange)rangeOfCString:(const char *)fp8 options:(unsigned int)fp12;
- (struct _NSRange)rangeOfCString:(const char *)fp8 options:(unsigned int)fp12 range:(struct _NSRange)fp16;
- (id)componentsSeparatedByData:(id)fp8;
- (id)dataByConvertingUnixNewlinesToNetwork;
- (id)MD5Digest;
@end

@interface NSEvent (MessageFrameworkAdditions)
+ (BOOL)isShiftKeyDown;
+ (BOOL)isOptionKeyDown;
@end

@interface NSFileHandle (MessageAdditions)
+ (id)createFileAtPath:(id)fp8 flags:(int)fp12 mode:(int)fp16;
+ (id)fileHandleForUniqueFile:(id *)fp8 atPath:(id)fp12 mode:(int)fp16 extension:(id)fp20;
+ (id)fileHandleForUniqueFile:(id *)fp8 atPath:(id)fp12 mode:(int)fp16;
+ (id)fileHandleForTempFile:(id *)fp8 atPath:(id)fp12 mode:(int)fp16;
- (BOOL)writeLossyString:(id)fp8;
- (BOOL)writeBytes:(const char *)fp8 length:(int)fp12;
@end

@interface NSFileManager (NSFileManagerAdditions)
- (id)makeUniqueDirectoryWithPath:(id)fp8;
- (BOOL)makeCompletePath:(id)fp8 mode:(int)fp12;
- (BOOL)canWriteToDirectoryAtPath:(id)fp8;
- (BOOL)canWriteToFileAtPath:(id)fp8;
- (void)deleteFilesInArray:(id)fp8 fromDirectory:(id)fp12;
- (long long)fileSizeAtPath:(id)fp8 traverseLink:(BOOL)fp12;
- (id)fileModificationDateAtPath:(id)fp8 traverseLink:(BOOL)fp12;
- (id)rawDirectoryContentsAtPath:(id)fp8;
- (id)pathsAtDirectory:(id)fp8 beginningWithString:(id)fp12;
- (void)deleteFilesInSortedArray:(id)fp8 matchingPrefix:(id)fp12 fromDirectory:(id)fp16;
- (id)volumeMountPointForPath:(id)fp8;
- (BOOL)betterRemoveFileAtPath:(id)fp8 handler:(id)fp12;
@end

@interface RemotePlaceholderFileWrapper : PlaceholderFileWrapper
{
    NSURL *_url;
}

- (void)dealloc;
- (id)remoteAccessMimeType;
- (id)initWithURL:(id)fp8;
- (BOOL)isRemotelyAccessed;
- (id)symbolicLinkDestination;
- (id)URL;
- (unsigned int)approximateSize;

@end

@interface PlaceholderFileWrapper : NSFileWrapper
{
}

- (BOOL)isPlaceholder;
- (BOOL)isRemotelyAccessed;

@end

@interface HFSFileWrapper : NSFileWrapper
{
}

- (BOOL)createEmptyAttachmentAtPath:(id)fp8;
- (BOOL)_emptyAttachmentExists;
- (id)emptyAttachmentPath;
- (void)removeEmptyAttachment;
- (void)setSavedPath:(id)fp8;
- (id)savedPath;
- (BOOL)writeToFile:(id)fp8 atomically:(BOOL)fp12 updateFilenames:(BOOL)fp16;
- (id)iconCreateIfNecessary:(BOOL)fp8;
- (id)initWithPath:(id)fp8;
- (void)setPreferredFilename:(id)fp8;
- (void)setIcon:(id)fp8;
- (id)icon;
- (BOOL)isPlaceholder;
- (BOOL)_updateFromPath:(id)fp8 checkOnly:(BOOL)fp12 exists:(char *)fp16;

@end

@interface NSFileWrapper (ArchivedData)
- (id)archivedDataWithPartNumber:(id)fp8;
@end

@interface NSFileWrapper (UniquePaths)
+ (id)uniquedPathForFile:(id)fp8 inDirectory:(id)fp12;
@end

@interface NSFileWrapper (PersistenceWithoutLosingMetadata)
- (id)dictionaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)fp8;
@end

@interface NSFileWrapper (HFSExtensions)
+ (id)allocWithZone:(struct _NSZone *)fp8;
- (void)setResourceForkData:(id)fp8;
- (id)resourceForkData;
- (void)setType:(unsigned long)fp8;
- (unsigned long)type;
- (void)setCreator:(unsigned long)fp8;
- (unsigned long)creator;
- (void)setFinderFlags:(unsigned short)fp8;
- (unsigned short)finderFlags;
- (void)setShouldHideExtension:(BOOL)fp8;
- (BOOL)shouldHideExtension;
- (void)setMimeType:(id)fp8;
- (id)mimeType;
- (id)bestMimeType;
- (void)setContentID:(id)fp8;
- (id)contentID;
- (void)setQuarantineProperties:(id)fp8;
- (id)quarantineProperties;
- (void)addGatekeeperQuarantineToPath:(id)fp8;
- (void)setWhereFroms:(id)fp8;
- (id)whereFroms;
- (void)setMessageID:(id)fp8;
- (id)messageID;
- (BOOL)couldConfuseWindowsClients;
- (void)setShouldBeViewedInline:(BOOL)fp8;
- (BOOL)shouldBeViewedInline;
- (void)setMailSpecialHandlingType:(id)fp8;
- (id)mailSpecialHandlingType;
- (BOOL)isImageFile;
- (void)isImageFile:(char *)fp8 isPDF:(char *)fp12;
- (void)_isImageFile:(char *)fp8 isPDF:(char *)fp12 bestMimeType:(id *)fp16;
- (void)setImageSize:(struct _NSSize)fp8 imageBytes:(unsigned int)fp16;
- (struct _NSSize)imageSize;
- (unsigned int)imageBytes;
- (id)preferredFilenameWithoutHiddenExtension;
- (BOOL)isPlaceholder;
- (BOOL)isRemotelyAccessed;
- (id)remoteAccessMimeType;
- (id)iconCreateIfNecessary:(BOOL)fp8;
- (id)tmpFullPath;
- (BOOL)isALargeAttachment;
- (unsigned int)approximateSize;
- (id)pathToAttachment;
- (id)stringForIndexing;
@end

@interface NSImage (ASBetterImageLookup)
+ (id)betterImageNamed:(id)fp8;
+ (id)appIconIncludingUserCustomization;
+ (id)appIconWithUnreadBadge:(int)fp8 baseImageName:(id)fp12;
+ (id)createScaledImageFromImage:(id)fp8 desiredSize:(struct _NSSize)fp12;
+ (id)imagePasteboardTypesWithPreferenceToPNG;
+ (id)imageDataForType:(id *)fp8 fromPasteboard:(id)fp12;
- (id)opaqueImage;
- (id)bitmapImageRep;
- (id)PNGData;
- (unsigned int)frameCount;
- (BOOL)isAnimated;
- (void)drawTransformedInRect:(struct _NSRect)fp8 fromRect:(struct _NSRect)fp24 operation:(unsigned int)fp40 fraction:(float)fp44 flip:(BOOL)fp48;
@end

@interface MessageKeychainManager : NSObject
{
}

+ (void)initialize;
+ (unsigned long)_protocolForAccountType:(id)fp8;
+ (long)_setPassword:(id)fp8 forKeychainItem:(struct OpaqueSecKeychainItemRef *)fp12;
+ (id)_passwordForHost:(id)fp8 username:(id)fp12 port:(int)fp16 protocol:(unsigned long)fp20 itemRef:(struct OpaqueSecKeychainItemRef **)fp24;
+ (id)passwordForHost:(id)fp8 username:(id)fp12 port:(int)fp16 protocol:(id)fp20;
+ (void)setPassword:(id)fp8 forHost:(id)fp12 username:(id)fp16 port:(int)fp20 protocol:(id)fp24;
+ (void)removePasswordForHost:(id)fp8 username:(id)fp12 port:(int)fp16 protocol:(id)fp20;
+ (id)_passwordForGenericAccount:(id)fp8 service:(id)fp12 itemRef:(struct OpaqueSecKeychainItemRef **)fp16;
+ (id)passwordForServiceName:(id)fp8 accountName:(id)fp12;
+ (void)setPassword:(id)fp8 forServiceName:(id)fp12 accountName:(id)fp16;
+ (void)removePasswordForServiceName:(id)fp8 accountName:(id)fp12;
+ (void)setSessionTrustedCertificates:(id)fp8 forHost:(id)fp12;
+ (id)sessionTrustedCertificatesForHost:(id)fp8;
+ (struct OpaqueSecCertificateRef *)copyTrustedSigningCertificateForAddress:(id)fp8;
+ (struct OpaqueSecCertificateRef *)copyTrustedEncryptionCertificateForAddress:(id)fp8;
+ (BOOL)canSignMessagesFromAddress:(id)fp8;
+ (BOOL)canEncryptMessagesToAddress:(id)fp8;
+ (BOOL)canEncryptMessagesToAddresses:(id)fp8 sender:(id)fp12;
+ (struct OpaqueSecPolicyRef *)copySSLPolicyForHost:(id)fp8 isClientCertificate:(BOOL)fp12;
+ (struct OpaqueSecPolicyRef *)copySMIMEPolicyForAddress:(id)fp8 usage:(unsigned short)fp12;

@end

@interface NSLock (MessageAdditions)
- (void)waitForLock;
@end

@interface NSObject (LockingAdditions)
+ (void)clearLocks;
- (void)lock;
- (BOOL)tryLock;
- (void)lockWithPriority;
- (BOOL)tryLockWithPriority;
- (void)unlock;
- (void)yieldLock;
- (BOOL)isLocked;
@end

@interface NSScanner (NSScannerUtils)
- (BOOL)scanStringOfLength:(unsigned int)fp8 intoString:(id *)fp12;
- (BOOL)betterScanUpToCharactersFromSet:(id)fp8 intoString:(id *)fp12;
- (BOOL)scanEndIntoString:(id *)fp8;
- (id)nextTokenWithPunctuation:(id)fp8;
- (BOOL)scanUpAndOverString:(id)fp8;
@end

@interface NSSet (MessageAdditions)
- (id)getAllObjectsAsArray;
- (void)getAllObjects:(id *)fp8;
@end

@interface NSMutableSet (MessageAdditions)
- (id)uniquedObject:(id)fp8;
- (void)removeObjectsInArray:(id)fp8;
@end

@interface _NSSocket : NSObject
{
    struct __CFReadStream *_readStream;
    struct __CFWriteStream *_writeStream;
    NSString *_protocol;
    NSArray *_trustedCertificates;
    void *_stats;
    void *_request;
    unsigned int _openCompleted:1;
    unsigned int _canRead:1;
    unsigned int _canWrite:1;
    unsigned int _error:1;
    unsigned int _closed:1;
    unsigned int _ignoreCerts:1;
    unsigned int _identifier;
    float _lastReadTime;
    NSInvocation *_eventHandler;
    double _numTimeoutSecs;
    double _numConnectTimeoutSecs;
}

+ (void)_runIOThread;
+ (void)handlePortMessage:(id)fp8;
+ (void)initialize;
+ (int)simulatedSocketSpeed;
+ (void)setSimulatedSocketSpeed:(int)fp8;
- (void)_setError:(id *)fp8 fromDomain:(int)fp12 code:(int)fp16 andLogIfNecessary:(id)fp20;
- (id)securityProtocol;
- (BOOL)setSecurityProtocol:(id)fp8;
- (void)setTrustedCertificates:(id)fp8;
- (id)verboseSSLInformation;
- (id)serverCertificates;
- (id)initWithTimeout:(double)fp8 connectTimeout:(double)fp16;
- (id)init;
- (double)timeout;
- (void)setTimeout:(double)fp8;
- (double)connectTimeout;
- (void)setConnectTimeout:(double)fp8;
- (void)dealloc;
- (void)finalize;
- (void)abort;
- (void)finishRequest:(CDAnonymousStruct12 *)fp8;
- (void)clearError;
- (BOOL)isReadable;
- (BOOL)isWritable;
- (void)waitUntilWritable;
- (BOOL)readIsValid;
- (BOOL)writeIsValid;
- (BOOL)isValid;
- (BOOL)_configureReadStream:(struct __CFReadStream *)fp8 writeStream:(struct __CFWriteStream *)fp12 error:(id *)fp16;
- (BOOL)connectToHost:(id)fp8 withPort:(unsigned int)fp12 protocol:(id)fp16;
- (int)writeBytes:(const char *)fp8 length:(int)fp12 error:(id *)fp16;
- (int)readBytes:(char *)fp8 length:(int)fp12 error:(id *)fp16;
- (void)setEventHandler:(id)fp8;
- (void)removeEventHandler;
- (id)remoteHostname;
- (unsigned int)remotePortNumber;
- (id)sourceIPAddress;
- (id)sourceHostname;
- (int)fileDescriptor;
- (float)lastReadTime;
- (unsigned int)identifier;
- (void)setIdentifier:(unsigned int)fp8;

@end

@interface NSSound (MessageAdditions)
+ (void)_playNextSound;
+ (void)_playSound;
+ (void)sound:(id)fp8 didFinishPlaying:(BOOL)fp12;
+ (void)_setupPlayList;
+ (void)_addSoundOrPathToPlayList:(id)fp8 playImmediately:(BOOL)fp12;
+ (void)addSoundToPlayList:(id)fp8 playImmediately:(BOOL)fp12;
+ (void)addSoundPathToPlayList:(id)fp8 playImmediately:(BOOL)fp12;
+ (id)validPathToSound:(id)fp8;
+ (id)systemLibrarySoundsDirs;
+ (id)librarySoundsDirs;
+ (id)networkLibrarySoundsDirs;
+ (id)tildeLibrarySoundsDirs;
+ (id)appendSoundsToPaths:(id)fp8;
+ (id)soundsAtPaths:(id)fp8;
@end

@interface NSString (StationeryUtilities)
- (id)urlStringByIncrementingCompositeVersionNumber;
- (id)urlStringByInsertingCompositeVersionNumber;
@end

@interface NSString (NSStringUtils)
+ (id)messageIDStringWithDomainHint:(id)fp8;
+ (id)messageIDStringFromCidUrl:(id)fp8;
+ (id)stringWithData:(id)fp8 encoding:(unsigned int)fp12;
+ (id)stringRepresentationForBytes:(long long)fp8;
+ (id)stringWithAttachmentCharacter;
+ (id)createUniqueIdString;
- (unsigned int)hexIntValue;
- (id)smartCapitalizedString;
- (id)stringByReplacingString:(id)fp8 withString:(id)fp12;
- (id)stringByRemovingCharactersInSet:(id)fp8;
- (id)stringByApplyingBodyClassName:(id)fp8;
- (id)createStringByApplyingBodyClassName:(id)fp8;
- (id)stringByChangingBodyTagToDiv;
- (id)stringByRemovingLineEndingsForHTML;
- (id)stringByReplacingNonBreakingSpacesWithString:(id)fp8;
- (BOOL)containsOnlyWhitespace;
- (BOOL)containsOnlyBreakingWhitespace;
- (id)stringByLocalizingReOrFwdPrefix;
- (unsigned int)subjectPrefixLength;
- (id)fileSystemString;
- (id)stringSuitableForHTML;
- (id)stringWithNoExtraSpaces;
- (int)compareAsInts:(id)fp8;
- (id)MD5Digest;
- (id)messageIDSubstring;
- (id)encodedMessageID;
- (id)encodedMessageIDString;
- (id)createStringByEndTruncatingForWidth:(float)fp8 usingFont:(id)fp12;
- (id)uniqueFilenameWithRespectToFilenames:(id)fp8;
- (int)caseInsensitiveCompareExcludingXDash:(id)fp8;
- (id)componentsSeparatedByPattern:(id)fp8;
- (id)spotlightQueryString;
- (BOOL)isValidUniqueIdString;
- (id)feedURLString;
- (id)firstLine;
- (id)secondToLastPathComponent;
- (const char *)functioningLossyCString;
- (BOOL)hasPrefixIgnoreCaseAndDiacritics:(id)fp8;
- (BOOL)isEqualToStringIgnoreCaseAndDiacritics:(id)fp8;
@end

@interface ObjectCache : NSObject
{
    unsigned int _arrayCapacity;
    struct __CFArray *_keysAndValues;
    BOOL _useIsEqual;
}

- (id)initWithCapacity:(unsigned int)fp8;
- (void)dealloc;
- (void)finalize;
- (void)setCapacity:(unsigned int)fp8;
- (void)setUsesIsEqualForComparison:(BOOL)fp8;
- (void)setObject:(id)fp8 forKey:(id)fp12;
- (id)objectForKey:(id)fp8;
- (void)removeObjectForKey:(id)fp8;
- (void)removeAllObjects;
- (BOOL)isObjectInCache:(id)fp8;
- (id)description;

@end

@interface NSString (PathUtils)
+ (id)pathWithDirectory:(id)fp8 filename:(id)fp12 extension:(id)fp16;
- (id)uniquePathWithMaximumLength:(int)fp8;
- (BOOL)deletePath;
- (BOOL)makeDirectoryWithMode:(int)fp8;
- (BOOL)makePathWritable:(int *)fp8;
- (BOOL)makePathReadOnly:(int *)fp8;
- (BOOL)makePathReadOnly:(int *)fp8 recursively:(BOOL)fp12;
- (void)setPosixFilePermissions:(int)fp8;
- (BOOL)isSubdirectoryOfPath:(id)fp8;
- (id)stringByReallyAbbreviatingWithTildeInPath;
- (id)betterStringByResolvingSymlinksInPath;
@end

@interface SoundMenu : NSMenu
{
    int _insertionIndex;
    NSMenuItem *_otherItem;
}

- (id)_addItemWithTitle:(id)fp8;
- (id)init;
- (id)initAndLoadSounds;
- (void)playSoundForItemAtIndex:(int)fp8;
- (int)addSoundPath:(id)fp8;
- (void)performActionForItemAtIndex:(int)fp8;
- (id)otherMenuItem;
- (void)_soundMenuDidAddItem:(id)fp8;

@end

@interface SoundPopUpButton : NSPopUpButton
{
    NSButton *removeSoundButton;
    NSTableView *soundTableView;
    NSMutableArray *userSounds;
    NSPanel *soundPanel;
    id delegate;
    NSMenu *soundMenu;
    NSString *_selectedItem;
    NSMenuItem *_otherItem;
    BOOL _amIAwake;
    BOOL _showSoundsFromBundle;
    BOOL _showSoundsFromDelegate;
    BOOL _showSoundsFromSystemLibrary;
    BOOL _showSoundsFromLibrary;
    BOOL _showSoundsFromNetworkLibrary;
    BOOL _showSoundsFromTildeLibrary;
    BOOL _showNone;
    BOOL _showAddRemove;
}

- (id)_addItemWithTitle:(id)fp8;
- (void)_appendSoundsFromDirectories:(id)fp8;
- (void)_popupMenuChanged:(id)fp8;
- (void)_configureSoundMenu;
- (void)_playSound;
- (void)_playSoundForItemAtIndex:(int)fp8;
- (void)_invalidateSoundMenu;
- (id)otherMenuItem;
- (void)_commonInit;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)awakeFromNib;
- (id)menu;
- (id)soundPath;
- (int)selectSoundPath:(id)fp8;
- (void)openPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)addRemoveMailSound:(id)fp8;
- (void)soundSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)newSoundClicked:(id)fp8;
- (void)removeSoundClicked:(id)fp8;
- (void)doneClicked:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
- (BOOL)showSoundsFromBundle;
- (void)setShowSoundsFromBundle:(BOOL)fp8;
- (BOOL)showSoundsFromDelegate;
- (void)setShowSoundsFromDelegate:(BOOL)fp8;
- (BOOL)showSoundsFromSystemLibrary;
- (void)setShowSoundsFromSystemLibrary:(BOOL)fp8;
- (BOOL)showSoundsFromLibrary;
- (void)setShowSoundsFromLibrary:(BOOL)fp8;
- (BOOL)showSoundsFromNetworkLibrary;
- (void)setShowSoundsFromNetworkLibrary:(BOOL)fp8;
- (BOOL)showSoundsFromTildeLibrary;
- (void)setShowSoundsFromTildeLibrary:(BOOL)fp8;
- (BOOL)showNone;
- (void)setShowNone:(BOOL)fp8;
- (BOOL)showAddRemove;
- (void)setShowAddRemove:(BOOL)fp8;
- (void)dealloc;
- (void)finalize;

@end

@interface URLMatch : NSObject
{
    struct _NSRange _range;
    NSString *_url;
}

- (id)initWithRange:(struct _NSRange)fp8 url:(id)fp16;
- (void)dealloc;
- (void)finalize;
- (struct _NSRange)range;
- (id)url;
- (id)description;

@end

@interface URLifier : NSObject
{
}

+ (void)_urlMatchesForString:(id)fp8 startIndex:(unsigned int)fp12 matches:(id)fp16;
+ (struct _NSRange)_matchEndOfURL:(id)fp8 length:(unsigned int)fp12 startingAtIndex:(unsigned int)fp16 previousCharacter:(unsigned short)fp20;
+ (id)urlMatchesForStringsInDictionary:(id)fp8;
+ (id)urlMatchesForString:(id)fp8;

@end

@interface UsageCounter : NSObject
{
    NSString *_name;
    NSMutableDictionary *_counts;
    BOOL _isDirty;
}

+ (id)sharedInstance;
+ (BOOL)gatherJunkMailUsageCounts;
+ (void)setGatherJunkMailUsageCounts:(BOOL)fp8;
- (id)initWithName:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)_dictionaryForKey:(id)fp8 createIfNeeded:(BOOL)fp12;
- (void)saveDefaults;
- (unsigned int)numberOfDaysAvailableForKey:(id)fp8;
- (unsigned int)countForKey:(id)fp8;
- (unsigned int)countForKey:(id)fp8 includeToday:(BOOL)fp12;
- (void)removeCountForKey:(id)fp8;
- (void)incrementCountForKey:(id)fp8;
- (void)incrementCountForKey:(id)fp8 byCount:(int)fp12;

@end

@interface NSData (UuEnDeCode)
- (id)uudecodedDataIntoFile:(id *)fp8 mode:(unsigned int *)fp12;
- (id)uuencodedDataWithFile:(id)fp8 mode:(unsigned int)fp12;
@end

@interface WorkerThread : NSThread
{
}

+ (void)initialize;
+ (void)addInvocationToQueue:(id)fp8;
+ (void)_execute:(id)fp8;

@end

@interface NSObject (DelayedPerformExtensions)
- (void)_changeOutstandingPerformsBy:(int)fp8;
- (void)_performGuaranteedPerformSelector:(id)fp8;
- (void)guaranteedPerformSelector:(SEL)fp8 withObject:(id)fp12 afterDelay:(double)fp16;
@end

@interface NSRunLoop (MessageExtensions)
+ (struct __CFRunLoopSource *)_addEmptySourceToRunLoop;
+ (void)_removeEmptySourceFromRunLoop:(struct __CFRunLoopSource *)fp8;
+ (BOOL)_flushQueuedEventsAddingSource:(BOOL)fp8;
+ (void)flushQueuedEvents;
@end

@interface RegularExpression : NSObject <NSCopying, NSCoding>
{
    NSString *_expressionString;
    void *_reserved;
}

+ (void)initialize;
+ (id)regularExpressionWithString:(id)fp8;
+ (const char *)getBytesForString:(id)fp8 lossByte:(unsigned char)fp12;
- (void)dealloc;
- (void)finalize;
- (id)initWithExpressionString:(id)fp8;
- (id)initWithExpressionString:(id)fp8 options:(unsigned int)fp12;
- (unsigned int)_numberOfSubexpressions;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (id)expressionString;
- (struct _NSRange)matchedRangeForCString:(const char *)fp8 range:(struct _NSRange)fp12 subexpressionRanges:(struct _NSRange *)fp20 count:(unsigned int)fp24;
- (struct _NSRange)matchedRangeForString:(id)fp8 range:(struct _NSRange)fp12 subexpressionRanges:(struct _NSRange *)fp20 count:(unsigned int)fp24;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;

@end

@interface MailboxUid (ScriptingSupport)
- (id)objectSpecifier;
- (id)applescriptContainer;
- (id)applescriptChildren;
- (id)messages;
- (void)removeFromMessagesAtIndex:(unsigned int)fp8;
- (id)mailboxName;
- (void)setMailboxName:(id)fp8;
- (id)valueInMessagesWithUniqueID:(id)fp8;
@end

@interface MessageAddressee : NSObject
{
    NSString *_displayName;
    NSString *_address;
    NSString *_type;
    id _message;
}

- (id)initWithDisplayName:(id)fp8 address:(id)fp12 type:(id)fp16 message:(id)fp20;
- (void)dealloc;
- (void)finalize;
- (BOOL)isEqual:(id)fp8;
- (id)formattedAddress;
- (id)displayName;
- (void)setDisplayName:(id)fp8;
- (id)address;
- (void)setAddress:(id)fp8;
- (id)_keyForType;
- (id)objectSpecifier;
- (void)setMessage:(id)fp8;

@end

@interface AppleScriptHeaderRecord : NSObject
{
    NSString *_name;
    id _content;
    Message *_message;
}

- (void)dealloc;
- (void)finalize;
- (id)name;
- (void)setName:(id)fp8;
- (id)content;
- (void)setContent:(id)fp8;
- (id)message;
- (void)setMessage:(id)fp8;
- (id)objectSpecifier;

@end

@interface Message (ScriptingSupport)
- (id)objectSpecifier;
- (void)_setAppleScriptFlag:(id)fp8 state:(BOOL)fp12;
- (BOOL)isRead;
- (void)setIsRead:(BOOL)fp8;
- (BOOL)wasRepliedTo;
- (void)setWasRepliedTo:(BOOL)fp8;
- (BOOL)wasForwarded;
- (void)setWasForwarded:(BOOL)fp8;
- (BOOL)wasRedirected;
- (void)setWasRedirected:(BOOL)fp8;
- (BOOL)isJunk;
- (void)setIsJunk:(BOOL)fp8;
- (BOOL)isDeleted;
- (void)setIsDeleted:(BOOL)fp8;
- (BOOL)isFlagged;
- (void)setIsFlagged:(BOOL)fp8;
- (id)replyTo;
- (id)scriptedMessageSize;
- (id)content;
- (void)_addRecipientsForKey:(id)fp8 toArray:(id)fp12;
- (id)recipients;
- (id)toRecipients;
- (id)ccRecipients;
- (id)bccRecipients;
- (id)container;
- (void)setContainer:(id)fp8;
- (id)messageIDHeader;
- (id)rawSource;
- (id)allHeaders;
- (int)actionColorMessage;
- (void)setBackgroundColor:(int)fp8;
- (int)backgroundColor;
- (id)appleScriptHeaders;
- (id)appleScriptAttachments;
- (id)valueInAppleScriptAttachmentsWithUniqueID:(id)fp8;
@end

@interface LibraryStore (ScriptingSupport)
- (id)objectSpecifierForMessage:(id)fp8;
@end

@interface MessageStore (ScriptingSupport)
- (id)objectSpecifier;
- (id)objectSpecifierForMessage:(id)fp8;
@end

@interface AuthScheme : NSObject
{
}

+ (void)initialize;
+ (id)knownSchemes;
+ (void)registerSchemeClass:(Class)fp8;
+ (id)schemeWithName:(id)fp8;
+ (id)authSchemesForAccount:(id)fp8 connection:(id)fp12;
+ (id)schemeWithAccountInfo:(id)fp8;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (Class)connectionClassForAccount:(id)fp8;
- (Class)authenticatorClassForAccount:(id)fp8;
- (unsigned int)defaultPortForAccount:(id)fp8;
- (BOOL)hasEncryption;
- (unsigned int)securityLevel;
- (BOOL)canAuthenticateAccount:(id)fp8 connection:(id)fp12;
- (id)authenticatorForAccount:(id)fp8 connection:(id)fp12;
- (BOOL)requiresPassword;
- (BOOL)requiresDomain;
- (id)name;
- (id)humanReadableName;
- (int)compareBySecurityLevel:(id)fp8;

@end

@interface AuthScheme (ScriptingSupport)
+ (id)schemeWithApplescriptScheme:(int)fp8;
- (int)applescriptScheme;
@end

@interface SASLAuthenticator : NSObject
{
    void *_context;
    AuthScheme *_authScheme;
    Account *_account;
    int _authenticationState;
}

- (id)initWithAuthScheme:(id)fp8 account:(id)fp12 connection:(id)fp16;
- (void)dealloc;
- (void)finalize;
- (id)authScheme;
- (id)account;
- (id)saslName;
- (id)responseForServerData:(id)fp8;
- (int)authenticationState;
- (void)setAuthenticationState:(int)fp8;
- (BOOL)justSentPlainTextPassword;
- (id)securityLayer;
- (id)localAddress;
- (id)remoteAddress;
- (BOOL)isUsingSSL;

@end

@interface Connection (Gross)
- (id)_nssocket;
@end

@interface LoginAuthenticator : SASLAuthenticator
{
    BOOL _justSentPassword;
}

- (id)saslName;
- (id)responseForServerData:(id)fp8;
- (BOOL)justSentPlainTextPassword;

@end

@interface PlainAuthenticator : SASLAuthenticator
{
}

- (id)saslName;
- (id)responseForServerData:(id)fp8;
- (BOOL)justSentPlainTextPassword;

@end

@interface PlainAuthScheme : AuthScheme
{
}

- (Class)authenticatorClassForAccount:(id)fp8;
- (id)authenticatorForAccount:(id)fp8 connection:(id)fp12;
- (BOOL)canAuthenticateAccount:(id)fp8 connection:(id)fp12;
- (id)name;
- (id)humanReadableName;

@end

@interface PlainAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface CRAM_MD5Authenticator : SASLAuthenticator
{
}

- (id)responseForServerData:(id)fp8;

@end

@interface CRAM_MD5AuthScheme : AuthScheme
{
}

- (Class)authenticatorClassForAccount:(id)fp8;
- (id)name;
- (id)humanReadableName;
- (BOOL)sendsPlainTextPasswords;
- (BOOL)hasEncryption;
- (unsigned int)securityLevel;
- (BOOL)canAuthenticateAccount:(id)fp8 connection:(id)fp12;

@end

@interface CRAM_MD5AuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface MailAddressManager : NSObject <ABImageClient>
{
    ObjectCache *_imageCache;
    NSMutableDictionary *emailsAwaitingImage;
    NSMutableDictionary *recordsCache;
    NSMutableSet *addressesWithNoRecords;
    BOOL needToTrimRecordCaches;
    BOOL singleThreaded;
}

+ (id)addressManager;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (void)setOperatesInSingleThread:(BOOL)fp8;
- (BOOL)operatesInSingleThread;
- (id)loadAddressBookAsynchronously;
- (void)loadAddressBookSynchronously;
- (void)_importDidBegin:(id)fp8;
- (void)_importDidUpdate:(id)fp8;
- (void)_importDidEnd:(id)fp8;
- (id)bestRecordMatchingFormattedAddress:(id)fp8;
- (void)trimRecordCachesAfterDelay;
- (void)trimRecordCaches;
- (void)addressBookDidChange:(id)fp8;
- (void)postPhotoChangedNotification;
- (void)recordsMatchingDictionary:(id)fp8;
- (id)recordsMatchingSearchString:(id)fp8;
- (BOOL)addressBookPerson:(id)fp8 nameMatchesSearchWords:(id)fp12;
- (BOOL)email:(id)fp8 matchesSearchWords:(id)fp12;
- (id)betterRecordOfRecent:(id)fp8 addressBook:(id)fp12;
- (id)recordForUniqueId:(id)fp8;
- (id)groupsMatchingString:(id)fp8;
- (void)updateDatesForRecentRecord:(id)fp8;
- (void)_addAddresses:(id)fp8 asRecent:(BOOL)fp12;
- (void)addRecentAddresses:(id)fp8;
- (void)addAddresses:(id)fp8;
- (id)addRecentToAddressBook:(id)fp8;
- (id)addAddressToAddressBook:(id)fp8;
- (void)removeRecordFromAddressBook:(id)fp8 forRecent:(id)fp12;
- (void)removeRecentAddresses:(id)fp8;
- (void)removeRecentRecord:(id)fp8;
- (id)addEmailAddressToCardMatchingFirstAndLastNameFromFormattedAddress:(id)fp8;
- (id)addressBookRecordForRecentRecord:(id)fp8 orEmail:(id)fp12;
- (id)addressBookPersonForEmail:(id)fp8;
- (id)addressBookRecordsForFirstName:(id)fp8 lastName:(id)fp12;
- (id)imageForMailAddress:(id)fp8;
- (void)fetchImageForAddress:(id)fp8;
- (void)consumeImageData:(id)fp8 forTag:(int)fp12;
- (void)cacheImage:(id)fp8 forAddress:(id)fp12;
- (id)groups;
- (void)_addEmailsFromGroup:(id)fp8 toDictionary:(id)fp12;
- (id)emailAddressesFromGroup:(id)fp8;
- (id)expandPrivateAliases:(id)fp8;
- (id)replaceOccurrencesOfPrivateGroupAliasesWithPublicName:(id)fp8;

@end

@interface GSSAPIAuthenticator : SASLAuthenticator <SASLSecurityLayer>
{
    unsigned int _maxBufferSize;
    unsigned int _substate:2;
    unsigned int _securityLevel:4;
    struct gss_ctx_id_struct *_gssContext;
    struct gss_name_struct *_targetName;
    unsigned int _qopState;
    int _requestConfidentiality;
}

- (void)setAuthenticationState:(int)fp8;
- (id)responseForServerData:(id)fp8;
- (id)securityLayer;
- (unsigned int)encryptionBufferSize;
- (id)createDecryptedDataForBytes:(const char *)fp8 length:(unsigned int)fp12;
- (id)createEncryptedDataForBytes:(const char *)fp8 length:(unsigned int)fp12;

@end

@interface GSSAPIAuthScheme : AuthScheme
{
}

- (Class)authenticatorClassForAccount:(id)fp8;
- (id)name;
- (id)humanReadableName;
- (BOOL)requiresPassword;
- (BOOL)hasEncryption;
- (unsigned int)securityLevel;
- (BOOL)canAuthenticateAccount:(id)fp8 connection:(id)fp12;

@end

@interface GSSAPIAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface ABAddressBook (MailAdditions)
+ (BOOL)firstNameShouldBeFirst;
+ (BOOL)firstNameShouldBeFirstForRecord:(id)fp8;
- (id)recordsCompletingSearchString:(id)fp8 searchSubscribedContent:(BOOL)fp12;
- (id)recordsCompletingSearchString:(id)fp8;
- (id)_bestRecordMatchingFormattedAddress:(id)fp8 inSubscribedContent:(BOOL)fp12;
- (id)bestRecordMatchingFormattedAddress:(id)fp8;
- (id)recordWithEmailAddress:(id)fp8;
@end

@interface ABLDAP_ResultElement (MailAdditions)
- (BOOL)isGroup;
- (int)recordType;
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)firstAndMiddleNames;
- (id)lastNameAndExtension;
- (id)compoundName;
- (id)_fullName;
- (id)compoundNameAndEmail;
- (BOOL)exactlyMatchesString:(id)fp8;
@end

@interface ABMailRecent (MailAdditions)
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)mostRecentDate;
- (BOOL)hasRelatedAddressBookRecord;
- (BOOL)isGroup;
- (id)_fullName;
@end

@interface ABGroup (MailAdditions)
+ (id)diacriticInsensitiveSearchElementForProperty:(id)fp8 label:(id)fp12 key:(id)fp16 value:(id)fp20 comparison:(long)fp24;
- (BOOL)isGroup;
- (id)_fullName;
- (BOOL)hasEmailAddress:(id)fp8;
@end

@interface ABPerson (MailAdditions)
+ (id)diacriticInsensitiveSearchElementForProperty:(id)fp8 label:(id)fp12 key:(id)fp16 value:(id)fp20 comparison:(long)fp24;
- (BOOL)hasEmailAddress:(id)fp8;
- (BOOL)isMe;
- (id)compoundNameAndEmailForGroupMembership:(id)fp8;
- (BOOL)isGroup;
@end

@interface ABRecord (MailAdditions)
- (id)firstName;
- (id)lastName;
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)_fullName;
- (int)_fullNameCompare:(id)fp8;
- (id)email;
- (id)compoundName;
- (id)compoundNameAndEmail;
- (BOOL)isGroup;
@end

@interface CachingABRecord : NSObject
{
    ABRecord *record;
    NSMutableDictionary *propertyValues;
    NSMutableArray *matchingEmails;
    CachingABRecord *associatedRecord;
}

- (id)initWithABRecord:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)valueForProperty:(id)fp8;
- (BOOL)setValue:(id)fp8 forProperty:(id)fp12;
- (id)firstName;
- (id)lastName;
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)firstAndMiddleNames;
- (id)lastNameAndExtension;
- (id)_fullName;
- (id)_fullNameShowingNickname:(BOOL)fp8;
- (id)email;
- (id)emailAddresses;
- (BOOL)isGroup;
- (id)compoundName;
- (id)compoundNameAndEmail;
- (id)uniqueId;
- (int)recordType;
- (BOOL)exactlyMatchesString:(id)fp8;
- (id)associatedRecord;
- (BOOL)isRecentRecord;
- (BOOL)hasHandles;
- (BOOL)hasEmailAddress:(id)fp8;
- (BOOL)hasRelatedAddressBookRecord;
- (id)mostRecentDate;
- (id)record;
- (id)matchingEmails;
- (void)addMatchingEmail:(id)fp8;
- (BOOL)isEqual:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)forwardInvocation:(id)fp8;

@end

@interface MimePart (SMIMEExtensions)
- (void)verifySignature:(id *)fp8;
- (id)decodeMultipartSigned;
- (id)_decodeApplicationPkcs7_mime:(id *)fp8;
- (id)decodeApplicationPkcs7_mime;
- (id)copyMessageSigners;
- (id)copySigningCertificates;
- (id)copySignerLabels;
- (id)createSignedPartWithData:(id)fp8 sender:(id)fp12 signatureData:(id *)fp16;
- (id)createEncryptedPartWithData:(id)fp8 recipients:(id)fp12 encryptedData:(id *)fp16;
@end

@interface MessageSigner : NSObject
{
    int _verificationStatus;
    NSArray *_certificates;
    struct OpaqueSecTrustRef *_trust;
    int _trustResult;
}

- (void)dealloc;
- (void)finalize;
- (id)initWithCmsSignerInfo:(struct SecCmsSignerInfoStr *)fp8 trust:(struct OpaqueSecTrustRef *)fp12;
- (id)description;
- (id)label;
- (id)commonName;
- (id)emailAddress;
- (struct OpaqueSecTrustRef *)trust;
- (struct OpaqueSecCertificateRef *)signingCertificate;
- (id)certificates;
- (id)signingError;

@end

@interface MFError (MessageSignerSupport)
- (id)messageSigner;
@end

@interface NSError (MessageSignerSupport)
- (id)messageSigner;
@end

@interface MimeCharset : NSObject
{
    unsigned int _encoding;
    NSString *_primaryLanguage;
    NSString *_charsetName;
    unsigned int _coversLargeUnicodeSubset:1;
    unsigned int _useBase64InHeaders:1;
    unsigned int _canBeUsedForOutgoingMessages:1;
}

+ (id)allMimeCharsets;
+ (id)charsetForEncoding:(unsigned long)fp8;
+ (id)preferredMimeCharset;
- (id)retain;
- (void)release;
- (unsigned int)retainCount;
- (id)initWithEncoding:(unsigned long)fp8;
- (unsigned long)encoding;
- (id)charsetName;
- (BOOL)canBeUsedForOutgoingMessages;
- (BOOL)coversLargeUnicodeSubset;
- (BOOL)useBase64InHeaders;
- (id)displayName;
- (id)primaryLanguage;
- (id)description;

@end

@interface NSString (MimeCharsetSupport)
- (id)bestMimeCharset;
- (id)_bestMimeCharset:(id)fp8;
- (id)bestMimeCharsetUsingHint:(unsigned long)fp8;
@end

@interface SizeEngine : NSObject
{
    MailAccount *_account;
    QuotaUsage *_totalUsage;
    ActivityMonitor *_monitor;
    int _monitorAccessKey;
    BOOL _isActive;
}

- (id)initWithAccount:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)account;
- (id)totalUsage;
- (void)refresh;
- (void)cancel;
- (void)start;
- (void)stop;

@end

@interface SizeEngine (MFPrivate)
- (void)_lockedStartWorkerThreadIfNeeded;
- (void)_workerThreadFinished:(id)fp8;
- (void)_runWorkerThread;
- (BOOL)_prepareToRefresh;
- (BOOL)_shouldStartWorkerThread;
- (void)_postChangeNotificationWithUserInfo:(id)fp8;
@end

@interface QuotaUsage : NSObject
{
    CDAnonymousStruct3 current;
    CDAnonymousStruct3 maximum;
}

- (unsigned int)hash;
- (BOOL)isEqual:(id)fp8;
- (id)description;

@end

@interface LibraryMessage : Message <LibraryObject>
{
    unsigned int _options;
    BOOL _isBeingChanged;
    unsigned int _libraryID;
    NSString *_remoteID;
    unsigned int _uid;
    NSArray *_references;
    unsigned int _size;
    CDAnonymousStruct4 _imapFlags;
    unsigned int _mailboxID;
    unsigned int _originalMailboxID;
    NSString *_messageID;
    Message *_note;
    NSArray *_todos;
    Message *_associatedMessage;
    MFUUID *_noteDocumentID;
}

+ (void)initialize;
+ (id)messageWithLibraryID:(unsigned int)fp8;
- (id)initWithLibraryID:(unsigned int)fp8;
- (void)release;
- (id)messageID;
- (id)persistentID;
- (id)documentID;
- (void)setDocumentID:(id)fp8;
- (id)noteDocumentID;
- (void)setNoteDocumentID:(id)fp8;
- (id)originalMailboxURL;
- (int)type;
- (id)references;
- (BOOL)setReferences:(id)fp8;
- (id)note;
- (void)setNote:(id)fp8;
- (id)todos;
- (void)setTodos:(id)fp8;
- (id)subject;
- (id)sender;
- (id)to;
- (id)messageIDHeaderDigest;
- (id)inReplyToHeaderDigest;
- (unsigned int)messageSize;
- (void)setMessageSize:(unsigned int)fp8;
- (id)messageStore;
- (void)setMessageStore:(id)fp8;
- (id)mailbox;
- (void)_updateUID;
- (void)setRemoteID:(id)fp8;
- (id)remoteID;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (void)setIMAPFlags:(CDAnonymousStruct4)fp8;
- (CDAnonymousStruct4)imapFlags;
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)fp8;
- (void)setIsPartial:(BOOL)fp8 partsHaveBeenCached:(BOOL)fp12 commitNow:(BOOL)fp16;
- (BOOL)isMessageContentsLocallyAvailable;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)fp8;
- (void)setPreferredEncoding:(unsigned long)fp8;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)fp8;
- (id)mailboxName;
- (int)compareByUidWithMessage:(id)fp8;
- (void)setMessageFlagsWithoutCommitting:(unsigned long)fp8;
- (void)setMessageFlags:(unsigned long)fp8;
- (void)setFlags:(unsigned long long)fp8;
- (void)setColorHasBeenEvaluated:(BOOL)fp8;
- (void)setColorWithoutCommitting:(id)fp8;
- (void)setColor:(id)fp8;
- (void)setLibraryColor:(char *)fp8;
- (void)setColor:(id)fp8 hasBeenEvaluated:(BOOL)fp12 flags:(unsigned long)fp16;
- (void)setColor:(id)fp8 hasBeenEvaluated:(BOOL)fp12 flags:(unsigned long)fp16 commit:(BOOL)fp20;
- (void)commit;
- (void)commitLater;
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)fp8;
- (void)reload;
- (void)setMutableInfoFromMessage:(id)fp8;
- (id)description;
- (void)dealloc;
- (void)finalize;
- (id)path;
- (id)account;
- (void)markAsViewed;
- (id)preferredEmailAddressToReplyWith;
- (void)setRemoteID:(const char *)fp8 documentID:(id)fp12 flags:(unsigned long long)fp16 size:(unsigned int)fp24 mailboxID:(unsigned int)fp28 originalMailboxID:(unsigned int)fp32 color:(char *)fp36 noteDocumentID:(id)fp40;
- (void)loadMessageInfoIfNecessary;
- (id)messageDataIncludingFromSpace:(BOOL)fp8 newDocumentID:(id)fp12;
- (void)_calculateAttachmentInfoFromBody:(id)fp8;
- (id)associatedMessage;
- (void)setAssociatedMessage:(id)fp8;
- (unsigned int)options;
- (void)setOptions:(unsigned int)fp8;
- (unsigned int)originalMailboxID;
- (void)setOriginalMailboxID:(unsigned int)fp8;
- (unsigned int)mailboxID;
- (void)setMailboxID:(unsigned int)fp8;
- (unsigned int)libraryID;

@end

@interface Message (LibraryAdditions)
- (id)metadataDictionary;
- (id)metadataPlist;
@end

@interface LibraryStore : MessageStore
{
    MessageCriterion *_criterion;
    double _lastUpdated;
    NSString *_url;
    unsigned int _openOptions;
    NSMutableIndexSet *_memberLibraryIDs;
    unsigned int _messageAvailabilityCount;
    BOOL _mailboxUnreadCountUpdatePending;
    NSMutableArray *_allMessagesDuringOpening;
}

+ (void)initialize;
+ (id)_storeCacheMapTable;
+ (unsigned int)defaultLoadOptions;
+ (id)storeWithCriterion:(id)fp8;
+ (id)storeWithMailbox:(id)fp8;
+ (id)sharedInstance;
+ (BOOL)createEmptyStoreForPath:(id)fp8;
+ (BOOL)storeAtPathIsWritable:(id)fp8;
- (id)initWithCriterion:(id)fp8 mailbox:(id)fp12 readOnly:(BOOL)fp16;
- (id)initWithCriterion:(id)fp8;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (id)initWithMailbox:(id)fp8;
- (id)mailbox;
- (unsigned int)mailboxID;
- (void)updateCriterionFromMailbox;
- (void)_updateMailboxUnreadCount;
- (void)addCountsForMessages:(id)fp8 shouldUpdateUnreadCount:(BOOL)fp12;
- (BOOL)shouldCancel;
- (void)_newMessagesAvailable:(id)fp8;
- (void)addInvocationToQueue:(id)fp8;
- (void)newMessagesAvailable:(id)fp8;
- (void)libraryFinishedSendingMessages;
- (void)openAsynchronouslyWithOptions:(unsigned int)fp8;
- (BOOL)_shouldUpdateColorsAndAttachmentsAfterOpening;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)fp8;
- (id)openSynchronouslyUpdatingMetadata:(BOOL)fp8 returnRetainedMessages:(BOOL)fp12;
- (unsigned int)totalCount;
- (id)copyOfAllMessages;
- (id)copyOfAllMessagesWithOptions:(unsigned int)fp8;
- (void)asynchronousCopyOfAllMessagesWithOptions:(id)fp8;
- (id)mutableCopyOfAllMessages;
- (void)recalculateUnreadCountAsychronously;
- (void)messageFlagsDidChange:(id)fp8 flags:(id)fp12 oldMessageFlags:(id)fp16;
- (void)_recalculateUnreadCountSynchronously;
- (id)filterMessagesByMembership:(id)fp8;
- (void)messagesAdded:(id)fp8;
- (void)handleMessagesAdded:(id)fp8;
- (void)messagesWereAdded:(id)fp8 forIncrementalLoading:(BOOL)fp12;
- (void)messageFlagsChanged:(id)fp8;
- (void)handleMessageFlagsChanged:(id)fp8;
- (void)todosDidChangeForMessages:(id)fp8 oldToDosByMessage:(id)fp12 newToDosByMessage:(id)fp16;
- (void)messageToDosChanged:(id)fp8;
- (void)handleMessageToDosChanged:(id)fp8;
- (void)messagesCompacted:(id)fp8;
- (void)handleMessagesCompacted:(id)fp8;
- (void)messagesUpdated:(id)fp8;
- (void)handleMessagesUpdated:(id)fp8;
- (void)_invalidate;
- (void)dealloc;
- (void)finalize;
- (id)messageForMessageID:(id)fp8;
- (unsigned long)flagsForMessage:(id)fp8;
- (BOOL)hasCachedDataForMimePart:(id)fp8;
- (id)_fetchHeaderDataForMessage:(id)fp8;
- (id)_fetchBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)fullBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (unsigned int)indexOfMessage:(id)fp8;
- (void)deleteMessages:(id)fp8 moveToTrash:(BOOL)fp12;
- (void)deleteMessagesOlderThanNumberOfDays:(int)fp8 compact:(BOOL)fp12;
- (BOOL)allowsAppend;
- (BOOL)allowsOverwrite;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 newDocumentIDsByOld:(id)fp24 flagsToSet:(id)fp28 forMove:(BOOL)fp32 error:(id *)fp36;
- (int)undoAppendOfMessageIDs:(id)fp8;
- (void)finishCopyOfMessages:(id)fp8 fromStore:(id)fp12 originalsWereDeleted:(BOOL)fp16;
- (BOOL)canCompact;
- (BOOL)_shouldCallCompactWhenClosing;
- (void)doCompact;
- (id)lastMessageWithHeaders:(id)fp8 inMailbox:(id)fp12;
- (void)deleteLastMessageWithHeaders:(id)fp8 compactWhenDone:(BOOL)fp12;
- (id)messageWithValue:(id)fp8 forHeader:(id)fp12 options:(unsigned int)fp16;
- (id)dataForMimePart:(id)fp8;
- (void)writeUpdatedMessageDataToDisk;
- (void)updateMetadata;
- (void)updateUserInfoToLatestValues;
- (void)_setNeedsAutosave;
- (id)criterion;
- (id)url;
- (unsigned int)unreadCount;
- (void)_flushAllMessageData;
- (void)rebuildTableOfContentsAsynchronously;
- (void)_rebuildTableOfContentsSynchronously;
- (void)invalidateMessage:(id)fp8;
- (void)invalidateMessages:(id)fp8;
- (void)_flushAllCaches;
- (id)_cachedBodyForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeadersForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedBodyDataForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeaderDataForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (BOOL)_updateFlagForMessage:(id)fp8 key:(id)fp12 value:(BOOL)fp16;
- (BOOL)setPreferredEncoding:(unsigned long)fp8 forMessage:(id)fp12;
- (int)setToDo:(id)fp8 forMessage:(id)fp12 oldToDo:(id)fp16;

@end

@interface LibraryIMAPStore : LibraryStore <IMAPMailboxDelegate>
{
    BOOL _supportsCustomPermanentFlags;
    BOOL _readyToDealloc;
    NSString *_mailboxName;
    IMAPMailbox *_IMAPMailbox;
    NSSet *_cachedContents;
    NSDate *_cachedDirModDate;
    IMAPDownloadCache *_downloadCache;
    IMAPCommandPipeline *_fetchPipeline;
    IMAPMailboxSyncEngine *_syncEngine;
    NSLock *_copyLock;
    NSMutableDictionary *_recentFlagChangesByMessageID;
    NSMutableArray *_recentlyDeletedMessageIDs;
    unsigned int _totalCount;
}

+ (BOOL)storeAtPathIsWritable:(id)fp8;
+ (BOOL)createEmptyStoreForPath:(id)fp8;
- (id)_copyMailboxSyncEngineCreateIfNecessary:(BOOL)fp8;
- (id)_copyMailboxSyncEngineCreateIfNecessary:(BOOL)fp8 setupGatewayIfNecessary:(BOOL)fp12;
- (BOOL)_isRebuildingOrSynchronizing;
- (BOOL)_isSynchronized;
- (unsigned int)_permanentFlags;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (void)dealloc;
- (void)finalize;
- (id)messagesForImporter;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)fp8 withOptions:(unsigned int)fp12;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)fp8;
- (void)openSynchronouslyWithoutUserInteraction;
- (id)willDealloc;
- (void)_setState:(int)fp8;
- (void)_invalidate;
- (BOOL)_shouldCallCompactWhenClosing;
- (void)_fetchForCheckingNewMail:(BOOL)fp8;
- (void)checkNewMail;
- (void)fetchSynchronously;
- (void)cleanupSynchronously;
- (void)doRoutineCleanup;
- (BOOL)canRebuild;
- (void)removeAllLocalMessages;
- (id)mailboxName;
- (BOOL)canCompact;
- (void)doCompact;
- (void)doCompactToDos;
- (void)deleteMessagesOlderThanNumberOfDays:(int)fp8 compact:(BOOL)fp12;
- (void)deleteLastMessageWithHeaders:(id)fp8 compactWhenDone:(BOOL)fp12;
- (void)undeleteMessagesWithRemoteIDs:(id)fp8;
- (BOOL)allowsAppend;
- (BOOL)allowsOverwrite;
- (void)_addOfflineTransferMessages:(id)fp8;
- (id)_createFlagsByMessageFromFlags:(id)fp8 messages:(id)fp12;
- (void)_copyFlagsFromMessages:(id)fp8 flagsByMessage:(id)fp12 toMessagesWithUids:(id)fp16 withGateway:(id)fp20 usedFlags:(id)fp24;
- (BOOL)_doUidCopy:(CDAnonymousStruct14 *)fp8 toStore:(id)fp12 newMessages:(id)fp16 error:(id *)fp20;
- (int)_doAppend:(CDAnonymousStruct14 *)fp8 error:(id *)fp12;
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 newDocumentIDsByOld:(id)fp24 flagsToSet:(id)fp28 forMove:(BOOL)fp32 error:(id *)fp36;
- (int)undoAppendOfMessageIDs:(id)fp8;
- (id)createDictionaryForLocalFlags:(unsigned long)fp8 serverFlags:(unsigned long)fp12 existingDictionary:(id)fp16;
- (void)_synchronouslyStoreFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (void)_setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (id)recentFlagChangesForMessageID:(id)fp8;
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12 updatingServer:(BOOL)fp16;
- (id)setFlagsFromDictionary:(id)fp8 forToDos:(id)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forToDo:(id)fp12;
- (void)_internalSetFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (BOOL)setPreferredEncoding:(unsigned long)fp8 forMessage:(id)fp12;
- (id)_cachedBodyForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeadersForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedBodyDataForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_cachedHeaderDataForMessage:(id)fp8 valueIfNotPresent:(id)fp12;
- (id)_dataForMessage:(id)fp8 readHeadersOnly:(BOOL)fp12;
- (id)_createDataFromMimePart:(id)fp8 threshold:(unsigned int)fp12;
- (id)_fetchDataForMimePart:(id)fp8 keepInMemory:(BOOL)fp12 writeToDisk:(BOOL)fp16;
- (id)dataForMimePart:(id)fp8;
- (id)_lockedGetCacheDirectoryContents;
- (id)cacheDirectoryContents;
- (BOOL)hasCachedDataForMimePart:(id)fp8;
- (id)fullBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)_fetchBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
- (id)_fetchHeaderDataForMessage:(id)fp8;
- (id)colorForMessage:(id)fp8;
- (id)messageForMessageID:(id)fp8;
- (id)messageWithLibraryID:(unsigned int)fp8 options:(unsigned int)fp12;
- (unsigned int)maximumRemoteIDForMailbox:(id)fp8;
- (id)getDetailsForMessagesWithRemoteIDs:(id)fp8 fromMailbox:(id)fp12;
- (BOOL)hasCacheFileForMessage:(id)fp8 part:(id)fp12 directoryContents:(id)fp16;
- (BOOL)hasCacheFileForMessage:(id)fp8 directoryContents:(id)fp12;
- (void)compactMailbox:(id)fp8;
- (id)messagesForMailbox:(id)fp8 olderThanNumberOfDays:(int)fp12;
- (id)messagesForMailbox:(id)fp8 where:(id)fp12 sortedBy:(id)fp16 ascending:(BOOL)fp20 options:(unsigned int)fp24;
- (id)duplicateMessages:(id)fp8 newRemoteIDs:(id)fp12 newDocumentIDs:(id)fp16 forMailbox:(id)fp20 setFlags:(unsigned long long)fp24 clearFlags:(unsigned long long)fp32 messageFlagsForMessages:(id)fp40 createNewCacheFiles:(BOOL)fp44;
- (id)duplicateMessages:(id)fp8 newRemoteIDs:(id)fp12 newDocumentIDs:(id)fp16 forMailbox:(id)fp20 setFlags:(unsigned long long)fp24 clearFlags:(unsigned long long)fp32 createNewCacheFiles:(BOOL)fp40;
- (id)messageWithRemoteID:(id)fp8 inRemoteMailbox:(id)fp12;
- (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 oldMessagesByNewMessage:(id)fp20;
- (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 isInitialImport:(BOOL)fp20 oldMessagesByNewMessage:(id)fp24 remoteIDs:(id)fp28 setFlags:(unsigned long long)fp32 clearFlags:(unsigned long long)fp40 messageFlagsForMessages:(id)fp48 copyFiles:(BOOL)fp52;
- (id)stringForQuery:(id)fp8;
- (unsigned int)unreadCountForMailbox:(id)fp8;
- (unsigned int)deletedCountForMailbox:(id)fp8;
- (void)setBackgroundColorForMessages:(id)fp8 textColorForMessages:(id)fp12;
- (void)setFlagsForMessages:(id)fp8 mask:(unsigned long)fp12;
- (void)setFlagsAndColorForMessages:(id)fp8;
- (BOOL)canSetMessageColors;
- (BOOL)messageHasBeenDeleted:(id)fp8;
- (BOOL)_allMessagesHaveDateReceived;
- (id)libraryToDoWithRemoteID:(unsigned int)fp8 inMailbox:(unsigned int)fp12;
- (void)reconcile;
- (void)abandonProcessingStore;
- (BOOL)isReconciling;
- (void)waitUntilStoreIsFree;
- (void)willAddMessages;
- (void)didAddMessages;
- (void)willRemoveMessages;
- (void)didRemoveMessages;
- (id)_gatewayCreateIfNeeded:(BOOL)fp8 options:(int)fp12;
- (id)_gateway;
- (BOOL)_changedFlagsForMessage:(id)fp8 fetchResponse:(id)fp12 newFlags:(unsigned int *)fp16;
- (void)startSynchronization;
- (id)_uidIndexSetForMessages:(id)fp8;
- (void)_retrieveNewMessagesForCheckingNewMail:(BOOL)fp8;
- (void)forceResync;
- (id)_preferredOrderForFetchingMessageBodies:(id)fp8;
- (BOOL)hasValidCacheFileForMessage:(id)fp8;
- (BOOL)hasValidCacheFileForUid:(unsigned long)fp8;
- (id)copyOfOldCachedMessagesContentsForUid:(unsigned long)fp8;
- (void)setUid:(unsigned long)fp8 forMessageWithTemporaryUid:(unsigned long)fp12;
- (id)addMessages:(id)fp8 oldMessagesByNewMessage:(id)fp12;
- (id)copyOfAllMessagesWithOptions:(unsigned int)fp8;
- (id)copyOfAllMessagesSortedByUidWithOptions:(unsigned int)fp8;
- (id)deletedMessages;
- (int)lastUid;
- (id)URLString;
- (void)writeUpdatedMessageDataToDisk;
- (void)compactMessages:(id)fp8;
- (void)_countUnreadAndDeleted;
- (void)_countUnreadAndDeletedInMessages:(id)fp8;
- (unsigned int)totalCount;
- (unsigned int)indexOfMessage:(id)fp8;
- (id)sortOrder;
- (BOOL)isSortedAscending;
- (void)propagateMessagesWereAdded:(id)fp8 forIncrementalLoading:(BOOL)fp12;
- (void)messagesWereAdded:(id)fp8 forIncrementalLoading:(BOOL)fp12;
- (void)updateUserInfoToLatestValues;
- (void)_setBackgroundColorForMessages:(id)fp8 textColorForMessages:(id)fp12;
- (void)_setFlagsForMessages:(id)fp8 mask:(unsigned long)fp12;
- (void)_setFlagsAndColorForMessages:(id)fp8;
- (id)fetchPipeline;
- (id)downloadCache;
- (id)messagesBeingRouted;
- (id)imapAccount;
- (id)offlineCache;
- (id)offlineCacheIfOffline;
- (BOOL)_shouldUpdateColorsAndAttachmentsAfterOpening;
- (BOOL)isALocalStore;
- (void)updateCountFromMailbox:(id)fp8;
- (void)processResponsesFromMailbox:(id)fp8;
- (void)updateUidValidityFromMailbox:(id)fp8;
- (void)_updateCountFromMailbox:(id)fp8;
- (void)_processResponsesFromMailbox:(id)fp8;
- (void)_updateUidValidityFromMailbox:(id)fp8;
- (void)updateSelectedGatewayFromMailbox:(id)fp8;

@end

@interface LibraryIMAPStore (ToDos)
- (BOOL)isMetadataStore;
- (BOOL)isToDoStore;
@end

@interface IMAPMessage (JustInCase)
- (void)setRemoteMessageStore:(id)fp8;
@end

@interface LibraryUpgrader : NSObject
{
    Library *_library;
    unsigned int _majorVersion;
    unsigned int _minorVersion;
    ActivityMonitor *_monitor;
    ActivityAggregate *_activity;
    id _delegate;
    struct sqlite3 *_upgraderWriterDB;
    BOOL _shouldFlushDB;
}

- (id)initWithLibrary:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (void)dealloc;
- (void)dispose;
- (id)monitor;
- (void)setMonitor:(id)fp8;
- (id)activity;
- (void)setActivity:(id)fp8;
- (id)status;
- (void)setStatus:(id)fp8;
- (void)setStatusOnMainThread:(id)fp8;
- (void)getVersionInfo;
- (void)executeSQL:(id)fp8 transacted:(BOOL)fp12;
- (BOOL)updateMinorVersion:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
- (void)executeSQL:(id)fp8 updateMinorVersion:(unsigned int)fp12;
- (void)bootstrapVersioningEngine;
- (void)vacuum;
- (void)dropTriggers;
- (void)createTriggers;
- (BOOL)canRun:(id *)fp8;
- (BOOL)needsRun;
- (void)upgradeSchema;
- (void)postUpgradeDataMigration;
- (void)incrementProgressIndicator;
- (void)run;
- (void)notifyDelegate:(id)fp8;
- (void)addMessageTypeFeedsAndToDos:(int)fp8;
- (void)addDocumentIDAndAssociations:(int)fp8;
- (void)upgradeToDosRelatedTables:(int)fp8;
- (void)addPositionToRecipients:(int)fp8;
- (void)populateRecipientPosition:(int)fp8;
- (void)giveDraftsUniqueIDs:(int)fp8;
- (void)upgradeFrom4_8To4_9:(int)fp8;
- (void)addSyncDataToToDosTables:(int)fp8;
- (BOOL)replaceRecipientsAddressRowID:(long)fp8 withRowID:(long)fp12 usingDB:(struct sqlite3 *)fp16;
- (BOOL)replaceMessagesSenderRowID:(long)fp8 withRowID:(long)fp12 usingDB:(struct sqlite3 *)fp16;
- (BOOL)replaceAddressRowID:(long)fp8 withRowID:(long)fp12 usingDB:(struct sqlite3 *)fp16;
- (long)getSurvivingRowIDForDuplicatedRowID:(long)fp8 dupAddress:(char *)fp12 dupComment:(char *)fp16 usingDB:(struct sqlite3 *)fp20;
- (void)upgradeEmailAddressROWIDsToCaseInsensitive:(struct sqlite3 *)fp8;
- (void)createCaseInsensitiveTemporaryAddressTable;
- (void)replaceAddressesTableWithAddressesTemp:(int)fp8 usingDB:(struct sqlite3 *)fp12;
- (void)upgradeFrom4_10To4_11:(int)fp8;
- (void)_moveUnreadCountsOutOfAttributes;
- (void)moveUnreadCountsOutOfAttributes:(int)fp8;
- (void)updateCalendarsWithNewCalStoreInformation:(int)fp8;
- (void)addToDosServerSnapshotTable:(int)fp8;
- (void)clearCalendarsOnStartup:(int)fp8;
- (void)dropRowIDBasedIndices:(int)fp8;
- (void)addDateStampToToDosTable:(int)fp8;
- (void)resetToDoReferencedMessageIdColumn:(int)fp8;
- (void)addMailboxIdToSnapshotTable:(int)fp8;
- (void)removeToDoSyncServicesInformation:(int)fp8;
- (void)addGroupToCalendarsTable:(int)fp8;
- (void)removeMailboxFromCalendarsTable:(int)fp8;
- (void)clearCalendarsGroupID:(int)fp8;
- (void)addPreviousToDoIDColumn:(int)fp8;
- (void)upgradeColumnWidthPrefs:(int)fp8;
- (void)makeToDoIDAndCalendarIDUnique:(int)fp8;
- (void)stampCurrentMinorVersion;
- (struct sqlite3 *)getReaderDB;
- (void)unlockReaderDB:(struct sqlite3 *)fp8;
- (struct sqlite3 *)getWriterDB;
- (void)unlockWriterDB:(struct sqlite3 *)fp8;
- (void)flushDBWhenDone;
- (void)_dispose;

@end

@interface MessageDetails : NSObject
{
    unsigned int libraryID;
    unsigned int messageFlags;
    unsigned int uid;
    unsigned int encoding;
    BOOL isInvalid;
}

+ (id)searchDetails:(id)fp8 forUid:(unsigned long)fp12 skippingUid:(unsigned long)fp16;
- (id)description;
- (unsigned long)uid;
- (id)init;

@end

@interface DataCollector : NSObject <DataConsumer>
{
    NSString *_path;
    NSString *_tmpPath;
    LibraryMessage *_message;
    NSString *_part;
    NSFileHandle *_fileHandle;
    unsigned int _length;
    NSDictionary *_plist;
    BOOL _isEmpty;
}

- (id)initWithMessage:(id)fp8 isPartial:(BOOL)fp12 part:(id)fp16;
- (void)appendData:(id)fp8;
- (void)setData:(id)fp8;
- (void)done;
- (void)dealloc;
- (void)finalize;

@end

@interface MatadorResultCollector : NSObject
{
    MessageCriterion *criterion;
    MessageCriterion *resultParent;
    NSString *expression;
    id <MessageConsumer> target;
    struct __MDQuery *query;
    NSMutableSet *seenItems;
    unsigned int options;
}

- (id)initWithCriterion:(id)fp8 resultParentCriterion:(id)fp12 target:(id)fp16 query:(struct __MDQuery *)fp20 expression:(id)fp24;
- (void)dealloc;
- (void)finalize;

@end

@interface MessageCollector : NSObject <MessageConsumer>
{
    NSMutableArray *messages;
}

- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)messages;
- (void)newMessagesAvailable:(id)fp8;
- (void)newMessagesAvailable:(id)fp8 ranks:(id)fp12;
- (BOOL)shouldCancel;

@end

@interface SqliteHandle : NSObject
{
    struct sqlite3 *db;
}

+ (id)handleForDB:(struct sqlite3 *)fp8;

@end

@interface Library : NSObject <LibraryInterface>
{
    int _status;
}

+ (id)sharedInstance;
+ (void)_commitMessages;
+ (void)commitMessage:(id)fp8 immediately:(BOOL)fp12;
+ (void)flagsChangedForMessages:(id)fp8 flags:(id)fp12 oldFlagsByMessage:(id)fp16;
+ (void)flagsChangedForMessages:(id)fp8 flags:(id)fp12 oldFlagsByMessage:(id)fp16 updateUnreadCount:(BOOL)fp20;
+ (id)commitTimer;
+ (void)setCommitTimer:(id)fp8;
+ (id)updateEmlxTimer;
+ (void)setUpdateEmlxTimer:(id)fp8;
+ (void)scheduleCommit;
+ (void)unScheduleCommit;
+ (void)scheduleMessageFileUpdate;
+ (void)unScheduleMessageFileUpdate;
+ (void)synchronouslyCommitTransaction;
+ (void)synchronouslyUpdateMessageFiles;
+ (void)commit;
+ (void)commitInBackground;
+ (void)updateMessageFilesInBackground;
+ (void)setFlags:(unsigned long)fp8 forMessage:(id)fp12;
+ (void)_setFlags:(id)fp8 forMessage:(id)fp12;
+ (void)_flushChangedFlags;
+ (void)setFlagsForMessages:(id)fp8 mask:(unsigned long)fp12;
+ (void)setFlagsForMessages:(id)fp8;
+ (void)setBackgroundColorForMessages:(id)fp8 textColorForMessages:(id)fp12;
+ (void)setFlagsAndColorForMessages:(id)fp8;
+ (void)updateEncodingForMessage:(id)fp8;
+ (id)stringToCreateToDoTables;
+ (id)stringToCreateToDosServerSnapshotTable;
+ (BOOL)initializeDatabase:(struct sqlite3 *)fp8;
+ (void)initialize;
+ (BOOL)setupLibrary;
+ (void)_mailboxWillBeInvalidated:(id)fp8;
+ (void)_mailboxWasRenamed:(id)fp8;
+ (id)plistDataForMessage:(id)fp8 subject:(id)fp12 sender:(id)fp16 to:(id)fp20 dateSent:(id)fp24 remoteID:(id)fp28 originalMailbox:(id)fp32 flags:(unsigned long long)fp36 mergeWithDictionary:(id)fp44;
+ (BOOL)_writeEmlxFile:(id)fp8 forMessage:(id)fp12 withEmlxData:(id)fp16;
+ (BOOL)_writeEmlxFile:(id)fp8 forMessage:(id)fp12 withBodyData:(id)fp16 plistData:(id)fp20;
+ (void)touchDirectoryForMailbox:(id)fp8;
+ (BOOL)isIMAPAccount:(id)fp8;
+ (BOOL)isLocalAccount:(id)fp8;
+ (BOOL)isLibraryMessage:(id)fp8;
+ (BOOL)canUseEmlxFileWhenCopyingMessage:(id)fp8 fromAccount:(id)fp12 toAccount:(id)fp16;
+ (void)cleanupTablesReferencingMessageID:(unsigned int)fp8 inDatabase:(struct sqlite3 *)fp12;
+ (id)insertOrUpdateMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 isInitialImport:(BOOL)fp20 oldMessagesByNewMessage:(id)fp24 remoteIDs:(id)fp28 newDocumentIDs:(id)fp32 setFlags:(unsigned long long)fp36 clearFlags:(unsigned long long)fp44 messageFlagsForMessages:(id)fp52 copyFiles:(BOOL)fp56 progressDelegate:(id)fp60 updateRowIDs:(id)fp64;
+ (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 isInitialImport:(BOOL)fp20 oldMessagesByNewMessage:(id)fp24 remoteIDs:(id)fp28 setFlags:(unsigned long long)fp32 clearFlags:(unsigned long long)fp40 messageFlagsForMessages:(id)fp48 copyFiles:(BOOL)fp52;
+ (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 isInitialImport:(BOOL)fp20 oldMessagesByNewMessage:(id)fp24;
+ (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 oldMessagesByNewMessage:(id)fp20;
+ (id)addMessages:(id)fp8 withMailbox:(id)fp12 progressDelegate:(id)fp16;
+ (id)addMessages:(id)fp8 withMailbox:(id)fp12;
+ (id)duplicateMessages:(id)fp8 newRemoteIDs:(id)fp12 newDocumentIDs:(id)fp16 forMailbox:(id)fp20 setFlags:(unsigned long long)fp24 clearFlags:(unsigned long long)fp32 messageFlagsForMessages:(id)fp40 createNewCacheFiles:(BOOL)fp44;
+ (id)duplicateMessages:(id)fp8 newRemoteIDs:(id)fp12 newDocumentIDs:(id)fp16 forMailbox:(id)fp20 setFlags:(unsigned long long)fp24 clearFlags:(unsigned long long)fp32 createNewCacheFiles:(BOOL)fp40;
+ (void)setAttachmentNames:(id)fp8 forMessage:(id)fp12;
+ (void)setThreadPriority:(int)fp8;
+ (int)threadPriority;
+ (unsigned int)updateSequenceNumber;
+ (unsigned int)accessSequenceNumber;
+ (void)_rebuildActiveAccountsClause;
+ (void)_rebuildActiveNoteMailboxesClause;
+ (void)_rebuildAccountClauses;
+ (id)activeNoteMailboxesClause;
+ (void)setActiveNoteMailboxesClause:(id)fp8;
+ (void)sendMessagesMatchingQuery:(const char *)fp8 to:(id)fp12 options:(unsigned int)fp16;
+ (id)messagesMatchingQuery:(const char *)fp8 options:(unsigned int)fp12;
+ (id)messagesWhere:(id)fp8 sortedBy:(id)fp12 options:(unsigned int)fp16;
+ (void)sendMessagesForMailbox:(id)fp8 where:(id)fp12 sortedBy:(id)fp16 ascending:(BOOL)fp20 to:(id)fp24 options:(unsigned int)fp28;
+ (id)messagesForMailbox:(id)fp8 where:(id)fp12 sortedBy:(id)fp16 ascending:(BOOL)fp20 options:(unsigned int)fp24;
+ (id)messagesForMailbox:(id)fp8 olderThanNumberOfDays:(int)fp12;
+ (id)unreadMessagesForMailbox:(id)fp8;
+ (void)gatherCountsForMailbox:(id)fp8 totalCount:(unsigned long *)fp12 unreadCount:(unsigned long *)fp16 deletedCount:(unsigned long *)fp20 totalSize:(unsigned long long *)fp24;
+ (unsigned int)unreadCountForMessageType:(int)fp8;
+ (unsigned int)unreadCountForMailbox:(id)fp8;
+ (unsigned int)deletedCountForMailbox:(id)fp8;
+ (id)messageWithRemoteID:(id)fp8 inRemoteMailbox:(id)fp12;
+ (unsigned int)maximumRemoteIDForMailbox:(id)fp8;
+ (id)getDetailsForMessagesWithRemoteIDs:(id)fp8 fromMailbox:(id)fp12;
+ (void)setStoresForMessages:(id)fp8;
+ (void)setStoreForMessage:(id)fp8 knownStores:(id)fp12;
+ (id)messageWithMessageID:(id)fp8;
+ (id)messagesWithMessageIDHeader:(id)fp8;
+ (id)messageWithLibraryID:(unsigned int)fp8 options:(unsigned int)fp12;
+ (id)messageWithLibraryID:(unsigned int)fp8;
+ (id)residentMessages;
+ (void)_addMessageToResidentMessages:(id)fp8;
+ (void)removeMessageFromResidentMessagesWithLibraryID:(unsigned int)fp8;
+ (id)_residentMessageForLibraryID:(unsigned int)fp8;
+ (id)messagesInSameThreadAsMessages:(id)fp8 seenMessageIDs:(id)fp12 options:(unsigned int)fp16 db:(struct sqlite3 *)fp20;
+ (id)messagesInSameThreadAsMessages:(id)fp8 options:(unsigned int)fp12;
+ (id)firstReplyToMessage:(id)fp8;
+ (BOOL)messageHasRelatedNonJunkMessages:(id)fp8;
+ (BOOL)_createTable:(char ***)fp8 fromQuery:(id)fp12 monitor:(id)fp16;
+ (id)stringForQuery:(id)fp8 monitor:(id)fp12;
+ (id)stringForQuery:(id)fp8;
+ (unsigned int)unsignedForQuery:(id)fp8 monitor:(id)fp12;
+ (char *)bytesForQuery:(id)fp8;
+ (void)performQuery:(id)fp8;
+ (id)referencesForLibraryID:(unsigned int)fp8;
+ (id)urlForMailboxID:(unsigned int)fp8;
+ (id)mailboxUidForMessage:(id)fp8 lock:(BOOL)fp12;
+ (id)mailboxUidForMessage:(id)fp8;
+ (id)remoteStoreForMessage:(id)fp8;
+ (id)accountForMessage:(id)fp8;
+ (id)mailboxNameForMessage:(id)fp8;
+ (BOOL)_loadSecondaryMetadataForMessage:(id)fp8 fromDB:(struct sqlite3 *)fp12;
+ (BOOL)loadSecondaryMetadataForMessage:(id)fp8;
+ (void)reloadMessage:(id)fp8;
+ (void)updateFileForMessage:(id)fp8;
+ (BOOL)shouldCancel;
+ (void)messagesWereCompacted:(id)fp8 mailboxes:(id)fp12;
+ (void)compactMessages:(id)fp8;
+ (void)cleanupToDosTables;
+ (void)compactMailbox:(id)fp8;
+ (id)mailboxUidForURL:(id)fp8;
+ (BOOL)renameMailboxes:(id)fp8 to:(id)fp12;
+ (void)deleteMailboxes:(id)fp8;
+ (id)messagesWithMessageID:(id)fp8 inMailbox:(id)fp12;
+ (id)lastMessageWithMessageID:(id)fp8 inMailbox:(id)fp12;
+ (void)addFeed:(id)fp8 forMailbox:(id)fp12;
+ (void)deleteFeedForMailbox:(id)fp8;
+ (BOOL)containsFeedWithURLString:(id)fp8;
+ (id)feedURLStringForMailbox:(id)fp8;
+ (id)mailboxURLStringForFeed:(id)fp8;
+ (id)articlesByRemoteIDForRemoteIDs:(id)fp8;
+ (id)noteWithDocumentID:(id)fp8;
+ (void)setLastReceivedArticlesDate:(id)fp8;
+ (id)lastReceivedArticlesDate;
+ (void)removeRemoteIDsFromRSSArticlesInMessages:(id)fp8;
+ (id)dataPathForMessage:(id)fp8 type:(int)fp12;
+ (id)dataPathForMessage:(id)fp8;
+ (id)attachmentsDirectoryForLibraryID:(unsigned int)fp8 mailboxID:(unsigned int)fp12;
+ (id)realDataPathForMessage:(id)fp8;
+ (id)messageWithDataPath:(id)fp8;
+ (id)dataConsumerForMessage:(id)fp8 part:(id)fp12;
+ (id)dataConsumerForMessage:(id)fp8 isPartial:(BOOL)fp12;
+ (id)dataConsumerForMessage:(id)fp8;
+ (void)setData:(id)fp8 forMessage:(id)fp12 isPartial:(BOOL)fp16;
+ (id)bodyDataAtPath:(id)fp8 headerData:(id *)fp12;
+ (id)headerDataForMessage:(id)fp8;
+ (id)bodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
+ (id)bodyDataForMessage:(id)fp8;
+ (id)fullBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;
+ (id)fullBodyDataForMessage:(id)fp8;
+ (id)dataForMimePart:(id)fp8;
+ (BOOL)isMessageContentsLocallyAvailable:(id)fp8;
+ (id)_messageDataAtPath:(id)fp8;
+ (id)fullMessageDataForMessage:(id)fp8;
+ (BOOL)hasCacheFileForMessage:(id)fp8 directoryContents:(id)fp12;
+ (BOOL)hasCacheFileForMessage:(id)fp8 part:(id)fp12 directoryContents:(id)fp16;
+ (void)_markMessageAsViewed:(id)fp8 viewedDate:(id)fp12;
+ (void)markMessageAsViewed:(id)fp8;
+ (id)queryForCriterion:(id)fp8 options:(unsigned int)fp12 baseTable:(unsigned int)fp16 isSubquery:(BOOL)fp20;
+ (id)queryForCriterion:(id)fp8 options:(unsigned int)fp12 baseTable:(unsigned int)fp16;
+ (id)queryForCriterion:(id)fp8 options:(unsigned int)fp12;
+ (void)shouldCancelMDQuery:(struct __MDQuery *)fp8;
+ (void)sendMessagesMatchingCriterion:(id)fp8 to:(id)fp12 options:(unsigned int)fp16;
+ (id)messagesMatchingCriterion:(id)fp8 options:(unsigned int)fp12;
+ (unsigned int)countForCriterion:(id)fp8 monitor:(id)fp12;
+ (unsigned int)countForCriterion:(id)fp8;
+ (id)filterContiguousMessages:(id)fp8 forCriterion:(id)fp12 options:(unsigned int)fp16;
+ (BOOL)rebuildMailbox:(id)fp8;
+ (BOOL)importMailbox:(id)fp8;
+ (BOOL)importing;
+ (BOOL)importEverythingIncludingDisabledAccounts:(BOOL)fp8;
+ (void)_upgradeMessageDirectoriesSynchronously;
+ (void)upgradeMessageDirectoriesIfNeeded;
+ (void)takeAccountsOnlineAllAccounts:(BOOL)fp8;
+ (BOOL)libraryExists;
+ (BOOL)fileExists;
+ (void)dispose;
+ (int)libraryStatus;
+ (BOOL)importableDataExists;
+ (id)currentMailbox;
+ (unsigned int)indexOfCurrentMailbox;
+ (unsigned int)totalNumberOfMailboxes;
+ (unsigned int)indexOfCurrentMessage;
+ (unsigned int)runningIndexOfCurrentMessage;
+ (unsigned int)messagesInMailbox;
+ (unsigned int)totalNumberOfMessages;
+ (void)cleanOldDatabases;
+ (id)storeForMailboxID:(unsigned int)fp8;
+ (void)prepareToReImportMessages;
+ (id)todosForMessage:(id)fp8;
+ (id)messageForToDo:(id)fp8;
+ (int)rowIdSequenceNumberForMessage:(id)fp8;
+ (void)todosDidChangeForMessages:(id)fp8 oldToDosByMessage:(id)fp12 newToDosByMessage:(id)fp16;
+ (BOOL)addToDo:(id)fp8;
+ (int)insertToDoAlarms:(id)fp8 withToDoID:(unsigned int)fp12 usingDB:(struct sqlite3 *)fp16;
+ (int)insertNotesInToDo:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)todoWithLibraryID:(unsigned int)fp8;
+ (id)todoWithLibraryID:(unsigned int)fp8 options:(unsigned int)fp12;
+ (id)todoWithID:(id)fp8;
+ (id)todoWithID:(id)fp8 remoteID:(id)fp12;
+ (id)todoWithID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
+ (id)libraryToDoWithRemoteID:(id)fp8 inMailbox:(unsigned int)fp12;
+ (id)lastToDoWithID:(id)fp8 inMailbox:(id)fp12;
+ (id)alarmsForToDo:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (BOOL)updateToDo:(id)fp8;
+ (int)setAlarmsForToDo:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (int)updateNotesInToDo:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (BOOL)deleteToDo:(id)fp8;
+ (int)deleteNotesInToDo:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (int)addToDoToDeletedLog:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (int)removeToDoFromDeletedLog:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (BOOL)addToDos:(id)fp8;
+ (BOOL)deleteToDos:(id)fp8;
+ (BOOL)updateToDos:(id)fp8;
+ (id)allToDos;
+ (id)allToDosInMailboxes:(id)fp8;
+ (id)todoIDsMatchingCriterion:(id)fp8;
+ (id)todosForSearchDataArray:(id)fp8;
+ (unsigned int)countToDosMatchingCriterion:(id)fp8;
+ (id)findToDoIDForAlarmID:(id)fp8;
+ (id)listOfToDoIDsInCalendarWithID:(id)fp8;
+ (id)allToDosForMailboxID:(unsigned int)fp8;
+ (id)allToDosForDocumentID:(id)fp8;
+ (BOOL)updateToDo:(id)fp8 toRemoteID:(id)fp12;
+ (id)searchDataForAllToDosInMailboxID:(unsigned int)fp8;
+ (unsigned int)mailboxIDForMailboxUid:(id)fp8 loadIfNotPresent:(BOOL)fp12;
+ (id)mailboxUidForMailboxID:(unsigned int)fp8 forceCreation:(BOOL)fp12;
+ (id)_mailboxUidForMailboxID:(unsigned int)fp8 forceCreation:(BOOL)fp12 usingReaderDB:(struct sqlite3 *)fp16;
+ (id)_getMailboxUidForMailboxID:(unsigned int)fp8 forceCreation:(BOOL)fp12 usingDB:(struct sqlite3 *)fp16;
+ (void)removeCachedMailboxUid:(id)fp8;
+ (unsigned int)mailboxIDForMailboxUid:(id)fp8;
+ (unsigned int)cachedMailboxIDForMailboxUid:(id)fp8;
+ (void)_setMailboxIDForMailboxUid:(id)fp8 to:(id)fp12;
+ (void)setMailboxIDForMailboxUid:(id)fp8 to:(id)fp12;
+ (unsigned int)toDoMailboxIdForMailAccountURLString:(id)fp8;
+ (unsigned int)toDoMailboxIdForMailAccount:(id)fp8;
+ (unsigned int)toDoMailboxIDForIncompleteMailAccount:(id)fp8;
+ (id)allToDoIDsAndRemoteIDsForMailboxID:(unsigned int)fp8;
+ (BOOL)addCalendars:(id)fp8;
+ (BOOL)updateCalendars:(id)fp8;
+ (BOOL)deleteCalendars:(id)fp8;
+ (id)allToDoCalendars;
+ (id)allUniqueToDoCalendars;
+ (BOOL)hasToDoWithIDBeenDeleted:(id)fp8;
+ (id)deletedToDoIDsForDocumentID:(id)fp8;
+ (unsigned int)maximumToDoRemoteIDForMailbox:(id)fp8;
+ (id)getDetailsForToDosWithRemoteIDInRange:(struct _NSRange)fp8 fromMailbox:(id)fp16;
+ (int)rowIdSequenceNumberForMessageNumber:(unsigned int)fp8;
+ (id)sqlSanitizeNSString:(id)fp8;
- (int)status;
- (void)setStatus:(int)fp8;
- (void)dealloc;

@end

@interface ToDoIDSearchData : NSObject
{
    unsigned int _todoRowID;
    NSString *_todoID;
}

- (void)dealloc;
- (unsigned int)todoRowID;
- (void)setTodoRowID:(unsigned int)fp8;
- (id)todoID;
- (void)setTodoID:(id)fp8;

@end

@interface LibraryToDo (DatabaseInit)
- (id)initForLibrary;
@end

@interface Library (ToDoServerSnapshot)
+ (BOOL)todoUIDExists:(id)fp8 forMailboxID:(unsigned int)fp12;
+ (id)todoUIDForRemoteID:(id)fp8 forMailboxID:(unsigned int)fp12;
+ (id)remoteIDForToDoUID:(id)fp8 forMailboxID:(unsigned int)fp12;
+ (id)addToDoUID:(id)fp8 withRemoteID:(id)fp12 forMailboxID:(unsigned int)fp16;
+ (id)removeToDoUID:(id)fp8 forMailboxID:(unsigned int)fp12;
+ (id)setStateUsingSnapshot:(id)fp8 forMailboxID:(unsigned int)fp12;
+ (id)snapshotForMailboxID:(unsigned int)fp8;
+ (id)outdatedDuplicateToDosForMailboxID:(unsigned int)fp8;
@end

@interface IMAPStore : MessageStore <NSCoding>
{
    NSMutableArray *_unsolicitedResponses;
    NSString *_statusMessageFormat;
    int _statusMessageCount;
    int _statusMessageMaximum;
    int _activityMonitorKey;
    unsigned int _numberOfFirstNewMessage;
    unsigned int _synchronizationState:3;
    unsigned int _supportsCustomPermanentFlags:1;
    unsigned int _supportsJunkFlag:1;
    unsigned int _supportsDollarJunkFlag:1;
    unsigned int _supportsNotJunkFlag:1;
    unsigned int _supportsDollarNotJunkFlag:1;
    unsigned int _supportsForwardedFlag:1;
    unsigned int _supportsDollarForwardedFlag:1;
    unsigned int _updateIndex:1;
    unsigned int _updateEverythingElse:1;
    unsigned int _reserved:19;
    NSString *_mailboxName;
    NSConditionLock *_synchronizationStateLock;
    NSMutableDictionary *_headersForMessagesBeingRouted;
    NSSet *_cachedContents;
    NSDate *_cachedDirModDate;
    NSMutableDictionary *_recentFlagChangesByMessage;
}

+ (void)initialize;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (void)dealloc;
- (void)finalize;
- (void)_copyDataFrom:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)_dataForMessage:(id)fp8 readHeadersOnly:(BOOL)fp12;
- (id)_fetchHeaderDataForMessage:(id)fp8;

@end

@interface IMAPSizeEngine : SizeEngine
{
    unsigned int _quotaStatus:3;
    struct __CFDictionary *_usageByMailboxUid;
    NSMutableDictionary *_mailboxesByQuotaRoot;
    NSMutableArray *_mailboxesToSize;
    NSMutableArray *_quotasToFetch;
    NSMutableSet *_observedIMAPMailboxes;
    NSMutableSet *_observedIMAPQuotaRoots;
}

- (id)initWithIMAPAccount:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)_addUsageInfoFromMailbox:(id)fp8;
- (void)_addQuotaRootsFromMailbox:(id)fp8;
- (BOOL)_changeUsageInfo:(CDAnonymousStruct3 *)fp8 forMailboxUid:(id)fp12 refetchQuotas:(BOOL)fp16;
- (void)_changeQuotaRoots:(id)fp8 forMailboxUid:(id)fp12;
- (void)_sizeChangedForMailboxUid:(id)fp8;
- (void)_mailboxSizeChanged:(id)fp8;
- (void)handleMailboxSizeChanged:(id)fp8;
- (void)_mailbox:(id)fp8 didRemoveUsage:(id)fp12 fromQuotaRoots:(id)fp16;
- (void)_mailboxBecameInvalid:(id)fp8;
- (void)_refetchListing:(id)fp8;
- (void)_getSizeForMailboxUid:(id)fp8;
- (void)_runWorkerThread;
- (BOOL)_prepareToRefresh;
- (BOOL)_shouldStartWorkerThread;
- (int)quotaStatus;
- (id)quotaNames;
- (id)usageForMailbox:(id)fp8;
- (id)usageForQuotaName:(id)fp8;
- (id)mutableCopyOfMailboxesForQuotaName:(id)fp8;
- (BOOL)mailbox:(id)fp8 usesQuotaName:(id)fp12;

@end

@interface POPSizeEngine : SizeEngine
{
    NSMutableDictionary *_infoByMessageID;
}

- (id)initWithPOPAccount:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)allMessageIDs;
- (id)infoWithKey:(id)fp8 forMessageWithID:(id)fp12;
- (id)_createMessageInfoFromMessageHeaders:(id)fp8;
- (id)_remoteMailboxURL;
- (void)_runWorkerThread;
- (BOOL)_prepareToRefresh;
- (BOOL)_shouldStartWorkerThread;
- (void)_fetchCompleted:(id)fp8;
- (void)_deleteServerMessagesCompleted:(id)fp8;
- (void)_messageFlagsChanged:(id)fp8;

@end

@interface RecoveredMessage : Message
{
    NSString *_path;
    NSString *_remoteID;
    NSString *_remoteMailboxURL;
    NSString *_originalMailboxURL;
    MessageHeaders *_headers;
    unsigned int _size;
    CDAnonymousStruct4 _imapFlags;
    NSData *_data;
    unsigned int _loadedFileData:1;
}

- (void)_loadFileDataIfNeeded;
- (id)initWithPath:(id)fp8;
- (id)messageID;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;
- (id)headerData;
- (id)headers;
- (id)messageDataIncludingFromSpace:(BOOL)fp8 newDocumentID:(id)fp12;
- (id)bodyData;
- (id)dataForMimePart:(id)fp8;
- (BOOL)hasCachedDataForMimePart:(id)fp8;
- (id)messageBody;
- (id)messageBodyUpdatingFlags:(BOOL)fp8;
- (id)messageBodyIfAvailableUpdatingFlags:(BOOL)fp8;
- (CDAnonymousStruct4)imapFlags;
- (unsigned long)messageFlags;
- (CDAnonymousStruct6)moreMessageFlags;
- (void)dealloc;
- (void)finalize;
- (void)flushCachedData;
- (BOOL)setMessageID:(unsigned int)fp8 directory:(id)fp12;

@end

@interface RecoveredStore : MessageStore
{
    NSArray *_pathsToImport;
}

- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12 pathsToImport:(id)fp16;
- (void)dealloc;
- (id)messagesForImporter;

@end

@interface ParentalControlAccount : LocalAccount
{
}

+ (id)parentalControlAccount;
+ (id)originalAccountForIncomingMailbox:(id)fp8;
+ (id)allMailboxes;
+ (id)mailboxForAccount:(id)fp8;
+ (id)storeForMailbox:(id)fp8;
+ (id)storeForAccount:(id)fp8;
+ (id)_mailboxNameForAccount:(id)fp8;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;

@end

@interface ParentalControlManager : NSObject
{
    NSMutableSet *_pcStores;
    InvocationQueue *_tasks;
    NSDate *_lastCleanupDate;
    NSMutableArray *_recentRequests;
    BOOL _recentRequestsDirty;
    NSMutableSet *_pendingRequests;
}

+ (id)sharedManager;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)parentalControlDirectory;
- (BOOL)isInSpamProtectionMode;
- (id)headersRequiredForParentalControl;
- (void)deleteAccount:(id)fp8;
- (void)_cleanupPCStoresAfterDelay:(double)fp8;
- (void)_approveSenders:(id)fp8 sourcePCMailbox:(id)fp12 destinationAccount:(id)fp16;
- (void)_rejectSenders:(id)fp8 sourcePCMailbox:(id)fp12;
- (id)_openStoreForPCMailbox:(id)fp8 keepOpen:(BOOL)fp12;
- (id)_openStoreForPCMailbox:(id)fp8;
- (id)_openPCStoreForAccount:(id)fp8;
- (id)_makeRequestMessageForMessage:(id)fp8 isOutgoingMessage:(BOOL)fp12;
- (id)_deliverMessage:(id)fp8;
- (id)_recentRequestsFilePath;
- (id)_recentRequestsNoLock;
- (BOOL)_hasRecentlySentPermissionRequestForSender:(id)fp8;
- (void)_removeSendersFromRecentRequests:(id)fp8;
- (BOOL)_hasPendingRequestForSender:(id)fp8;
- (void)_requestApprovalForIncomingMessage:(id)fp8 srcStore:(id)fp12 pcStore:(id)fp16 messageInPCStore:(id)fp20;
- (void)_reallyRequestApprovalForIncomingMessage:(id)fp8 srcStore:(id)fp12 pcStore:(id)fp16 messageInPCStore:(id)fp20;
- (void)_approveAddresses:(id)fp8 responseFromAccount:(id)fp12;
- (void)_rejectAddresses:(id)fp8 responseFromAccount:(id)fp12;
- (void)_cleanupPCStore:(id)fp8;
- (void)_reallyCleanupPCStores;
- (void)_cleanupPCStores;
- (BOOL)processIncomingMessage:(id)fp8 messageIsParentResponse:(char *)fp12;
- (BOOL)haveEmailsBeenApproved:(id)fp8 unapprovedOnes:(id)fp12;
- (void)_deliverApprovalRequestMessage:(id)fp8 forOutgoingMessage:(id)fp12;
- (void)_requestApprovalForOutgoingMessage:(id)fp8 srcStore:(id)fp12;
- (BOOL)requestApprovalForOutgoingMessage:(id)fp8;
- (void)saveChanges;
- (id)_makeResponseMessageToRequest:(id)fp8 approve:(BOOL)fp12;
- (void)_deliverResponseMessage:(id)fp8 requestMessage:(id)fp12;
- (BOOL)_respondToRequest:(id)fp8 approve:(BOOL)fp12;
- (BOOL)approveRequest:(id)fp8;
- (BOOL)rejectRequest:(id)fp8;
- (BOOL)isEmail:(id)fp8 inEmailList:(id)fp12;
- (void)_approveEmailListChanged:(id)fp8;

@end

@interface MessageStore (ParentalControl)
- (void)setPermissionRequestState:(int)fp8 forMessage:(id)fp12;
@end

@interface Message (ParentalControl)
- (BOOL)isParentResponseMessage:(char *)fp8 isRejected:(char *)fp12 requestedAddresses:(id)fp16 requestIsForSenders:(char *)fp20;
- (BOOL)isChildRequestMessage:(id)fp8 requestIsForSenders:(char *)fp12 childAddress:(id *)fp16 permissionRequestState:(int *)fp20;
- (BOOL)isChildRequestMessage;
@end

@interface ParentalControlSettings : NSObject
{
}

+ (void)initialize;
+ (id)sharedInstance;
+ (BOOL)isEmail:(id)fp8 inEmailList:(id)fp12;
- (void)_updateCachedDataForEnabledState:(BOOL)fp8 approvedList:(BOOL)fp12 postNotification:(BOOL)fp16;
- (void)_reallyHandleDefaultsChange;
- (void)_defaultsDidChange;
- (void)_approveEmailListChanged:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (BOOL)isInSpamProtectionMode;
- (id)parentEmails;
- (BOOL)isParentEmail:(id)fp8;
- (BOOL)_isSelfEmail:(id)fp8;
- (id)_approvedEmails;
- (BOOL)hasEmailBeenApproved:(id)fp8;
- (BOOL)haveEmailsBeenApproved:(id)fp8 unapprovedOnes:(id)fp12;
- (id)_dictionaryFromEmail:(id)fp8;
- (BOOL)_approveEmail:(id)fp8;
- (id)approveEmails:(id)fp8;
- (BOOL)_rejectEmail:(id)fp8;
- (id)rejectEmails:(id)fp8;
- (double)parentalControlEnabledTimeIntervalSince1970;

@end

@interface ParentalControlStore : NeXTMbox
{
}

- (BOOL)_shouldCallCompactWhenClosing;
- (id)_defaultRouterDestination;
- (id)realAccount;
- (void)setParentalControlMessageState:(int)fp8 forMessage:(id)fp12;
- (void)setParentalControlMessageState:(int)fp8 forMessages:(id)fp12;
- (void)saveChanges;

@end

@interface NTLMAuthenticator : SASLAuthenticator
{
    struct NtlmGenerator *_ntlmGeneratorRef;
    int _ntlmError;
}

- (void)dealloc;
- (void)finalize;
- (void)setAuthenticationState:(int)fp8;
- (id)responseForServerData:(id)fp8;

@end

@interface NTLMAuthScheme : AuthScheme
{
}

+ (void)initialize;
- (Class)authenticatorClassForAccount:(id)fp8;
- (BOOL)requiresDomain;
- (id)name;
- (id)humanReadableName;
- (BOOL)sendsPlainTextPasswords;
- (BOOL)hasEncryption;
- (unsigned int)securityLevel;

@end

@interface NTLMAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface NSString (iCalInvitationSupport)
- (BOOL)isICalInvitation;
@end

@interface NSFileWrapper (iCalInvitationSupport)
- (BOOL)isICalInvitation;
- (void)setIsICalInvitation:(BOOL)fp8;
@end

@interface NSTextAttachment (iCalInvitationSupport)
- (BOOL)isICalInvitation;
@end

@interface NSTableView (MailAdditions)
- (int)firstmostSelectedRow;
- (int)lastmostSelectedRow;
- (BOOL)isSelectionVisible;
- (void)showSelectionAndCenter:(BOOL)fp8;
- (void)scrollRowToVisible:(int)fp8 position:(int)fp12;
@end

@interface IMAPFetchResult : NSObject
{
    int _itemType;
    union {
        NSArray *envelope;
        NSString *internalDate;
        unsigned int messageSize;
        NSArray *bodyStructure;
        struct {
            NSString *section;
            unsigned int startOffset;
            NSData *sectionData;
        } bodySectionInfo;
        unsigned int uid;
        NSArray *flags;
    } _typeSpecific;
}

- (id)initWithType:(int)fp8;
- (void)dealloc;
- (int)type;
- (BOOL)needsLineEndingConversion;
- (id)envelope;
- (void)setEnvelope:(id)fp8;
- (id)internalDate;
- (void)setInternalDate:(id)fp8;
- (id)fetchData;
- (void)setFetchData:(id)fp8;
- (unsigned long)messageSize;
- (void)setMessageSize:(unsigned long)fp8;
- (id)bodyStructure;
- (void)setBodyStructure:(id)fp8;
- (unsigned long)startOffset;
- (void)setStartOffset:(unsigned long)fp8;
- (id)section;
- (void)setSection:(id)fp8;
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;
- (id)flagsArray;
- (void)setFlagsArray:(id)fp8;
- (unsigned long)encoding;
- (unsigned long)messageFlags;
- (id)description;

@end

@interface IMAPCompoundDownload : IMAPDownload
{
    NSMutableArray *_subdownloads;
}

- (id)createClone;
- (void)dealloc;
- (id)subdownloads;
- (void)addSubdownload:(id)fp8;
- (void)removeSubdownload:(id)fp8;
- (void)addCommandsToPipeline:(id)fp8 withCache:(id)fp12;
- (void)processResults;
- (BOOL)isComplete;
- (id)error;
- (unsigned long)bytesFetched;
- (unsigned long)expectedLength;

@end

@interface IMAPSimpleDownload : IMAPDownload
{
    NSMutableData *_mdata;
    MFError *_error;
    unsigned int _length:32;
    BOOL _knownLength;
    BOOL _complete;
    unsigned int _bytesFetched;
    NSString *_partSectionSpecifier;
    int _textSectionSpecifier;
}

- (id)initWithUid:(unsigned long)fp8 partSectionSpecifier:(id)fp12 textSectionSpecifier:(int)fp16 estimatedLength:(unsigned long)fp20;
- (id)initWithUid:(unsigned long)fp8 partSectionSpecifier:(id)fp12 textSectionSpecifier:(int)fp16 length:(unsigned long)fp20;
- (id)createClone;
- (void)dealloc;
- (unsigned long)bytesFetched;
- (unsigned long)expectedLength;
- (void)handleFetchResult:(id)fp8;
- (void)processResults;
- (void)addCommandsToPipeline:(id)fp8 withCache:(id)fp12;
- (BOOL)isComplete;
- (id)data;
- (id)error;
- (void)setError:(id)fp8;
- (int)textSectionSpecifier;
- (void)setTextSectionSpecifier:(int)fp8;
- (id)partSectionSpecifier;
- (void)setPartSectionSpecifier:(id)fp8;

@end

@interface IMAPDownload : NSObject
{
    unsigned int _uid;
    NSMutableArray *_pendingFetchResults;
}

- (void)dealloc;
- (id)initWithUid:(unsigned long)fp8;
- (id)createClone;
- (unsigned long)uid;
- (unsigned long)expectedLength;
- (BOOL)isComplete;
- (unsigned long)bytesFetched;
- (id)data;
- (id)error;
- (void)setError:(id)fp8;
- (void)handleFetchResult:(id)fp8;
- (void)processResults;
- (void)addCommandsToPipeline:(id)fp8 withCache:(id)fp12;

@end

@interface _IMAPFetchUnit : NSObject
{
    unsigned int _uid;
    IMAPClientFetchDataItem *_fetchItem;
    IMAPFetchResult *_expectedFetchResult;
}

- (void)dealloc;
- (void)_setupExpectedFetchResult;
- (BOOL)matchesFetchResponse:(id)fp8;
- (id)createFailedFetchResponse;
- (id)expectedFetchResult;
- (void)setExpectedFetchResult:(id)fp8;
- (id)fetchItem;
- (void)setFetchItem:(id)fp8;
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;

@end

@interface IMAPCommandPipeline : NSObject
{
    unsigned int _chunkSize;
    unsigned int _expectedSize;
    BOOL _isSending;
    BOOL _isFull;
    NSMutableArray *_fetchUnits;
    double _startedSendingTime;
}

- (void)dealloc;
- (void)addFetchCommandForUid:(unsigned long)fp8 fetchItem:(id)fp12 expectedLength:(unsigned long)fp16;
- (void)_removeFetchUnitMatchingResponse:(id)fp8;
- (id)failureResponsesFromSendingCommandsWithGateway:(id)fp8 responseHandler:(id)fp12 highPriority:(BOOL)fp16;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (double)startedSendingTime;
- (void)setStartedSendingTime:(double)fp8;
- (id)fetchUnits;
- (void)setFetchUnits:(id)fp8;
- (BOOL)isFull;
- (void)setIsFull:(BOOL)fp8;
- (BOOL)isSending;
- (void)setIsSending:(BOOL)fp8;
- (unsigned long)expectedSize;
- (void)setExpectedSize:(unsigned long)fp8;
- (unsigned long)chunkSize;
- (void)setChunkSize:(unsigned long)fp8;

@end

@interface IMAPDownloadCache : NSObject <IMAPResponseHandler>
{
    NSMutableArray *_downloads;
}

- (void)dealloc;
- (struct _NSRange)_lockedFindRangeOfDownloadsWithUid:(unsigned long)fp8;
- (id)downloadForMessage:(id)fp8;
- (id)_getDownloadForUid:(unsigned long)fp8 partSectionSpecifier:(id)fp12 textSectionSpecifier:(int)fp16 length:(unsigned long)fp20 estimatedLength:(unsigned long)fp24;
- (id)downloadForUid:(unsigned long)fp8 partSectionSpecifier:(id)fp12 textSectionSpecifier:(int)fp16 length:(unsigned long)fp20;
- (id)downloadForUid:(unsigned long)fp8 partSectionSpecifier:(id)fp12 textSectionSpecifier:(int)fp16 expectedLength:(unsigned long)fp20;
- (void)_lockedUpdateDownloadsInRange:(struct _NSRange)fp8 fetchResults:(id)fp16 error:(id)fp20;
- (BOOL)handleResponse:(id)fp8;
- (void)handleFetchResponse:(id)fp8 forUid:(unsigned long)fp12;
- (void)handleFetchResponses:(id)fp8;
- (void)processResultsForUid:(unsigned long)fp8;
- (void)cleanUpDownloadsForUid:(unsigned long)fp8;
- (void)addDownload:(id)fp8 forUid:(unsigned long)fp12;
- (void)_lockedAddDownload:(id)fp8 atIndex:(unsigned int)fp12 forUid:(unsigned long)fp16;
- (void)addCommandsForDownload:(id)fp8 toPipeline:(id)fp12;

@end

@interface IMAPMessageDownload : IMAPCompoundDownload
{
    id <IMAPObject> _message;
    MimePart *_topLevelPart;
    unsigned int _allowsPartialDownloads:1;
    unsigned int _usingPartialDownloads:1;
    unsigned int _startedFetch:1;
    unsigned int _fetchingBodyText:1;
    unsigned int _doneAddingSubdownloads:1;
    unsigned int _writesCacheFile:1;
}

- (void)dealloc;
- (id)initWithMessage:(id)fp8;
- (id)createClone;
- (id)message;
- (void)setMessage:(id)fp8;
- (BOOL)allowsPartialDownloads;
- (void)setAllowsPartialDownloads:(BOOL)fp8;
- (BOOL)writesCacheFile;
- (void)setWritesCacheFile:(BOOL)fp8;
- (id)topLevelPart;
- (void)setTopLevelPart:(id)fp8;
- (id)data;
- (BOOL)isComplete;
- (void)handleFetchResult:(id)fp8;
- (void)processResults;
- (void)addCommandsToPipeline:(id)fp8 withCache:(id)fp12;

@end

@interface IMAPAttachmentsDownload : IMAPCompoundDownload
{
    id <IMAPObject> _message;
}

- (void)dealloc;
- (id)initWithLibraryMessage:(id)fp8;
- (id)createClone;
- (id)message;
- (void)_setMessage:(id)fp8;
- (void)saveCompletedDownloads;

@end

@interface Matador : NSObject
{
    InvocationQueue *_tasks;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (void)_setAttributeForFileAtPath:(id)fp8 name:(id)fp12 value:(id)fp16;
- (void)setAttributeForFileAtPath:(id)fp8 name:(id)fp12 value:(id)fp16;
- (void)_indexAttachmentsForMessage:(id)fp8;
- (void)_indexAttachmentsForMessages:(id)fp8;
- (void)scheduleAttachmentIndexingForMessages:(id)fp8;
- (void)immediatelyIndexAttachmentsForMessages:(id)fp8;
- (void)indexAttachmentsForMessages:(id)fp8;
- (void)indexAttachmentsForMessage:(id)fp8;
- (void)immediatelyIndexAttachmentsForMessage:(id)fp8;

@end

@interface MimePart (MatadorSupport)
- (BOOL)writeAttachmentToSpotlightCacheIfNeededUnder:(id)fp8;
@end

@interface _LibraryThreadRequest : NSObject
{
    NSMutableArray *messages;
    LibraryIMAPStore *store;
    BOOL isFollowOnToProgressTask;
}

- (void)dealloc;

@end

@interface LibraryThread : NSObject
{
    NSMutableArray *_requests;
    ActivityMonitor *_monitor;
    struct __CFDictionary *_storeReqCounts;
}

+ (id)sharedInstance;
- (void)_runThread;
- (void)addMessages:(id)fp8 toStore:(id)fp12;
- (id)messagesBeingAddedToStore:(id)fp8;
- (BOOL)isAddingMessagesToStore:(id)fp8;

@end

@interface IMAPMessageWithCache : IMAPMessage
{
    NSData *_messageData;
    MessageHeaders *_headers;
}

- (void)dealloc;
- (id)messageData;
- (id)messageDataIncludingFromSpace:(BOOL)fp8 newDocumentID:(id)fp12;
- (void)setMessageData:(id)fp8;
- (BOOL)isMessageContentsLocallyAvailable;
- (id)headers;
- (void)setHeaders:(id)fp8;
- (id)headerData;

@end

@interface IMAPMailboxSyncEngine : NSObject
{
    ActivityMonitor *_monitor;
    IMAPGateway *_gateway;
    LibraryIMAPStore *_store;
    IMAPMailbox *_IMAPMailbox;
    NSMutableArray *_unprocessedResponses;
    NSMutableArray *_auxiliaryLists;
    NSMutableIndexSet *_allNewUids;
    NSMutableIndexSet *_UIDsNeedingSkeletons;
    unsigned int _uidNext;
    unsigned int _uidValidity;
    unsigned int _libraryClientUidNext;
    unsigned int _numMessagesOnServer;
    unsigned int _firstMessageNumber;
    NSMutableArray *_messageDetails;
    unsigned int _maxSkeletonsToFetch;
    NSMutableIndexSet *_expungedUids;
    unsigned int _automaticallyStartThread:1;
    unsigned int _storeIsInbox:1;
    unsigned int _newMailReceivedInInbox:1;
    unsigned int _uidValidityChanged:1;
    unsigned int _checkedForNewUids:1;
    unsigned int _synchronizedOldMessages:1;
    unsigned int _progressType:3;
    unsigned int _connectionSupportsUIDPLUS:1;
    unsigned int _progressTotal:21;
    unsigned int _checkNewMailCount;
    BOOL _storeContainsToDos;
}

- (void)dealloc;
- (id)initWithStore:(id)fp8;
- (void)reset;
- (void)_resetClearingGateway:(BOOL)fp8;
- (void)invalidateStore;
- (void)setGateway:(id)fp8 IMAPMailbox:(id)fp12;
- (void)updateCountOfMessagesOnServerFromIMAPMailbox:(id)fp8;
- (void)_lockedUpdateCountOfMessagesOnServerIfNecessary;
- (void)setUidValidity:(unsigned int)fp8;
- (void)responsesWereAddedToIMAPMailbox:(id)fp8;
- (void)messagesWereAddedToLibrary:(id)fp8;
- (BOOL)messageListIsSynchronized;
- (id)messagesBeingAdded;
- (void)setAutomaticallyStartsBackgroundThread:(BOOL)fp8;
- (void)runInCurrentThread;
- (void)runInCurrentThreadWithMessages:(id)fp8;
- (void)requestCheckingNewMail;
- (void)newUIDsWereAddedToServer:(id)fp8 forMessages:(id)fp12;
- (BOOL)_setGateway:(id)fp8;
- (void)_notifyBackgroundFetchCompleted;
- (void)_go;
- (void)_goWithMessages:(id)fp8;
- (BOOL)_shouldContinueSyncingWithMonitor:(id)fp8;
- (BOOL)_unlockIfProcessedResponsesWithMonitor:(id)fp8;
- (BOOL)_unlockIfGotNewMessageSkeletonsWithMonitor:(id)fp8;
- (id)_lockedCreateOperationFromUIDsNeedingSkeletons:(unsigned int)fp8;
- (BOOL)_unlockIfHandledRoutedUidsWithMonitor:(id)fp8;
- (BOOL)_unlockIfFetchedUidsAndFlagsWithMonitor:(id)fp8;
- (BOOL)_unlockIfSyncedWithLibraryWithMonitor:(id)fp8 messages:(id)fp12;
- (BOOL)_unlockIfDidCacheMessagesWithMonitor:(id)fp8;
- (BOOL)_unlockIfDidCacheAttachmentsWithMonitor:(id)fp8;
- (BOOL)_recoverFromErrorInDownload:(id)fp8 uid:(unsigned long)fp12 cacheList:(id)fp16 atIndex:(unsigned int)fp20 downloadCache:(id)fp24;
- (BOOL)_unlockIfHandledInvitationMessagesWithMonitor:(id)fp8;
- (int)_cachePolicyForAccount:(id)fp8;
- (id)description;

@end

@interface MessageCriterion : Criterion
{
    int _specialMailboxType;
    NSString *_groupUniqueID;
}

+ (void)initialize;
+ (id)noteCriteriaForAccount:(id)fp8;
+ (void)_updateAddressComments:(id)fp8;
+ (int)criterionTypeForString:(id)fp8;
+ (id)stringForCriterionType:(int)fp8;
- (id)initWithDictionary:(id)fp8 andRemoveRecognizedKeysIfMutable:(BOOL)fp12;
- (BOOL)isEqual:(id)fp8;
- (BOOL)isEquivalent:(id)fp8;
- (id)dictionaryRepresentation;
- (void)setCriterionIdentifier:(id)fp8;
- (id)recursiveGroupUniqueIDs;
- (id)_headersRequiredForEvaluation;
- (void)addHeadersRequiredForRoutingToArray:(id)fp8;
- (BOOL)_evaluateDateCriterion:(id)fp8;
- (BOOL)_evaluateHeaderCriterion:(id)fp8;
- (BOOL)_evaluateBodyCriterion:(id)fp8;
- (BOOL)_evaluateAddressBookCriterion:(id)fp8;
- (BOOL)_doesGroup:(id)fp8 containSender:(id)fp12;
- (BOOL)_evaluateMemberOfGroupCriterion:(id)fp8;
- (BOOL)_evaluateAccountCriterion:(id)fp8;
- (BOOL)_evaluateAddressHistoryCriterion:(id)fp8;
- (BOOL)_evaluateFullNameCriterion:(id)fp8;
- (BOOL)_evaluateIsDigitallySignedCriterion:(id)fp8;
- (BOOL)_evaluateIsEncryptedCriterion:(id)fp8;
- (BOOL)_evaluateMessageTypeCriterion:(id)fp8;
- (BOOL)_evaluatePriorityIsNormalCriterion:(id)fp8;
- (BOOL)_evaluatePriorityIsHighCriterion:(id)fp8;
- (BOOL)_evaluatePriorityIsLowCriterion:(id)fp8;
- (BOOL)_evaluateJunkMailHeaders:(id)fp8;
- (BOOL)_evaluateJunkMailCriterion:(id)fp8;
- (BOOL)_evaluateAttachmentCriterion:(id)fp8;
- (BOOL)doesMessageSatisfyCriterion:(id)fp8;
- (BOOL)hasExpression;
- (BOOL)allowsEmptyExpression;
- (BOOL)hasQualifier;
- (BOOL)isValid:(id *)fp8 options:(unsigned long)fp12;
- (BOOL)containsBodyCriterion;
- (id)emailAddressesForGroupCriterion;
- (id)criterionByExpandingGroup;
- (id)criterionByExpandingSpecialMailboxCriterion;
- (BOOL)containsLastViewedDateCriterion;
- (id)groupUniqueID;
- (void)setGroupUniqueID:(id)fp8;
- (int)specialMailboxType;
- (void)setSpecialMailboxType:(int)fp8;

@end

@interface MessageCriterion (ApplescriptRuleCriterion)
- (int)ruleType;
- (void)setRuleType:(int)fp8;
- (id)ruleHeader;
- (void)setRuleHeader:(id)fp8;
- (int)ruleQualifier;
- (void)setRuleQualifier:(int)fp8;
- (id)ruleExpression;
- (void)setRuleExpression:(id)fp8;
@end

@interface LibraryIMAPMessage : LibraryMessage
{
    MessageHeaders *_headers;
}

- (void)dealloc;
- (id)headers;
- (void)setHeaders:(id)fp8;

@end

@interface Criterion (PrivateLibraryAdditions)
- (id)criterionForSQLWithExpandedSmartMailboxes:(id)fp8;
- (id)fixOnceWithExpandedSmartMailboxes:(id)fp8;
- (id)criterionByMergingBodyCriteria;
- (BOOL)hasNumberCriterion;
- (id)SQLExpressionWithContext:(CDAnonymousStruct1 *)fp8 depth:(unsigned int)fp12 enclosingSmartMailboxes:(id)fp16;
@end

@interface ToDoCriterion (PrivateLibraryAdditions)
- (BOOL)expressibleInOldSchema;
- (id)SQLExpressionWithContext:(CDAnonymousStruct1 *)fp8 depth:(unsigned int)fp12 enclosingSmartMailboxes:(id)fp16;
@end

@interface MessageCriterion (PrivateLibraryAdditions)
- (id)fixOnceWithExpandedSmartMailboxes:(id)fp8;
- (id)criterionByMergingBodyCriteria;
- (BOOL)hasNumberCriterion;
- (BOOL)expressibleInOldSchema;
- (id)SQLExpressionWithContext:(CDAnonymousStruct1 *)fp8 depth:(unsigned int)fp12 enclosingSmartMailboxes:(id)fp16;
@end

@interface Criterion (LibraryAdditions)
- (BOOL)expressibleInOldSchema;
- (id)criterionExpressionForEqualRelativeDates:(CDAnonymousStruct1 *)fp8 depth:(unsigned int)fp12 enclosingSmartMailboxes:(id)fp16;
- (id)criterionValueForNotEqualRelativeDates:(int *)fp8;
- (id)criterionForSQL;
- (id)SQLExpressionWithTables:(unsigned int *)fp8 baseTable:(unsigned int)fp12;
- (unsigned int)bestBaseTable;
@end

@interface MimeTextAttachment (ScriptingSupport)
- (id)appleScriptNameOfAttachment;
- (id)appleScriptMIMEType;
- (void)_loadFileWrapperForCommand:(id)fp8;
- (void)_finishSaveAttachmentCommand:(id)fp8;
- (id)handleSaveAttachmentCommand:(id)fp8;
- (id)appleScriptApproximateSize;
- (id)uniqueID;
- (id)objectSpecifier;
@end

@interface APOPConnection : POP3Connection
{
}

- (BOOL)authenticateUsingAccount:(id)fp8;
- (int)_authenticateUsingHostname:(id)fp8 username:(id)fp12 password:(id)fp16 authenticator:(id)fp20;

@end

@interface APOPAuthScheme : AuthScheme
{
}

- (BOOL)supportsAccountType:(id)fp8;
- (Class)connectionClassForAccount:(id)fp8;
- (Class)authenticatorClassForAccount:(id)fp8;
- (BOOL)hasEncryption;
- (unsigned int)securityLevel;
- (BOOL)requiresPassword;
- (BOOL)requiresDomain;
- (id)name;
- (id)humanReadableName;
- (BOOL)canAuthenticateAccount:(id)fp8 connection:(id)fp12;

@end

@interface APOPAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface SeenMessage : NSManagedObject
{
}

- (void)setAccount:(id)fp8;
- (id)dateSeen;
- (void)setDateSeen:(id)fp8;
- (id)messageID;
- (void)setMessageID:(id)fp8;
- (BOOL)shouldDeleteFromServer;
- (void)setShouldDeleteFromServer:(BOOL)fp8;
- (BOOL)isOnServer;
- (void)setIsOnServer:(BOOL)fp8;

@end

@interface SeenMessagesStore : NSObject
{
    NSPersistentStoreCoordinator *_coordinator;
    NSString *_storePath;
    NSEntityDescription *_accountEntity;
    NSEntityDescription *_seenMessageEntity;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)_configurePersistentStoreCoordinator;
- (id)persistentStoreCoordinator;
- (id)_managedObjectModel;
- (id)seenMessageEntity;
- (void)setSeenMessageEntity:(id)fp8;
- (id)accountEntity;
- (void)setAccountEntity:(id)fp8;
- (id)persistentStorePath;
- (void)setPersistentStorePath:(id)fp8;
- (void)setPersistentStoreCoordinator:(id)fp8;

@end

@interface SeenMessagesManager : NSObject
{
    NSManagedObjectContext *_managedObjectContext;
    id _account;
}

- (id)initWithAccountID:(id)fp8 createAccount:(BOOL)fp12;
- (void)dealloc;
- (id)_accountForAccountID:(id)fp8;
- (id)_addAccountWithID:(id)fp8;
- (id)seenMessageForMessageID:(id)fp8;
- (unsigned int)countOfSeenMessages;
- (id)addMessageID:(id)fp8 dateSeen:(id)fp12;
- (void)removeMessageIDs:(id)fp8;
- (id)seenMessages;
- (id)messagesToBeDeletedFromServer;
- (void)removeServerDeletedMessages;
- (void)removeMessagesNotOnServer:(id)fp8;
- (void)saveChanges;
- (void)_configureManagedObjectContext;
- (id)managedObjectContext;
- (void)setManagedObjectContext:(id)fp8;
- (id)account;
- (void)setAccount:(id)fp8;

@end

@interface MailFileWrapper : NSFileWrapper
{
    unsigned int _attachmentSize;
    NSString *_pathToCopy;
}

+ (id)createWithPath:(id)fp8 andContentID:(id)fp12 makingLocalCopy:(BOOL)fp16;
+ (id)localAttachmentFilesDirectory;
- (id)initWithDictionaryRepresentation:(id)fp8;
- (void)dealloc;
- (id)archivedDataWithPartNumber:(id)fp8;
- (id)symbolicLinkDestination;
- (id)pathToAttachment;
- (BOOL)isALargeAttachment;
- (void)setPreferredFilename:(id)fp8;
- (id)pathToCopy;
- (void)setPathToCopy:(id)fp8;
- (unsigned int)approximateSize;
- (void)setApproximateSize:(unsigned int)fp8;

@end

@interface Subdata : NSObject
{
    NSData *data;
    NSData *parentData;
}

- (id)initWithParent:(id)fp8 range:(struct _NSRange)fp12;
- (void)dealloc;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)forwardInvocation:(id)fp8;
- (int)length;

@end

@interface BytesFormatter : NSNumberFormatter
{
}

- (id)init;
- (id)stringFromNumber:(id)fp8;

@end

@interface SafariBookmark : NSObject
{
    NSString *_title;
    NSString *_uuid;
    NSString *_comment;
    NSURL *_url;
    NSArray *_children;
}

+ (id)_itemFromDictionary:(id)fp8 withSchemes:(id)fp12;
+ (id)_itemFromBookmark:(id)fp8 withSchemes:(id)fp12;
- (id)initWithTitle:(id)fp8 UUID:(id)fp12 comment:(id)fp16 URL:(id)fp20 children:(id)fp24;
- (void)dealloc;
- (id)title;
- (id)UUID;
- (id)comment;
- (BOOL)isLeaf;
- (id)children;
- (id)URLString;
- (id)URL;
- (void)describeTo:(id)fp8 withIndent:(id)fp12;
- (id)description;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (void)_addUUIDsTo:(id)fp8;
- (void)_addURLsTo:(id)fp8;

@end

@interface SafariBookmarksWatcher : NSObject
{
    Class _bookmarkClass;
    NSDate *_modDate;
    NSArray *_schemes;
    SafariBookmark *_root;
    NSDictionary *_uuids;
    NSDictionary *_urls;
}

- (id)initWithSchemes:(id)fp8;
- (void)dealloc;
- (void)setBookmarkClass:(Class)fp8;
- (id)tree;
- (id)bookmarkWithUUID:(id)fp8;
- (id)bookmarkWithURL:(id)fp8;
- (BOOL)_setRoot:(id)fp8;
- (BOOL)refresh;
- (BOOL)refreshFromBookmarks:(id)fp8;

@end

@interface RSSLibraryStore : LibraryStore <RouterStore>
{
    NSURL *_feedURL;
}

+ (void)tryToRecoverFeedURLsFromFeedInfo:(id)fp8;
+ (void)didFinishFetching:(BOOL)fp8;
+ (void)fetchSynchronously;
+ (id)_messageForEntry:(id)fp8 feed:(id)fp12 store:(id)fp16 isUpdated:(BOOL)fp20;
- (void)dealloc;
- (void)subscribeToFeedWithURL:(id)fp8;
- (void)unsubscribe;
- (void)subscribeToFeedIfNecessary;
- (void)setFeedURL:(id)fp8 needsSave:(BOOL)fp12;
- (id)feedURL;
- (void)addEntries:(id)fp8 fromFeed:(id)fp12;
- (void)routeArticleMessages:(id)fp8 fetchedAt:(id)fp12;
- (void)_waitForRouterToFinishRouting:(id)fp8 articlesFetchedAt:(id)fp12;
- (void)messagesWillBeRouted:(id)fp8;
- (void)messagesWereRouted:(id)fp8;
- (void)cancel;
- (void)fetchSynchronously;
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (id)allMailboxUidRepresentations;

@end

@interface MessageStore (RSSAdditions)
- (void)updateEntries:(id)fp8 fromFeed:(id)fp12;
- (void)changeFlagsForEntries:(id)fp8 fromFeed:(id)fp12;
- (void)deleteEntriesWithIdentifiers:(id)fp8 fromFeed:(id)fp12;
- (void)updateStatusFromFeed:(id)fp8 errorMessage:(id)fp12;
@end

@interface BookmarksManager : NSObject
{
    NSManagedObjectContext *_managedObjectContext;
}

+ (id)_sharedPersistentStoreCoordinator;
+ (id)_createManagedObjectModel;
- (void)dealloc;
- (id)init;
- (void)_configureTransientFeedContext;
- (void)addAllRSSFeedsIfNecessary;
- (id)subscribedFeeds;
- (unsigned int)countOfSubscribedFeeds;
- (void)saveTransientFeedChanges;
- (void)discardTransientFeedChanges;
- (BOOL)updateContextWithChanges:(id)fp8;
- (void)clearTransientFeedContext;
- (id)transientFeedContext;
- (void)_setContext:(id)fp8;
- (id)addBookmarkWithSyncID:(id)fp8;
- (id)addFolderWithSyncID:(id)fp8 checkIfExists:(BOOL)fp12;
- (id)bookmarkWithSyncID:(id)fp8;
- (id)folderWithSyncID:(id)fp8;
- (id)addBookmarkWithURL:(id)fp8;
- (id)addSubscribedBookmarkWithURL:(id)fp8 name:(id)fp12;
- (id)bookmarksWithURL:(id)fp8;
- (id)bookmarkURLWithName:(id)fp8;
- (id)_itemsWithValue:(id)fp8 forKey:(id)fp12 entity:(id)fp16;
- (BOOL)setBookmarksWithURL:(id)fp8 isSubscribed:(BOOL)fp12 shouldDisplayUnderInbox:(BOOL)fp16;
- (BOOL)deleteBookmarkWithSyncID:(id)fp8;
- (BOOL)_deleteBookmark:(id)fp8;
- (BOOL)deleteFolderWithSyncID:(id)fp8;
- (BOOL)_deleteFolder:(id)fp8;
- (void)deleteAllBookmarks;
- (void)deleteAllFolders;
- (id)_allItemsForEntity:(id)fp8;
- (void)setSyncCount:(id)fp8;
- (id)syncCount;

@end

@interface TransientBookmarkFolder : TransientBookmarkItem
{
    BOOL _localizedNameNeedRefresh;
}

+ (void)setEntity:(id)fp8;
+ (id)entity;
- (id)bookmarkChildren;
- (BOOL)containsFeed;
- (void)setContainsFeed:(BOOL)fp8;
- (void)calculateContainsFeed;
- (id)localizedName;
- (void)setLocalizedName:(id)fp8;
- (id)feedFolderChildren;
- (id)feedChildren;
- (unsigned int)_feedChildrenCount;
- (unsigned int)_feedFolderChildrenCount;
- (void)_updateContainsFeed:(BOOL)fp8;
- (void)didTurnIntoFault;

@end

@interface TransientBookmark : TransientBookmarkItem
{
}

+ (void)setEntity:(id)fp8;
+ (id)entity;
- (id)URL;
- (void)setURL:(id)fp8;
- (BOOL)isFeed;
- (void)setIsFeed:(BOOL)fp8;
- (void)setDisplaysUnderInbox:(BOOL)fp8;
- (BOOL)isSubscribed;
- (void)setIsSubscribed:(BOOL)fp8;
- (BOOL)existsInMailOnly;
- (void)setExistsInMailOnly:(BOOL)fp8;
- (void)_propagateChangeToBookmarksWithSameURLForKey:(id)fp8 value:(id)fp12;

@end

@interface TransientBookmarkItem : NSManagedObject
{
}

+ (void)setEntity:(id)fp8;
+ (id)entity;
- (id)name;
- (void)setName:(id)fp8;
- (void)setPosition:(id)fp8;
- (id)parent;
- (void)setParent:(id)fp8;
- (void)setParent:(id)fp8 updatingContainsFeed:(BOOL)fp12;

@end

@interface ActivityAggregator : NSObject
{
    NSTimer *_timer;
    ActivityAggregate *_in;
    ActivityAggregate *_out;
    unsigned int _numTimeBasedValueObservers;
    double _timeBasedValueObserversLastNotifiedTime;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)fp8;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)dealloc;
- (id)in;
- (id)out;
- (id)timer;
- (void)setTimer:(id)fp8;
- (void)installTimer;
- (void)updateTimeBasedValues;
- (void)updateUnitBasedValues;
- (void)uiTimerFired;
- (void)recordInBytes:(unsigned int)fp8;
- (void)recordOutBytes:(unsigned int)fp8;
- (void)activityMonitor:(id)fp8 didChangeTypeFrom:(int)fp12;
- (void)registerTimeBasedValueObserver:(id)fp8;
- (void)unregisterTimeBasedValueObserver:(id)fp8;

@end

@interface NSDictionary (MessageAdditions)
- (id)mutableSomewhatDeepCopy;
@end

@interface HeaderParsingUtils : NSObject
{
}

+ (id)dictionaryForReceivedHeader:(id)fp8;
+ (void)_setReceivedValuesInDictionary:(id)fp8 key:(id)fp12 value:(id)fp16 comment:(id)fp20 actualHostDotted:(id)fp24 actualHostIP:(id)fp28;
+ (BOOL)isHostRemote:(id)fp8;
+ (id)firstRemoteReceivedHeaderForReceivedHeaders:(id)fp8;

@end

@interface ViewFactory : NSObject
{
    NSView *_view;
}

+ (id)viewWithNibNamed:(id)fp8;
- (id)view;

@end

@interface ActivityAggregate : NSObject
{
    struct __CFArray *_rateArray;
    BytesFormatter *_bytesFormatter;
    NSArrayController *_monitorController;
    float _rate;
    float _progress;
    BOOL _canCancel;
    unsigned int _itemsDone;
    unsigned int _itemsTotal;
    float _unifiedDone;
    unsigned int _baseItemsDone;
    unsigned int _baseItemsTotal;
    float _baseUnifiedDone;
    NSString *_bkItemDescription;
    NSString *_nameSingular;
    NSString *_namePlural;
    NSString *_status;
    int _activityType;
    BOOL _isResetting;
    BOOL _isProgressing;
    BOOL _bkIsProgressing;
    double _startTime;
    double _estimatedTimeRemaining;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (id)monitorController;
- (id)formattedRate;
- (unsigned int)currentItem;
- (void)setItemsDone:(unsigned int)fp8;
- (void)setItemsTotal:(unsigned int)fp8;
- (void)setUnifiedDone:(float)fp8;
- (void)setBkIsProgressing:(BOOL)fp8;
- (void)setCanCancel:(BOOL)fp8;
- (void)setIsProgressing:(BOOL)fp8;
- (void)setProgress:(float)fp8;
- (void)setRate:(float)fp8;
- (void)setEstimatedTimeRemaining:(double)fp8;
- (BOOL)isProgressIndeterminate;
- (void)updateStatus;
- (void)reset;
- (void)addActivityMonitor:(id)fp8;
- (void)removeActivityMonitor:(id)fp8;
- (void)updateAggregateIsProgressing;
- (void)updateAggregateValues;
- (void)updateIsProgressing;
- (void)updateUnitBasedValues;
- (void)updateTimeBasedValues;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (id)description;
- (void)recordBytes:(unsigned int)fp8;
- (void)signalCancel:(id)fp8;
- (int)activityType;
- (void)setActivityType:(int)fp8;
- (double)estimatedTimeRemaining;
- (id)namePlural;
- (void)setNamePlural:(id)fp8;
- (id)nameSingular;
- (void)setNameSingular:(id)fp8;
- (id)status;
- (void)setStatus:(id)fp8;
- (BOOL)canCancel;
- (unsigned int)itemsTotal;
- (unsigned int)itemsDone;
- (float)unifiedDone;
- (BOOL)isProgressing;
- (float)rate;
- (float)progress;
- (id)bkItemDescription;
- (void)setBkItemDescription:(id)fp8;
- (BOOL)bkIsProgressing;

@end

@interface ActivityAggregateArrayController : NSArrayController
{
}

- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;

@end

@interface RSSArticleDocument : WebMessageDocument
{
    NSString *_articleURL;
    NSString *_articleSubject;
}

- (void)dealloc;
- (void)setArticleURL:(id)fp8;
- (id)articleURL;
- (void)setArticleSubject:(id)fp8;
- (id)articleSubject;

@end

@interface RSSInterchange : NSObject
{
    PSClient *_syndicationManager;
    NSConditionLock *_syndicationLock;
    NSThread *_syndicationThread;
    NSPort *_syndicationPort;
    ActivityMonitor *_activityMonitor;
    InvocationQueue *_delegateHandlerQueue;
    NSMutableDictionary *_feedsBeingUpdated;
    NSMutableDictionary *_updatedFeeds;
    BOOL _didReceiveArticles;
    NSString *_feedName;
    NSURL *_autodiscoveredURL;
    BOOL _waitingForFeedName;
    NSDate *_fetchDate;
    unsigned int _numberOfOutstandingFeedWrites;
    NSTimer *_manualCheckTimer;
    BOOL _manualCheckIsAllowed;
    BOOL _shareDeletionInterval;
    BOOL _fatalError;
}

+ (id)sharedInstance;
- (void)dealloc;
- (id)init;
- (void)fetchTemporaryFeedAtURL:(id)fp8 getName:(id *)fp12 getAutodiscoveredURL:(id *)fp16;
- (BOOL)_performSynchronousRefreshWithFeed:(id)fp8;
- (void)_setTemporaryFeedInformationFromURL:(id)fp8;
- (void)_setFeedName:(id)fp8;
- (id)_feedName;
- (void)_setAutodiscoveredURL:(id)fp8;
- (id)_autodiscoveredURL;
- (void)subscribeToFeedWithURL:(id)fp8;
- (void)_subscribeToFeedWithURL:(id)fp8;
- (void)unsubscribeToFeedWithURL:(id)fp8;
- (void)_unsubscribeToFeedWithURL:(id)fp8;
- (void)restoreFeedURLsForFeedInfo:(id)fp8;
- (void)_restoreFeedURLsForFeedInfo:(id)fp8;
- (void)setFetchFrequency:(int)fp8;
- (void)setDeletionFrequency:(int)fp8;
- (void)_setFrequency:(int)fp8 forMsgid:(int)fp12;
- (void)_setFetchFrequency:(int)fp8;
- (void)_setDeletionFrequency:(int)fp8;
- (void)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (void)_setFlagsFromDictionary:(id)fp8 forRemoteIDs:(id)fp12;
- (BOOL)updateAllFeeds;
- (void)_updateAllFeeds;
- (void)_synchronize;
- (void)updateFeedWithURL:(id)fp8;
- (void)_updateFeedWithURL:(id)fp8;
- (void)updateLastDateFetchedForNewArticles:(BOOL)fp8;
- (void)_runManager;
- (void)handlePortMessage:(id)fp8;
- (void)_allowManualFeedCheck;
- (void)_setManualCheckTimer:(id)fp8;
- (id)_manualCheckTimer;
- (void)feedDidBeginRefresh:(id)fp8;
- (void)feedDidEndRefresh:(id)fp8;
- (void)feed:(id)fp8 didAddEntries:(id)fp12;
- (void)feed:(id)fp8 didUpdateEntries:(id)fp12;
- (void)feed:(id)fp8 didChangeFlagsInEntries:(id)fp12;
- (void)feed:(id)fp8 didRemoveEntriesWithIdentifiers:(id)fp12;
- (void)_setSyndicationManager:(id)fp8;
- (void)_setSyndicationLock:(id)fp8;
- (void)_setSyndicationPort:(id)fp8;
- (void)_configureSyndicationManager;
- (void)_setFetchDate:(id)fp8;
- (void)_writeDate;
- (id)_storeBeingUpdatedWithIdentifier:(id)fp8;
- (void)_delegateFeedDidEndRefresh:(id)fp8;
- (id)_createPortComponentsForFeedURL:(id)fp8;
- (id)_mailboxForFeed:(id)fp8;
- (void)_refreshFeed:(id)fp8;
- (id)_messageForError:(id)fp8;

@end

@interface MetadataManager : NSObject <ToDosCacheListener, ReconciliationAgent>
{
    id <CalendarStoreConduit> _calendarStore;
    Class _libraryClass;
    NSMutableArray *_searchStores;
    NSMutableArray *_reconcilingIDs;
    NSRecursiveLock *_lock;
    ToDoChangesQueue *_localChangesQueue;
    ToDoChangesQueue *_calendarStoreChangesQueue;
    NSTimer *_changesTimer;
    ToDosCache *_todosCache;
    ToDoCalendars *_todoCalendars;
    NSMutableDictionary *_reconciliationAddsByMailboxID;
    NSMutableDictionary *_reconciliationUpdatesByMailboxID;
    NSMutableDictionary *_reconciliationDeletesByMailboxID;
    NSMutableSet *_updatedToDoIDSForReconciler;
}

+ (id)sharedInstance;
+ (id)sharedInstanceWithConduitClass:(Class)fp8 libraryClass:(Class)fp12 todoCalendars:(id)fp16;
+ (void)initialize;
+ (BOOL)isReady;
- (id)metadataInvocationQueue;
- (void)_addInvocationToQueue:(id)fp8;
- (id)initWithCalendarStoreConduitClass:(Class)fp8 libraryClass:(Class)fp12 todoCalendars:(id)fp16;
- (void)dealloc;
- (void)finalize;
- (BOOL)canSyncWithIMAP;
- (BOOL)canSyncWithCalendarStore;
- (BOOL)_hasPendingOperations;
- (void)todoAddedToCache:(id)fp8;
- (void)todoRemovedFromCache:(id)fp8;
- (BOOL)isReconcilingID:(unsigned int)fp8;
- (BOOL)setReconcilingFlag:(BOOL)fp8 forID:(unsigned int)fp12;
- (void)prepareToReconcileForID:(unsigned int)fp8;
- (void)startToReconcileForID:(unsigned int)fp8;
- (void)applyReconcilerChangesForID:(unsigned int)fp8;
- (void)finishReconciliationForID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
- (void)processAdds:(id)fp8 updates:(id)fp12 deletes:(id)fp16 mailboxID:(unsigned int)fp20;

@end

@interface MetadataManagerInvocationQueue : InvocationQueue
{
}

@end

@interface MetadataManager (AccountStatus)
- (void)accountWillBeDeleted:(id)fp8;
- (void)accountWillBeDisabled:(id)fp8;
- (void)accountWillBeEnabled:(id)fp8;
@end

@interface MetadataManager (MigrationHelpers)
- (id)_mailTitleFromOldiCalTitle:(id)fp8;
@end

@interface MetadataManager (locking)
- (void)lock;
- (void)unlock;
@end

@interface MetadataManager (ToDoManagerInternal)
- (void)updateRegisteredSearchStores;
- (void)mergeToDo:(id)fp8 intoCachedToDo:(id)fp12;
- (void)processPendingCommits:(id)fp8;
- (id)changesTimer;
- (void)setChangesTimer:(id)fp8;
- (void)scheduleChangesTimer;
- (void)commitAddedToDos:(id)fp8;
- (void)addToDos:(id)fp8 reflectToCalendarStore:(id)fp12 fromReconciliation:(id)fp16;
- (void)commitDeletedToDos:(id)fp8;
- (void)deleteToDos:(id)fp8 reflectToCalendarStore:(id)fp12 fromReconciliation:(id)fp16;
- (void)deleteToDosWithIDs:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)deleteToDosInCalendarsWithIDs:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)deleteToDos:(id)fp8 fromServer:(id)fp12;
- (void)commitUpdatedToDos:(id)fp8;
- (void)updateToDos:(id)fp8 reflectToCalendarStore:(id)fp12 fromReconciliation:(id)fp16;
- (void)todosChangedInCalendarStore:(id)fp8;
- (void)commitDateStampUpdatedInToDos:(id)fp8;
- (void)todosDateStampUpdatedInCalendarStore:(id)fp8;
- (void)calendarsChangedInCalendarStore:(id)fp8;
- (void)groupsChangedInCalendarStore:(id)fp8;
- (void)deleteGroupsAndTheirContents:(id)fp8;
- (void)addToDosToCalendarStore:(id)fp8;
- (void)updateToDosInCalendarStore:(id)fp8;
- (void)removeToDosFromCalendarStore:(id)fp8;
- (void)addCalendarsToCalendarStore:(id)fp8;
- (void)updateCalendarsInCalendarStore:(id)fp8;
- (void)deleteCalendarsFromCalendarStore:(id)fp8;
- (void)commitAddedCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)addCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)commitUpdatedCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)updateCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)commitDeletedCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)deleteCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)setCalendarInNewToDo:(id)fp8;
- (id)findCorrectCalendar:(id)fp8 forAccount:(id)fp12;
- (void)getAllCalendarStoreData;
- (void)todoDidChange:(id)fp8;
- (void)inconsistentCalendarFoundByCalendarStore:(id)fp8;
- (void)inconsistentToDoFoundByCalendarStore:(id)fp8;
- (void)_cleanupInconsistencies;
- (void)_cleanupAllInformationForAccount:(id)fp8 mailbox:(id)fp12;
@end

@interface MetadataManager (ToDoManager)
- (id)newToDoInAccount:(id)fp8;
- (id)newToDoWithTitle:(id)fp8 inAccount:(id)fp12;
- (id)newCalendarWithTitle:(id)fp8 inAccount:(id)fp12;
- (id)todoWithID:(id)fp8;
- (id)calendarWithTitle:(id)fp8 account:(id)fp12;
- (id)todoCalendarWithID:(id)fp8 title:(id)fp12;
- (id)todosByIDForDocumentID:(id)fp8;
- (id)todosByIDForDocumentID:(id)fp8 byPreviousID:(id *)fp12;
- (id)allToDosForDocumentID:(id)fp8;
- (id)allToDosForNote:(id)fp8;
- (id)allToDosForMessage:(id)fp8;
- (BOOL)hasToDoWithIDBeenDeleted:(id)fp8;
- (id)allDeletedToDoIDsForDocumentID:(id)fp8;
- (void)_loadAllToDosForMailboxUid:(id)fp8;
- (void)loadAllToDosForMailboxUid:(id)fp8;
- (void)_setMailboxIDForMailboxUid:(id)fp8 inObject:(id)fp12;
- (void)setMailboxIDForMailboxUid:(id)fp8 inObject:(id)fp12;
- (void)addToDos:(id)fp8;
- (void)deleteToDos:(id)fp8;
- (void)deleteLocalToDos:(id)fp8;
- (void)updateToDos:(id)fp8;
- (void)addCalendar:(id)fp8;
- (id)copyToDos:(id)fp8 destinationAccount:(id)fp12 newDocumentIDsByOld:(id)fp16;
- (void)_moveToDos:(id)fp8 toAccount:(id)fp12;
- (void)_removeAllToDoObjectsForAccount:(id)fp8 originalMailboxUid:(id)fp12 moveToDosToLocalAccount:(id)fp16;
- (void)_makeLocalToDosOfAllToDosForAccount:(id)fp8 originalMailboxUid:(id)fp12;
- (void)removeAllToDoObjectsForAccount:(id)fp8 moveToDosToLocalAccount:(BOOL)fp12;
- (void)_disableAllToDoObjectsForAccount:(id)fp8;
- (void)disableAllToDoObjectsForAccount:(id)fp8;
- (BOOL)_cacheToDoObjectsFromDisabledAccount:(id)fp8 group:(id *)fp12 calendars:(id *)fp16 todos:(id *)fp20;
- (void)_enableAllToDoObjectsForAccount:(id)fp8;
- (void)enableAllToDoObjectsForAccount:(id)fp8;
- (void)updateToDoWithID:(id)fp8 toRemoteID:(id)fp12;
- (void)registerSearchStore:(id)fp8;
- (void)unregisterSearchStore:(id)fp8;
- (void)updateSearchStoreForMailboxUid:(id)fp8;
- (void)updateSearchStoresInArray:(id)fp8;
- (id)findOrCreateCalendarWithTitle:(id)fp8 calendarID:(id)fp12 account:(id)fp16;
- (id)allUniqueCalendarNames;
- (id)allCalendars;
- (id)allCalendarsInAccount:(id)fp8;
- (id)editableCalendarsByIDForToDos:(id)fp8;
- (void)setAccountAndCalendarInDecodedToDo:(id)fp8 mailboxID:(unsigned int)fp12;
@end

@interface LibraryQueries : NSObject
{
}

+ (char *)queryForUniquingDataForMessageNumber:(unsigned int)fp8;
+ (char *)queryToFindCopiesOfMessage:(char *)fp8 sentOn:(unsigned int)fp12 receivedOn:(unsigned int)fp16 withSize:(unsigned int)fp20;
+ (id)checkOutStatementToInsertMessage:(struct sqlite3 *)fp8;
+ (id)checkOutStatementToCompletelyUpdateMessage:(struct sqlite3 *)fp8;
+ (id)checkOutStatementToInsertToDo:(struct sqlite3 *)fp8;
+ (int)bindFullToDoStatement:(id)fp8 withLibraryToDo:(id)fp12;
+ (id)checkOutStatementToUpdateToDo:(struct sqlite3 *)fp8;
+ (int)bindUpdateToDoStatement:(id)fp8 withLibraryToDo:(id)fp12;
+ (id)checkOutStatementToInsertAlarm:(struct sqlite3 *)fp8;
+ (int)bindInsertAlarmStatement:(id)fp8 withLibraryToDoAlarm:(id)fp12;
+ (char *)queryToDeleteToDoByLibraryID:(unsigned int)fp8;
+ (char *)queryToDeleteToDoAlarmsByToDoLibraryID:(unsigned int)fp8;
+ (char *)queryForAllToDosInMailboxes:(id)fp8;
+ (id)checkOutStatementForMaximumRemoteIDForMailbox:(struct sqlite3 *)fp8;
+ (id)checkOutStatementForToDosDetailInRange:(struct _NSRange)fp8 fromMailbox:(id)fp16 usingDB:(struct sqlite3 *)fp20;
+ (char *)queryToUpdateToDo:(id)fp8 toNewRemoteID:(id)fp12;
+ (id)checkOutStatementForToDoUsingLibraryID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForToDoWithID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForToDoWithID:(id)fp8 remoteID:(id)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForToDoWithID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16 usingDB:(struct sqlite3 *)fp20;
+ (id)checkOutStatementForToDoWithRemoteID:(id)fp8 inMailbox:(unsigned int)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForAllToDosInLibrary:(struct sqlite3 *)fp8;
+ (id)checkOutStatementForAllToDosInMailboxes:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForAllToDosWithMailboxID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForLastToDoWithID:(id)fp8 inMailbox:(id)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForSearchDataForAllToDosInMailboxID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForAllToDosForDocumentID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForAllToDosForMessage:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForAlarmsWithToDoLibraryID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForToDoIDForAlarmID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForToDoIDsInCalendarWithID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForToDoIDsSearchDataWithWhereClause:(id)fp8 andFromClause:(id)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForToDosMatchingSearchDataArray:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)queryForToDoCountWithWhereClause:(id)fp8 andFromClause:(id)fp12;
+ (id)checkOutStatementToInsertNotes:(struct sqlite3 *)fp8;
+ (int)bindInsertNotesStatement:(id)fp8 withNotes:(id)fp12 todoLibraryID:(unsigned int)fp16;
+ (char *)queryToDeleteToDoNotesByToDoLibraryID:(unsigned int)fp8;
+ (id)checkOutStatementForCalendarUsingCalendarID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForAllToDoCalendarsInLibrary:(struct sqlite3 *)fp8;
+ (id)checkOutStatementForAllUniqueToDoCalendarsInLibrary:(struct sqlite3 *)fp8;
+ (id)checkOutStatementToInsertToDoCalendar:(struct sqlite3 *)fp8;
+ (id)checkOutStatementToUpdateToDoCalendar:(struct sqlite3 *)fp8;
+ (char *)queryToDeleteToDoCalendarByLibraryID:(unsigned int)fp8;
+ (char *)queryToDeleteToDoCalendars:(id)fp8;
+ (int)bindFullToDoCalendarStatement:(id)fp8 withLibraryToDoCalendar:(id)fp12;
+ (int)bindUpdateToDoCalendarStatement:(id)fp8 withLibraryToDoCalendar:(id)fp12;
+ (id)fromClauseForTables:(unsigned int)fp8 startingFromTableExpression:(id)fp12;
+ (id)checkOutStatementForSnapshotToDoUIDForRemoteID:(id)fp8 withMailboxID:(unsigned int)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForSnapshotRemoteIDForToDoUID:(id)fp8 withMailboxID:(unsigned int)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForSnapshotAddToDoID:(id)fp8 withRemoteID:(id)fp12 withMailboxID:(unsigned int)fp16 usingDB:(struct sqlite3 *)fp20;
+ (id)checkOutStatementForSnapshotRemoveToDoID:(id)fp8 withMailboxID:(unsigned int)fp12 usingDB:(struct sqlite3 *)fp16;
+ (id)checkOutStatementForRetrievingSnapshotWithMailboxID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementToDeleteAllSnapshotRowsWithMailboxID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForAllToDoIDsAndRemoteIDsForMailboxID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForMailboxURLFromMailboxID:(unsigned int)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForToDoMailboxIDForIncompleteMailAccount:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementToInsertDeletedToDo:(struct sqlite3 *)fp8;
+ (int)bindFullToDosDeletedLogStatement:(id)fp8 withToDoID:(id)fp12 documentID:(id)fp16;
+ (id)checkOutStatementForDeletedToDoWithID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (id)checkOutStatementForDeletedToDoIDsForDocumentID:(id)fp8 usingDB:(struct sqlite3 *)fp12;
+ (char *)queryToRemoveDeletedToDoWithID:(id)fp8;

@end

@interface LibraryToDo : ToDo <LibraryObject, NSCopying>
{
    unsigned int _libraryID;
    unsigned int _mailboxID;
    MailboxUid *_mailboxUid;
    NSString *_remoteID;
    unsigned int _uid;
    unsigned int _size;
    CDAnonymousStruct4 _imapFlags;
    BOOL _imapUpdateInProgress;
    BOOL _isBeingChanged;
    int _changedLibraryProperties;
    NSConditionLock *_mailboxIDLock;
}

- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (id)_initWithAccount:(id)fp8;
- (id)initWithTitle:(id)fp8 inAccount:(id)fp12;
- (id)initWithCalTask:(id)fp8 inAccount:(id)fp12;
- (id)initWithData:(id)fp8 inAccount:(id)fp12;
- (id)init;
- (unsigned int)hash;
- (id)messageReference;
- (void)updateWithCalTask:(id)fp8;
- (id)calTaskFromToDo;
- (void)updateNonCalTaskInformationFrom:(id)fp8;
- (id)initWithFlags:(unsigned long)fp8 size:(unsigned int)fp12 uid:(unsigned long)fp16;
- (void)dealloc;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (unsigned long)libraryFlags;
- (void)setLibraryFlags:(unsigned long)fp8;
- (void)setLibraryID:(unsigned int)fp8;
- (id)account;
- (id)todoStore;
- (unsigned int)mailboxID;
- (id)mailboxUid;
- (void)setMailboxUid:(id)fp8;
- (void)setMailboxUid:(id)fp8 mailboxID:(unsigned int)fp12;
- (void)lockedSetMailboxID:(unsigned int)fp8;
- (void)setCalendarID:(id)fp8;
- (id)description;
- (id)debugDescription;
- (id)richDescription;
- (id)shortDescriptionWithRemoteID;
- (unsigned int)messageSize;
- (id)messageID;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)fp8;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)fp8;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)fp8;
- (BOOL)imapUpdateInProgress;
- (void)setIMAPUpdateInProgress:(BOOL)fp8;
- (void)mergeFromToDo:(id)fp8 overwriteDirtyProperties:(BOOL)fp12 usingCondition:(void *)fp16;
- (CDAnonymousStruct4)imapFlags;
- (id)subject;
- (void)postToDoInfoChangedNotification:(unsigned int)fp8;
- (unsigned int)libraryID;
- (unsigned long)uid;
- (void)setUid:(unsigned long)fp8;
- (id)remoteID;
- (void)setRemoteID:(id)fp8;
- (void)setRemoteIDFromUTF8String:(const char *)fp8;
- (BOOL)hasBeenStoredInDatabase;
- (int)changedLibraryProperties;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)fp8;
- (BOOL)isMetadataMessage;
- (id)mailboxName;
- (id)initForUnitTest;

@end

@interface LibraryToDo (internal)
- (void)_updateUID;
- (void)_libraryTodoChangedProperties:(unsigned int)fp8;
@end

@interface LibraryToDoAlarm : ToDoAlarm <NSCopying>
{
    unsigned int _alarmLibraryID;
    unsigned int _todoLibraryID;
}

- (id)initWithAlarm:(id)fp8 todoLibraryID:(unsigned int)fp12;
- (id)initWithCalAlarm:(id)fp8 todoLibraryID:(unsigned int)fp12;
- (id)calAlarmFromToDoAlarm;
- (unsigned int)libraryID;
- (void)setLibraryID:(unsigned int)fp8;
- (unsigned int)todoLibraryID;
- (void)setToDoLibraryID:(unsigned int)fp8;
- (id)argument;
- (void)setArgument:(id)fp8;
- (unsigned long)libraryFlags;
- (void)setLibraryFlags:(unsigned long)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;

@end

@interface MFUUID : NSObject
{
    struct __CFUUID *_uuidRef;
}

+ (id)uuid;
+ (id)uuidWithString:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)init;
- (id)initWithString:(id)fp8;
- (id)initWithBytes:(CDAnonymousStruct9 *)fp8;
- (id)initWithUUIDRef:(struct __CFUUID *)fp8;
- (CDAnonymousStruct9)bytes;
- (unsigned int)length;
- (id)dataValue;
- (id)stringValue;
- (id)description;
- (BOOL)isEqual:(id)fp8;
- (BOOL)isEqualToString:(id)fp8;
- (unsigned int)hash;
- (void)dealloc;

@end

@interface AccountStatus : NSObject
{
    NSMutableDictionary *_states;
    NSMutableDictionary *_stateDetails;
    struct __CFNetDiagnostic *netDiagnostics;
    NSMutableArray *_queue;
    BOOL _isRefreshingInternet;
    NSTimer *_refreshTimer;
    NSMutableArray *_clients;
    NSMutableArray *_clientTypes;
    NSMutableArray *_clientAccounts;
}

+ (id)sharedStatus;
- (id)init;
- (void)dealloc;
- (void)addObserver:(id)fp8 forAccounts:(id)fp12;
- (void)addObserver:(id)fp8 forTypes:(int)fp12;
- (void)addObserver:(id)fp8 forAccounts:(id)fp12 types:(int)fp16;
- (void)removeObserver:(id)fp8;
- (void)refreshAndClearStatus:(BOOL)fp8;
- (void)refreshForObserver:(id)fp8;
- (void)refreshForObserver:(id)fp8 onlyIfNeeded:(BOOL)fp12;
- (id)accountsForObserver:(id)fp8;
- (void)diagnoseInteractively;
- (int)internetStatus;
- (void)setInternetStatus:(int)fp8;
- (int)accountStatus:(id)fp8;
- (int)knownAccountStatus:(id)fp8;
- (void)setAccount:(id)fp8 status:(int)fp12;
- (id)accountStatusDetails:(id)fp8;
- (void)setAccount:(id)fp8 statusDetails:(id)fp12;
- (int)_accountStatus:(id)fp8;
- (void)_recomputeSelf;
- (id)_accountsForObserver:(id)fp8 onlyIfNeeded:(BOOL)fp12;
- (id)_accountsForFlags:(int)fp8;
- (void)_refreshAccounts:(id)fp8 andInternet:(BOOL)fp12 clearingStatus:(BOOL)fp16;
- (void)_timedRefresh:(id)fp8;
- (void)_networkChanged:(id)fp8;
- (void)_accountInfoChanged:(id)fp8;
- (void)_refreshInternetStatus;
- (void)_refreshInternetStatusFinishedWithResult:(id)fp8;
- (void)_refreshAccountStatus:(id)fp8;
- (void)_refreshAccountStatusUpdatedWithInfo:(id)fp8;
- (void)_refreshAccountStatusWillBegin:(id)fp8;
- (void)_refreshAccountStatusFinished:(id)fp8;

@end

@interface Location : NSObject
{
    NSMutableDictionary *_accountDefaults;
    NSMutableDictionary *_domainsBySubnet;
}

- (id)init;
- (id)initWithDomains:(id)fp8 IPAddresses:(id)fp12;
- (id)initWithArchive:(id)fp8;
- (void)dealloc;
- (id)archive;
- (void)addDomains:(id)fp8 IPAddresses:(id)fp12;
- (id)domains;
- (id)subnets;
- (BOOL)isForIPAddress:(id)fp8;
- (BOOL)isForDomain:(id)fp8;
- (id)deliveryAccountForAccount:(id)fp8;
- (void)setAccount:(id)fp8 deliveryAccount:(id)fp12;
- (id)bestDeliveryAccountForAccount:(id)fp8;
- (void)_postChanged;
- (BOOL)isEqualToLocation:(id)fp8;

@end

@interface LocationManager : NSObject
{
    NSMutableArray *_locations;
    Location *_current;
    InvocationQueue *_invocationQueue;
    BOOL supressNotifications;
}

+ (id)sharedManager;
+ (id)currentLocation;
- (id)init;
- (id)initWithUserDefaultsArray:(id)fp8;
- (void)dealloc;
- (void)setCurrentLocation:(id)fp8;
- (id)currentLocation;
- (void)addLocation:(id)fp8;
- (id)locationForDomain:(id)fp8;
- (id)locationForIPAddress:(id)fp8;
- (void)_networkChanged:(id)fp8;
- (void)_determineCurrentLocation;
- (void)_managedLocationChanged:(id)fp8;
- (void)_unarchiveLocations:(id)fp8;
- (id)_archivedLocations;

@end

@interface ConnectionEnumerator : NSEnumerator
{
    NSDictionary *_connectionsByMailboxName;
    NSArray *_allMailboxNames;
    id _lastObjectKey;
    unsigned int _allMailboxNamesCount;
    unsigned int _positionInMailboxNames;
    NSEnumerator *_nullEnumerator;
}

- (void)dealloc;
- (id)initWithConnectionDictionary:(id)fp8;
- (id)allObjects;
- (id)nextObject;
- (id)lastObjectKey;

@end

@interface IMAPConnectionPool : NSObject
{
    NSMutableDictionary *_idleConnectionsByMailbox;
    NSMutableDictionary *_activeConnectionsByMailbox;
    NSMutableArray *_suspendedGateways;
    unsigned int _maximumConnectionCount;
    NSCondition *_availabilityCondition;
}

- (void)dealloc;
- (void)_removeAllConnectionsInDictionary:(id)fp8;
- (void)_sealSuspendedGateways;
- (id)init;
- (unsigned int)connectionCount;
- (void)removeInvalidConnections;
- (void)_removeInvalidConnectionsInDictionary:(id)fp8;
- (void)closeAllConnectionsAndCompact:(BOOL)fp8;
- (void)_closeAllConnectionsAndCompact:(BOOL)fp8 inDictionary:(id)fp12;
- (BOOL)checkInConnection:(id)fp8 forGateway:(id)fp12;
- (void)checkInNewConnection:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)_removeDisconnectedConnection:(id)fp8 shouldRecover:(BOOL)fp12;
- (id)checkOutNewGatewayWithConnection:(id)fp8;
- (id)_checkOutNewGatewayWithConnection:(id)fp8 forMailbox:(id)fp12;
- (id)checkOutGatewayForMailbox:(id)fp8;
- (id)checkOutGatewayForExistingConnectionToMailbox:(id)fp8;
- (id)checkOutGatewayForMailbox:(id)fp8 newConnection:(id)fp12 highPriority:(BOOL)fp16 waitIndefinitely:(BOOL)fp20;
- (BOOL)tryToResumeGateway:(id)fp8;
- (void)sealGatewayShutIfNoChanceOfResuming:(id)fp8;
- (BOOL)yieldGateway:(id)fp8;
- (BOOL)suspendGateway:(id)fp8 withOperation:(id)fp12;
- (id)_suspendGatewayOfConnection:(id)fp8 mailbox:(id)fp12 forMailbox:(id)fp16 resumingGateway:(id)fp20;
- (id)_suspendFirstIdleConnectionForMailbox:(id)fp8 resumingGateway:(id)fp12 totalSecondsWaited:(unsigned int *)fp16 mightBeSuccessful:(char *)fp20;
- (id)_suspendFirstIdleConnectionInIdleConnections:(id)fp8 forMailbox:(id)fp12 resumingGateway:(id)fp16;
- (id)_anyConnectionFromDictionary:(id)fp8 selectedOnly:(BOOL)fp12 mailbox:(id *)fp16;
- (id)_gatewayToCheckOutConnection:(id)fp8 defaultGateway:(id)fp12 mailboxName:(id)fp16 newGateway:(char *)fp20;
- (BOOL)_validateAndCheckOutGateway:(id)fp8 forMailbox:(id)fp12 allowReconnect:(BOOL)fp16 newGateway:(BOOL)fp20;
- (id)_createNewGatewayForConnection:(id)fp8 mailboxName:(id)fp12;
- (void)_makeConnectionAvailable:(id)fp8;
- (id)description;
- (void)updateConnectionsShouldUseIdle:(id)fp8;
- (BOOL)_removeConnection:(id)fp8 fromDictionary:(id)fp12;
- (void)_setConnection:(id)fp8 forMailbox:(id)fp12 clear:(BOOL)fp16 inDictionary:(id)fp20;
- (BOOL)_connectionIsContained:(id)fp8 forMailbox:(id)fp12 inDictionary:(id)fp16;
- (id)_suspendedGatewayForMailbox:(id)fp8;
- (id)_suspendedGatewayWithWorkRequireSelected:(BOOL)fp8;
- (void)_suspendGateway:(id)fp8 allowNetworking:(BOOL)fp12;
- (void)_removeSuspendedGateway:(id)fp8;
- (id)_keyForMailboxName:(id)fp8;
- (id)connections;
- (id)suspendedGateways;
- (void)setSuspendedGateways:(id)fp8;
- (id)activeConnectionsByMailbox;
- (void)setActiveConnectionsByMailbox:(id)fp8;
- (id)idleConnectionsByMailbox;
- (void)setIdleConnectionsByMailbox:(id)fp8;
- (id)availabilityCondition;
- (void)setAvailabilityCondition:(id)fp8;
- (unsigned int)maximumConnectionCount;
- (void)setMaximumConnectionCount:(unsigned int)fp8;

@end

@interface ConcurrentOperation : NSOperation
{
    struct {
        unsigned int isExecuting:1;
        unsigned int isFinished:1;
        unsigned int performOnMainThread:1;
        unsigned int performOnBackgroundThread:1;
        unsigned int manuallyMarkCompletion:1;
    } _flags;
}

- (BOOL)isConcurrent;
- (BOOL)isExecuting;
- (void)setExecuting:(BOOL)fp8;
- (BOOL)isFinished;
- (void)setFinished:(BOOL)fp8;

@end

@interface InvocationOperation : ConcurrentOperation
{
    NSInvocation *invocation;
}

+ (id)operationWithInvocation:(id)fp8;
- (id)initWithInvocation:(id)fp8;
- (void)dealloc;
- (BOOL)isConcurrent;
- (BOOL)performOnMainThread;
- (void)setPerformOnMainThread:(BOOL)fp8;
- (BOOL)performOnBackgroundThread;
- (void)setPerformOnBackgroundThread:(BOOL)fp8;
- (BOOL)manuallyMarkCompletion;
- (void)setManuallyMarkCompletion:(BOOL)fp8;
- (id)description;
- (void)start;
- (void)main;
- (id)invocation;
- (void)setInvocation:(id)fp8;

@end

@interface NSObject (StackTraceAdditions)
+ (void)logStoredStackTracesForObject:(id)fp8;
- (void)storeStackTraceWithMessage:(id)fp8;
@end

@interface NSException (StackTraceAdditions)
+ (void)loadSymbolicationFramework;
- (id)stackTrace;
- (id)symbolicatedStackTrace;
@end

@interface NSArray (StackTraceAdditions)
- (id)formattedStackTrace;
- (id)symbolicatedReturnAddresses;
@end

@interface NSThread (StackTraceAdditions)
+ (id)stackTrace;
@end

@interface BackupManager : NSObject
{
    MailboxUid *_topLevelRecoveryMailbox;
    NSDictionary *_lastSavedTableOfContents;
    NSMapTable *_mailboxBackupPaths;
}

+ (id)sharedManager;
- (void)dealloc;
- (void)_setupDefaultTopLevelRecoveryMailbox;
- (id)restoreMessagesAtPaths:(id)fp8 intoMailboxNamed:(id)fp12;
- (id)restoreMessagesAtPaths:(id)fp8 intoMailboxNamed:(id)fp12 reuseMailbox:(BOOL)fp16 createdMailboxNamed:(id *)fp20;
- (id)restoreMailboxAtPath:(id)fp8 intoMailboxNamed:(id)fp12;
- (BOOL)restoreMailboxAtPath:(id)fp8 intoArray:(id)fp12;
- (BOOL)_restoreMailboxAtPath:(id)fp8 intoMailbox:(id)fp12 orArray:(id)fp16;
- (void)setTopLevelRecoveryMailbox:(id)fp8;
- (id)_topLevelRecoveryMailbox;
- (id)_recoveryMailboxWithSuggestedName:(id)fp8 reuseMailbox:(BOOL)fp12;
- (id)_reducedPathFromFullPath:(id)fp8 supportDirectory:(id)fp12;
- (id)_reducedPathFromFullPath:(id)fp8;
- (BOOL)_shouldSaveMessagesForMailbox:(id)fp8;
- (BOOL)_shouldSaveDisplayNameForMailbox:(id)fp8;
- (id)_expandedMailboxes:(id)fp8;
- (id)_dictionaryForSection:(int)fp8;
- (id)_dictionaryForMailbox:(id)fp8 parent:(id)fp12 messagePool:(id)fp16;
- (id)_dictionaryForMessage:(id)fp8 includeRecipients:(BOOL)fp12;
- (int)_sectionForMailbox:(id)fp8;
- (void)_addMailbox:(id)fp8 toSection:(int)fp12 sections:(id)fp16 messagePool:(id)fp20;
- (id)tableOfContents;
- (BOOL)saveTableOfContents:(id)fp8;
- (id)backupPathForMailbox:(id)fp8;
- (id)_backupPathForMailbox:(id)fp8 withParentPath:(id)fp12 pathsCache:(id)fp16;
- (id)backupPathForMailbox:(id)fp8 pathsCache:(id)fp12;
- (id)backupMailboxesEnumerator;

@end

@interface MailboxUid (BackupAdditions)
- (int)backupType;
- (id)backupID;
@end

@interface MailAccount (BackupAdditions)
- (id)backupID;
@end

@interface Message (BackupAdditions)
- (id)backupID;
@end

@interface LibraryToDoCalendar : ToDoCalendar <NSCopying>
{
    unsigned int _libraryID;
}

- (unsigned int)libraryID;
- (void)setLibraryID:(unsigned int)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (unsigned long)libraryFlags;
- (void)setLibraryFlags:(unsigned long)fp8;
- (BOOL)hasBeenStoredInDatabase;

@end

@interface UnicodeRegularExpression : NSObject <NSCopying, NSCoding>
{
    NSString *_expressionString;
    struct URegularExpression *_regex;
}

+ (void)initialize;
+ (id)regularExpressionWithString:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)initWithExpressionString:(id)fp8;
- (id)initWithExpressionString:(id)fp8 options:(unsigned int)fp12;
- (unsigned int)_numberOfSubexpressions;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (id)expressionString;
- (struct _NSRange)matchedRangeForString:(id)fp8 range:(struct _NSRange)fp12 subexpressionRanges:(struct _NSRange *)fp20 count:(unsigned int)fp24;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;

@end

@interface MainPerformanceLogger : PerformanceLogger
{
    NSMutableArray *_subtests;
}

+ (void)startLoggingForArea:(id)fp8 test:(id)fp12;
+ (void)stopLoggingForArea:(id)fp8 test:(id)fp12;
+ (void)logMarker:(id)fp8;
- (void)dealloc;
- (id)addLoggerForSubtest:(id)fp8;
- (id)description;
- (id)subtests;
- (void)setSubtests:(id)fp8;

@end

@interface PerformanceLogger : NSObject
{
    NSCondition *_condition;
    NSString *_area;
    NSString *_test;
    NSString *_subtest;
    NSString *_key;
    double _startTime;
    double _totalDelta;
    unsigned int _count;
    BOOL _isFinished;
    BOOL _isMarker;
}

+ (void)initialize;
+ (id)startLoggingForArea:(id)fp8 test:(id)fp12 subtest:(id)fp16;
+ (id)stopLoggingForArea:(id)fp8 test:(id)fp12 subtest:(id)fp16;
+ (id)stopLoggingForArea:(id)fp8 test:(id)fp12 subtest:(id)fp16 count:(unsigned int)fp20 didFinish:(BOOL)fp24;
+ (id)_loggerForArea:(id)fp8 test:(id)fp12 subtest:(id)fp16;
+ (void)_addLogger:(id)fp8 forKey:(id)fp12;
+ (id)_keyForArea:(id)fp8 test:(id)fp12 subtest:(id)fp16;
- (id)initWithArea:(id)fp8 test:(id)fp12;
- (id)initWithArea:(id)fp8 test:(id)fp12 subtest:(id)fp16;
- (id)description;
- (void)waitUntilFinished;
- (BOOL)isMarker;
- (void)setIsMarker:(BOOL)fp8;
- (BOOL)isFinished;
- (void)setIsFinished:(BOOL)fp8;
- (unsigned int)count;
- (void)setCount:(unsigned int)fp8;
- (double)totalDelta;
- (void)setTotalDelta:(double)fp8;
- (double)startTime;
- (void)setStartTime:(double)fp8;
- (id)key;
- (void)setKey:(id)fp8;
- (id)subtest;
- (void)setSubtest:(id)fp8;
- (id)test;
- (void)setTest:(id)fp8;
- (id)area;
- (void)setArea:(id)fp8;
- (id)condition;
- (void)setCondition:(id)fp8;

@end

@interface Criterion : NSObject
{
    NSString *_uniqueId;
    NSString *_name;
    NSString *_expression;
    NSString *_criterionIdentifier;
    int _criterionType;
    int _qualifier;
    int _dateUnits;
    BOOL _dateIsRelative;
    NSArray *_criteria;
    BOOL _allCriteriaMustBeSatisfied;
    NSString *_cachedAccountURLForSyncConflictResolution;
    int _specialMailboxUidType;
}

+ (id)criteriaFromDefaultsArray:(id)fp8;
+ (id)criteriaFromDefaultsArray:(id)fp8 removingRecognizedKeys:(BOOL)fp12;
+ (id)defaultsArrayFromCriteria:(id)fp8;
+ (id)compoundCriterionWithCriteria:(id)fp8;
+ (int)criterionTypeForString:(id)fp8;
+ (id)stringForCriterionType:(int)fp8;
- (id)compoundCriterionBySplittingExpression;
- (void)dealloc;
- (id)init;
- (id)initWithCriterion:(id)fp8 expression:(id)fp12;
- (id)initWithDictionary:(id)fp8 andRemoveRecognizedKeysIfMutable:(BOOL)fp12;
- (id)initWithDictionary:(id)fp8;
- (id)dictionaryRepresentation;
- (int)criterionType;
- (BOOL)hasExpression;
- (void)setCriterionType:(int)fp8;
- (void)setCriterionIdentifier:(id)fp8;
- (void)_setCriterionIdentifier:(id)fp8;
- (id)criterionIdentifier;
- (id)_qualifierString;
- (BOOL)containsBodyCriterion;
- (int)ruleQualifierForString:(id)fp8;
- (id)stringForRuleQualifier:(int)fp8;
- (id)simplifyOnce;
- (id)simplifiedCriterion;
- (void)setCriteria:(id)fp8;
- (id)descriptionWithDepth:(unsigned int)fp8;
- (id)description;
- (BOOL)isValid:(id *)fp8 options:(unsigned long)fp12;
- (int)specialMailboxUidType;
- (void)setSpecialMailboxUidType:(int)fp8;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)fp8;
- (id)criteria;
- (BOOL)dateIsRelative;
- (void)setDateIsRelative:(BOOL)fp8;
- (int)dateUnits;
- (void)setDateUnits:(int)fp8;
- (int)qualifier;
- (void)setQualifier:(int)fp8;
- (id)expression;
- (void)setExpression:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;

@end

@interface EnclosureTransporter : NSObject
{
    NSURL *URL;
    NSString *MIMEType;
    long long length;
}

- (void)dealloc;
- (id)initWithEnclosure:(id)fp8;
- (long long)length;
- (void)setLength:(long long)fp8;
- (id)MIMEType;
- (void)setMIMEType:(id)fp8;
- (id)URL;
- (void)setURL:(id)fp8;

@end

@interface AuthorTransporter : NSObject
{
    NSString *name;
    NSString *email;
}

- (void)dealloc;
- (id)initWithAuthor:(id)fp8;
- (id)email;
- (void)setEmail:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;

@end

@interface EntryTransporter : NSObject
{
    NSString *title;
    NSString *identifier;
    NSURL *alternateURL;
    NSURL *baseURL;
    BOOL isRead;
    BOOL isFlagged;
    NSDate *datePublished;
    NSTimeZone *timeZonePublished;
    NSDate *dateUpdated;
    NSTimeZone *timeZoneUpdated;
    NSArray *authors;
    NSArray *enclosures;
    NSString *HTMLContent;
    NSString *textContent;
}

+ (id)transporterArrayWithEntries:(id)fp8;
- (void)dealloc;
- (id)initWithEntry:(id)fp8;
- (id)enclosures;
- (void)setEnclosures:(id)fp8;
- (id)authors;
- (void)setAuthors:(id)fp8;
- (id)textContent;
- (void)setTextContent:(id)fp8;
- (id)HTMLContent;
- (void)setHTMLContent:(id)fp8;
- (id)timeZoneUpdated;
- (void)setTimeZoneUpdated:(id)fp8;
- (id)dateUpdated;
- (void)setDateUpdated:(id)fp8;
- (id)timeZonePublished;
- (void)setTimeZonePublished:(id)fp8;
- (id)datePublished;
- (void)setDatePublished:(id)fp8;
- (BOOL)isFlagged;
- (void)setIsFlagged:(BOOL)fp8;
- (BOOL)isRead;
- (void)setIsRead:(BOOL)fp8;
- (id)baseURL;
- (void)setBaseURL:(id)fp8;
- (id)alternateURL;
- (void)setAlternateURL:(id)fp8;
- (id)identifier;
- (void)setIdentifier:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;

@end

@interface FeedTransporter : NSObject
{
    NSString *title;
    NSString *identifier;
    NSURL *alternateURL;
    NSURL *URL;
    NSError *lastError;
    NSDate *dateUpdated;
    NSTimeZone *timeZoneUpdated;
}

+ (id)transporterWithFeed:(id)fp8;
- (void)dealloc;
- (id)initWithFeed:(id)fp8;
- (id)timeZoneUpdated;
- (void)setTimeZoneUpdated:(id)fp8;
- (id)dateUpdated;
- (void)setDateUpdated:(id)fp8;
- (id)lastError;
- (void)setLastError:(id)fp8;
- (id)URL;
- (void)setURL:(id)fp8;
- (id)alternateURL;
- (void)setAlternateURL:(id)fp8;
- (id)identifier;
- (void)setIdentifier:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;

@end

@interface IMAPClientLSubOperation : IMAPClientListOperation
{
}

- (id)initWithMailboxName:(id)fp8 referenceName:(id)fp12 options:(int)fp16;
- (const char *)commandTypeCString;

@end

@interface IMAPClientListOperation : IMAPSingleClientOperation
{
    NSString *_mailboxName;
    NSString *_referenceName;
    int _options;
    NSMutableDictionary *_listing;
    NSString *_separator;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 referenceName:(id)fp12 options:(int)fp16;
- (id)initWithMailboxName:(id)fp8 options:(int)fp12;
- (const char *)commandTypeCString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)separator;
- (void)setSeparator:(id)fp8;
- (id)listing;
- (void)setListing:(id)fp8;
- (int)options;
- (void)setOptions:(int)fp8;
- (id)referenceName;
- (void)setReferenceName:(id)fp8;
- (id)mailboxName;
- (void)setMailboxName:(id)fp8;

@end

@interface IMAPClientCloseOperation : IMAPClientUnselectOperation
{
}

- (id)init;
- (const char *)commandTypeCString;

@end

@interface IMAPClientUnselectOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPClientExpungeOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;

@end

@interface IMAPClientCheckOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;

@end

@interface IMAPClientLogoutOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPClientNoopOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPClientCapabilityOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPAggregateClientOperation : IMAPClientOperation
{
    NSMutableArray *_operations;
}

- (void)dealloc;
- (id)initWithCommandType:(int)fp8 operations:(id)fp12;
- (int)composition;
- (void)setGateway:(id)fp8;
- (void)cleanupAfterCompletion;
- (id)operations;
- (void)setOperations:(id)fp8;

@end

@interface IMAPSingleClientOperation : IMAPClientOperation
{
    NSMutableArray *_untaggedResponses;
    MFError *_error;
    unsigned int _sequenceNumber;
    unsigned int _sessionNumber;
    BOOL _isComplete;
}

- (void)dealloc;
- (int)composition;
- (BOOL)handlesAllUntaggedResponses;
- (void)setSequenceNumber:(unsigned int)fp8;
- (void)cleanupAfterCompletion;
- (id)debugCommandString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (id)tag;
- (id)createCommandString;
- (BOOL)isComplete;
- (void)setIsComplete:(BOOL)fp8;
- (unsigned int)sessionNumber;
- (void)setSessionNumber:(unsigned int)fp8;
- (unsigned int)sequenceNumber;
- (id)error;
- (void)setError:(id)fp8;
- (id)untaggedResponses;
- (void)setUntaggedResponses:(id)fp8;

@end

@interface IMAPClientSuspendOperation : IMAPClientOperation
{
    BOOL _shouldExecuteSynchronously;
}

- (id)init;
- (const char *)commandTypeCString;
- (BOOL)shouldExecuteSynchronously;
- (void)setShouldExecuteSynchronously:(BOOL)fp8;

@end

@interface IMAPClientOperation : ConcurrentOperation
{
    int _commandType;
    IMAPGateway *_gateway;
    NSCondition *_finishCondition;
    int _completionState;
}

+ (id)IMAPCreateQuotedString:(id)fp8;
+ (id)IMAPCreateStringForMailboxName:(id)fp8;
+ (id)IMAPNeedsLiteralCharacterSet;
+ (id)_IMAPNeedsQuoteCharacterSet;
- (void)dealloc;
- (id)init;
- (id)initWithCommandType:(int)fp8;
- (const char *)commandTypeCString;
- (BOOL)alwaysAllowToComplete;
- (int)requiredConnectionState;
- (int)composition;
- (BOOL)isWaitingToStart;
- (id)activityString;
- (id)detailsString;
- (void)cleanupAfterCompletion;
- (BOOL)completedSuccessfully;
- (void)increasePriority;
- (void)start;
- (void)main;
- (void)setupForExecution;
- (void)teardownFromExecution;
- (BOOL)executeOnConnection:(id)fp8;
- (void)setFinished:(BOOL)fp8;
- (id)description;
- (int)completionState;
- (void)setCompletionState:(int)fp8;
- (id)finishCondition;
- (void)setFinishCondition:(id)fp8;
- (id)gateway;
- (void)setGateway:(id)fp8;
- (int)commandType;
- (void)setCommandType:(int)fp8;

@end

@interface IMAPClientOperationQueue : NSOperationQueue
{
    IMAPClientDoneOperation *_doneOperation;
    IMAPClientSelectOperation *_selectOperation;
    IMAPClientSuspendOperation *_suspendOperation;
    NSMutableSet *_blockingOperations;
    NSRecursiveLock *_addOperationLock;
}

- (void)dealloc;
- (id)init;
- (id)selectedMailboxName;
- (BOOL)addClientOperation:(id)fp8;
- (BOOL)waitUntilOperationIsFinished:(id)fp8;
- (void)stopCurrentOperation;
- (void)changeSelectDependenciesTo:(id)fp8;
- (void)setupDependeciesOnDone:(id)fp8;
- (void)clearDone;
- (BOOL)isIdle;
- (BOOL)setupDependenciesOnSuspendCreatingIfNeeded;
- (void)suspendIfNeededAndClear:(BOOL)fp8;
- (void)setSuspendOperation:(id)fp8;
- (id)suspendOperation;
- (BOOL)finishIdlingAndSuspend:(BOOL)fp8;
- (void)_logErrorAndAbort:(id)fp8;
- (id)description;
- (id)addOperationLock;
- (void)setAddOperationLock:(id)fp8;
- (id)blockingOperations;
- (void)setBlockingOperations:(id)fp8;
- (id)selectOperation;
- (void)setSelectOperation:(id)fp8;
- (id)doneOperation;
- (void)setDoneOperation:(id)fp8;

@end

@interface IMAPClientAppendOperation : IMAPClientMailboxOperation
{
    NSDate *_dateReceived;
    NSArray *_serverFlags;
    NSData *_data;
    NSDictionary *_newMessageInfo;
    BOOL _shouldTryCreate;
    ActivityMonitor *_progressMonitor;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 flags:(id)fp12 dateReceived:(id)fp16 data:(id)fp20;
- (const char *)commandTypeCString;
- (id)detailsString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)progressMonitor;
- (void)setProgressMonitor:(id)fp8;
- (BOOL)shouldTryCreate;
- (void)setShouldTryCreate:(BOOL)fp8;
- (id)newMessageInfo;
- (void)setNewMessageInfo:(id)fp8;
- (id)data;
- (void)setData:(id)fp8;
- (id)serverFlags;
- (void)setServerFlags:(id)fp8;
- (id)dateReceived;
- (void)setDateReceived:(id)fp8;

@end

@interface IMAPAggregateStatusOperation : IMAPAggregateClientOperation
{
}

- (id)initWithOperations:(id)fp8;
- (const char *)commandTypeCString;

@end

@interface IMAPClientStatusOperation : IMAPClientMailboxOperation
{
    unsigned int _dataItems;
    NSString *_dataItemsString;
    NSDictionary *_statusEntries;
}

+ (id)createStringForDataItems:(unsigned int)fp8;
- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 dataItems:(unsigned int)fp12;
- (const char *)commandTypeCString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)statusEntries;
- (void)setStatusEntries:(id)fp8;
- (id)dataItemsString;
- (void)setDataItemsString:(id)fp8;
- (unsigned int)dataItems;
- (void)setDataItems:(unsigned int)fp8;

@end

@interface IMAPClientRenameOperation : IMAPClientMailboxOperation
{
    NSString *_newMailboxName;
    NSString *_newMailboxArgumentName;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 newMailboxName:(id)fp12;
- (const char *)commandTypeCString;
- (id)detailsString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (id)newMailboxArgumentName;
- (void)setNewMailboxArgumentName:(id)fp8;
- (id)newMailboxName;
- (void)setNewMailboxName:(id)fp8;

@end

@interface IMAPClientUnsubscribeOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;

@end

@interface IMAPClientSubscribeOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPClientDeleteOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;

@end

@interface IMAPClientCreateOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;

@end

@interface IMAPClientExamineOperation : IMAPClientSelectOperation
{
}

- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;
- (BOOL)readOnly;

@end

@interface IMAPClientSelectOperation : IMAPClientMailboxOperation
{
    IMAPMailbox *_imapMailbox;
    BOOL _delayed;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;
- (BOOL)handlesAllUntaggedResponses;
- (BOOL)executeOnConnection:(id)fp8;
- (BOOL)isReady;
- (BOOL)readOnly;
- (void)setDelayed:(BOOL)fp8;
- (BOOL)delayed;
- (id)imapMailbox;
- (void)setImapMailbox:(id)fp8;

@end

@interface IMAPClientMailboxOperation : IMAPSingleClientOperation
{
    NSString *_mailboxName;
    NSString *_mailboxArgumentName;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8;
- (id)_initWithCommandType:(int)fp8 mailboxName:(id)fp12;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (id)description;
- (id)mailboxArgumentName;
- (void)setMailboxArgumentName:(id)fp8;
- (id)mailboxName;
- (void)setMailboxName:(id)fp8;

@end

@interface IMAPClientLoginOperation : IMAPSingleClientOperation
{
    NSString *_username;
    NSString *_quotedUsername;
    NSString *_password;
    NSString *_quotedPassword;
    NSData *_literalPassword;
}

- (void)dealloc;
- (id)initWithUsername:(id)fp8 password:(id)fp12;
- (const char *)commandTypeCString;
- (id)debugCommandString;
- (BOOL)handlesAllUntaggedResponses;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)literalPassword;
- (void)setLiteralPassword:(id)fp8;
- (id)quotedPassword;
- (void)setQuotedPassword:(id)fp8;
- (id)password;
- (void)setPassword:(id)fp8;
- (id)quotedUsername;
- (void)setQuotedUsername:(id)fp8;
- (id)username;
- (void)setUsername:(id)fp8;

@end

@interface IMAPClientAuthenticateOperation : IMAPSingleClientOperation
{
    NSString *_authenticateType;
    SASLAuthenticator *_authenticator;
}

- (void)dealloc;
- (id)initWithAuthenticator:(id)fp8;
- (const char *)commandTypeCString;
- (BOOL)handlesAllUntaggedResponses;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)authenticator;
- (void)setAuthenticator:(id)fp8;
- (id)authenticateType;
- (void)setAuthenticateType:(id)fp8;

@end

@interface IMAPClientStartTLSOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;

@end

@interface IMAPClientUIDSearchOperation : IMAPClientUIDOperation
{
    NSArray *_terms;
    NSMutableIndexSet *_matchingUIDs;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 range:(CDAnonymousStruct2)fp12 terms:(id)fp20;
- (const char *)commandTypeCString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (id)_createArgumentForSearchTerm:(id)fp8 isLiteral:(char *)fp12;
- (BOOL)executeOnConnection:(id)fp8;
- (id)matchingUIDs;
- (void)setMatchingUIDs:(id)fp8;
- (id)terms;
- (void)setTerms:(id)fp8;

@end

@interface IMAPClientUIDCopyOperation : IMAPClientUIDOperation
{
    NSString *_copyMailboxName;
    NSString *_copyMailboxArgumentName;
    NSDictionary *_newMessageInfo;
    BOOL _shouldTryCreate;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 UIDs:(id)fp12 destinationMailboxName:(id)fp16;
- (const char *)commandTypeCString;
- (id)detailsString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (BOOL)shouldTryCreate;
- (void)setShouldTryCreate:(BOOL)fp8;
- (id)newMessageInfo;
- (void)setNewMessageInfo:(id)fp8;
- (id)copyMailboxArgumentName;
- (void)setCopyMailboxArgumentName:(id)fp8;
- (id)copyMailboxName;
- (void)setCopyMailboxName:(id)fp8;

@end

@interface IMAPClientUIDStoreOperation : IMAPClientUIDOperation
{
    BOOL _addFlags;
    NSArray *_serverFlags;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 UIDs:(id)fp12 add:(BOOL)fp16 flags:(id)fp20;
- (id)initWithMailboxName:(id)fp8 range:(CDAnonymousStruct2)fp12 add:(BOOL)fp20 flags:(id)fp24;
- (const char *)commandTypeCString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)serverFlags;
- (void)setServerFlags:(id)fp8;
- (BOOL)addFlags;
- (void)setAddFlags:(BOOL)fp8;

@end

@interface IMAPClientUIDExpungeOperation : IMAPClientUIDOperation
{
}

- (id)initWithMailboxName:(id)fp8 UIDs:(id)fp12;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPClientUIDOperation : IMAPClientMailboxOperation
{
    NSIndexSet *_UIDs;
    CDAnonymousStruct2 _range;
}

+ (id)createMessageSetForRange:(CDAnonymousStruct2)fp8;
+ (id)createMessageSetForNumbers:(id)fp8 range:(struct _NSRange)fp12;
+ (id)createMessageSetForIndexSet:(id)fp8;
- (void)dealloc;
- (id)initWithMailboxName:(id)fp8 UIDs:(id)fp12;
- (id)_initWithCommandType:(int)fp8 mailboxName:(id)fp12 range:(CDAnonymousStruct2)fp16;
- (id)_initWithCommandType:(int)fp8 mailboxName:(id)fp12 UIDs:(id)fp16;
- (id)_initWithCommandType:(int)fp8 mailboxName:(id)fp12 UIDs:(id)fp16 range:(CDAnonymousStruct2)fp20;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (CDAnonymousStruct2)range;
- (void)setRange:(CDAnonymousStruct2)fp8;
- (id)UIDs;
- (void)setUIDs:(id)fp8;

@end

@interface IMAPClientData : NSObject
{
    NSMutableData *_data;
    NSMutableString *_commandString;
    IMAPClientData *_nextData;
    struct _NSRange _dontLogRange;
    BOOL _isFrozen;
}

- (void)dealloc;
- (id)initWithData:(id)fp8;
- (id)initWithStringWaitingForArguments:(id)fp8;
- (void)addStringArgument:(id)fp8;
- (void)addDataArgument:(id)fp8 literalPlus:(BOOL)fp12;
- (void)freeze;
- (BOOL)isFrozen;
- (void)setIsFrozen:(BOOL)fp8;
- (struct _NSRange)dontLogRange;
- (void)setDontLogRange:(struct _NSRange)fp8;
- (id)nextData;
- (void)setNextData:(id)fp8;
- (id)commandString;
- (void)setCommandString:(id)fp8;
- (id)data;
- (void)setData:(id)fp8;

@end

@interface IMAPClientNamespaceOperation : IMAPSingleClientOperation
{
    IMAPAccount *_account;
    NSString *_separatorChar;
    NSArray *_privateNamespaces;
    NSArray *_publicNamespaces;
    NSArray *_sharedNamespaces;
}

- (void)dealloc;
- (id)initWithAccount:(id)fp8 separatorChar:(id)fp12;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;
- (id)sharedNamespaces;
- (void)setSharedNamespaces:(id)fp8;
- (id)publicNamespaces;
- (void)setPublicNamespaces:(id)fp8;
- (id)privateNamespaces;
- (void)setPrivateNamespaces:(id)fp8;
- (id)separatorChar;
- (void)setSeparatorChar:(id)fp8;
- (id)account;
- (void)setAccount:(id)fp8;

@end

@interface IMAPClientDoneOperation : IMAPSingleClientOperation
{
    NSDate *_resetDate;
    BOOL _resetDateHasPassed;
    BOOL _updatingReadiness;
    BOOL _shouldQueueIdleWhenFinished;
}

- (void)dealloc;
- (id)init;
- (const char *)commandTypeCString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (void)setResetDate:(id)fp8;
- (id)resetDate;
- (void)setFinished:(BOOL)fp8;
- (void)setSequenceNumber:(unsigned int)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (BOOL)isReady;
- (void)updateReadiness;
- (void)setResetDateEarlierThanNow;
- (BOOL)shouldQueueIdleWhenFinished;
- (void)setShouldQueueIdleWhenFinished:(BOOL)fp8;

@end

@interface IMAPClientIdleOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (const char *)commandTypeCString;
- (BOOL)executeOnConnection:(id)fp8;

@end

@interface IMAPClientGetQuotaOperation : IMAPSingleClientOperation
{
    NSString *_quotaRoot;
}

- (void)dealloc;
- (id)initWithQuotaRoot:(id)fp8;
- (const char *)commandTypeCString;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (id)quotaRoot;
- (void)setQuotaRoot:(id)fp8;

@end

@interface IMAPAggregateGetQuotaRootOperation : IMAPAggregateClientOperation
{
}

- (id)initWithOperations:(id)fp8;
- (const char *)commandTypeCString;

@end

@interface IMAPClientGetQuotaRootOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)fp8;
- (const char *)commandTypeCString;

@end

@interface IMAPAggregateFetchUIDOperation : IMAPAggregateClientOperation
{
    unsigned int _expectedSize;
}

- (id)initWithOperations:(id)fp8 expectedSize:(unsigned long)fp12;
- (const char *)commandTypeCString;
- (void)cleanupAfterCompletion;
- (unsigned long)expectedSize;
- (void)setExpectedSize:(unsigned long)fp8;

@end

@interface IMAPClientFetchUIDOperation : IMAPClientFetchOperation
{
    NSIndexSet *_UIDs;
    id <IMAPResponseHandler> _responseHandler;
}

- (void)dealloc;
- (id)init;
- (id)initWithUIDs:(id)fp8;
- (const char *)commandTypeCString;
- (id)_createMessageSetCommandString;
- (id)responseHandler;
- (void)setResponseHandler:(id)fp8;
- (id)UIDs;
- (void)setUIDs:(id)fp8;

@end

@interface IMAPClientFetchOperation : IMAPSingleClientOperation
{
    CDAnonymousStruct2 _range;
    NSMutableArray *_dataItems;
}

- (void)dealloc;
- (id)init;
- (id)initWithRange:(CDAnonymousStruct2)fp8;
- (const char *)commandTypeCString;
- (void)addDataItem:(id)fp8;
- (void)addMessageSkeletonDataItemsWithAdditionalHeaderFields:(id)fp8;
- (void)addMessageUidsAndFlagsDataItemsWithAdditionalHeaderFields:(id)fp8;
- (id)createCommandDataForLiteralPlus:(BOOL)fp8;
- (BOOL)executeOnConnection:(id)fp8;
- (id)dataItems;
- (void)setDataItems:(id)fp8;
- (CDAnonymousStruct2)range;
- (void)setRange:(CDAnonymousStruct2)fp8;

@end

@interface IMAPClientFetchOperation (Internal)
+ (id)_headersToFetch;
+ (id)_fetchDataItemsForMessageSkeletonsWithHeaders:(id)fp8;
- (id)_createMessageSetCommandString;
- (id)_fetchDataItemsForMessageSkeletonsWithAdditionalHeaderFields:(id)fp8;
@end

@interface IMAPClientFetchBodyDataItem : IMAPClientFetchDataItem
{
    int _textSectionSpecifier;
    NSString *_partSectionSpecifier;
    NSArray *_headerFieldNames;
    BOOL _peek;
    struct _NSRange _dataRange;
}

+ (id)createSectionSpecifierFromPart:(id)fp8 text:(int)fp12;
- (void)dealloc;
- (id)initWithPartSectionSpecifier:(id)fp8 textSectionSpecifier:(int)fp12 dataRange:(struct _NSRange)fp16;
- (id)initWithHeaderFieldNames:(id)fp8;
- (id)initWithPartSectionSpecifier:(id)fp8 textSectionSpecifier:(int)fp12 peek:(BOOL)fp16 headerFieldNames:(id)fp20 dataRange:(struct _NSRange)fp24;
- (BOOL)isHeader;
- (void)_finalizeCommandString;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (struct _NSRange)dataRange;
- (void)setDataRange:(struct _NSRange)fp8;
- (BOOL)peek;
- (void)setPeek:(BOOL)fp8;
- (id)headerFieldNames;
- (void)setHeaderFieldNames:(id)fp8;
- (id)partSectionSpecifier;
- (void)setPartSectionSpecifier:(id)fp8;
- (int)textSectionSpecifier;
- (void)setTextSectionSpecifier:(int)fp8;

@end

@interface IMAPClientFetchDataItem : NSObject
{
    NSString *_commandString;
}

+ (id)flagsDataItem;
+ (id)UIDDataItem;
+ (id)bodyStructureDataItem;
+ (id)internalDateDataItem;
+ (id)sizeDataItem;
- (void)dealloc;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (id)commandString;
- (void)setCommandString:(id)fp8;

@end

@interface IMAPMailbox : NSObject
{
    id <IMAPMailboxDelegate> _delegate;
    MailboxUid *_mailboxUid;
    unsigned int _permanentFlags;
    NSString *_referenceName;
    BOOL _readOnly;
    BOOL _uidNotSticky;
    IMAPGateway *_selectedGateway;
    NSArray *_quotaRoots;
    unsigned int _exists;
    CDAnonymousStruct3 _quotaUsage;
    unsigned int _uidNext;
    unsigned int _uidValidity;
    NSMutableArray *_unprocessedResponses;
    BOOL _hasNewResponses;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)fp8;
- (void)setDelegate:(id)fp8;
- (id)selectedGateway;
- (void)setSelectedGateway:(id)fp8;
- (void)setExists:(unsigned int)fp8;
- (void)setUidValidity:(unsigned int)fp8;
- (void)setHasNewResponses:(BOOL)fp8;
- (void)setTotalSize:(unsigned int)fp8 forQuotaMessageCount:(unsigned int)fp12;
- (void)setPermanentFlags:(unsigned int)fp8;
- (void)addResponse:(id)fp8;
- (id)removeResponse;
- (id)description;
- (BOOL)hasNewResponses;
- (id)unprocessedResponses;
- (void)setUnprocessedResponses:(id)fp8;
- (unsigned int)uidValidity;
- (unsigned long)uidNext;
- (void)setUidNext:(unsigned long)fp8;
- (CDAnonymousStruct3)quotaUsage;
- (void)setQuotaUsage:(CDAnonymousStruct3)fp8;
- (unsigned int)exists;
- (id)quotaRoots;
- (void)setQuotaRoots:(id)fp8;
- (BOOL)uidNotSticky;
- (void)setUidNotSticky:(BOOL)fp8;
- (BOOL)readOnly;
- (void)setReadOnly:(BOOL)fp8;
- (id)referenceName;
- (void)setReferenceName:(id)fp8;
- (unsigned int)permanentFlags;
- (id)mailboxUid;
- (void)setMailboxUid:(id)fp8;
- (id)delegate;

@end

@interface IMAPQuotaRoot : NSObject
{
    NSString *_name;
    QuotaUsage *_usage;
}

- (void)dealloc;
- (id)initWithName:(id)fp8;
- (void)setUsageFromResponse:(id)fp8;
- (id)description;
- (id)usage;
- (void)setUsage:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;

@end

@interface IMAPGateway : NSObject <MonitoredInvocationQueueDelegate>
{
    IMAPConnectionPool *_connectionPool;
    IMAPConnection *_connection;
    IMAPClientOperationQueue *_operationQueue;
    MonitoredInvocationQueue *_executionQueue;
    NSCondition *_connectionAvailabilityCondition;
    unsigned int _clientCount;
    NSLock *_clientCountLock;
    BOOL _canYield;
    BOOL _remainedDeserted;
    BOOL _needsSelect;
    BOOL _isSealedShut;
}

+ (void)_addIdleGateway:(id)fp8;
+ (void)_removeIdleGateway:(id)fp8;
+ (void)_checkIdleGateways;
- (void)dealloc;
- (id)initWithIMAPConnection:(id)fp8 mailbox:(id)fp12 pool:(id)fp16;
- (void)setConnectionPool:(id)fp8;
- (id)connection;
- (void)setConnection:(id)fp8;
- (void)setOperationQueue:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)checkIn;
- (void)queueDidEmpty;
- (BOOL)_mightWantToCheckInNowWithRetry;
- (BOOL)_mightWantToCheckInNowRetry:(BOOL)fp8;
- (BOOL)checkOut;
- (void)yield;
- (void)suspend;
- (void)resumeWithConnection:(id)fp8 reselect:(BOOL)fp12;
- (void)sealShutAndCompact:(BOOL)fp8 allowNetworking:(BOOL)fp12;
- (BOOL)_finishQueueIdlingAndSuspend:(BOOL)fp8;
- (BOOL)isDeserted;
- (void)allowClientOperationThrough:(id)fp8;
- (void)_allowClientOperationThrough:(id)fp8;
- (void)_executeSuspend:(id)fp8;
- (BOOL)addClientOperation:(id)fp8 toQueueAndWaitUntilFinished:(BOOL)fp12;
- (void)waitUntilClientOperationIsFinished:(id)fp8;
- (void)waitUntilAllOperationsAreFinished;
- (id)mailboxName;
- (void)configureForMailboxName:(id)fp8;
- (BOOL)supportsCapability:(int)fp8;
- (id)mailboxNameIfSelected:(BOOL)fp8;
- (void)_setError:(id *)fp8 fromOperation:(id)fp12;
- (void)_setErrorFromOperation:(id)fp8 overwriteExistingError:(BOOL)fp12;
- (void)noop;
- (void)setServerPathPrefixOnAccount:(id)fp8 withSeparatorChar:(id)fp12;
- (id)namespacesWithSeparatorChar:(id)fp8;
- (void)listingForMailbox:(id)fp8 options:(int)fp12 listingInfo:(id)fp16;
- (void)subscribedListingForMailbox:(id)fp8 options:(int)fp12 listingInfo:(id)fp16;
- (void)fetchStatusForMailboxes:(id)fp8 dataItems:(unsigned int)fp12;
- (id)statusForMailbox:(id)fp8 dataItems:(unsigned int)fp12;
- (BOOL)examineMailbox:(id)fp8;
- (BOOL)selectMailbox:(id)fp8;
- (BOOL)_addSelectOperationForMailbox:(id)fp8 type:(int)fp12;
- (void)_waitForDelayedSelectOperation:(id)fp8;
- (BOOL)_completeSelectOperation:(id)fp8;
- (BOOL)createMailbox:(id)fp8;
- (BOOL)deleteMailbox:(id)fp8;
- (BOOL)renameMailbox:(id)fp8 toMailbox:(id)fp12;
- (BOOL)subscribeMailbox:(id)fp8;
- (BOOL)unsubscribeMailbox:(id)fp8;
- (void)fetchQuotaRootNamesForMailboxes:(id)fp8;
- (BOOL)getQuotaForRootName:(id)fp8;
- (BOOL)check:(id *)fp8;
- (BOOL)expunge;
- (BOOL)expungeUids:(id)fp8;
- (BOOL)_expungeUids:(id)fp8 mailboxName:(id)fp12;
- (void)close;
- (void)logout;
- (void)closeAndLogout;
- (void)unselect;
- (void)fetchTotalSizeAndMessageCount;
- (void)storeFlags:(id)fp8 state:(BOOL)fp12 forUids:(id)fp16;
- (BOOL)_expunge:(BOOL)fp8 orStoreFlags:(id)fp12 state:(BOOL)fp16 forUids:(id)fp20;
- (BOOL)_storeFlags:(id)fp8 state:(BOOL)fp12 forUids:(id)fp16 mailboxName:(id)fp20;
- (BOOL)deleteMessagesOlderThanNumberOfDays:(int)fp8 settingFlags:(id)fp12;
- (BOOL)copyUids:(id)fp8 toMailboxNamed:(id)fp12 messageInfo:(id)fp16 error:(id *)fp20;
- (BOOL)appendData:(id)fp8 toMailboxNamed:(id)fp12 flags:(id)fp16 dateReceived:(id)fp20 messageInfo:(id)fp24 error:(id *)fp28;
- (id)searchUidRange:(CDAnonymousStruct2)fp8 forTerms:(id)fp16;
- (id)searchUidRange:(CDAnonymousStruct2)fp8 forNewMessageIDs:(id)fp16;
- (unsigned int)searchedUidNextForMessageNumber:(unsigned int)fp8;
- (void)refreshDone:(BOOL)fp8 withOperation:(id)fp12;
- (void)startIdle;
- (id)description;
- (BOOL)needsSelect;
- (void)setNeedsSelect:(BOOL)fp8;
- (BOOL)isSealedShut;
- (void)setIsSealedShut:(BOOL)fp8;
- (id)connectionAvailabilityCondition;
- (void)setConnectionAvailabilityCondition:(id)fp8;
- (id)clientCountLock;
- (void)setClientCountLock:(id)fp8;
- (unsigned int)clientCount;
- (void)setClientCount:(unsigned int)fp8;
- (BOOL)remainedDeserted;
- (void)setRemainedDeserted:(BOOL)fp8;
- (BOOL)canYield;
- (void)setCanYield:(BOOL)fp8;
- (id)executionQueue;
- (void)setExecutionQueue:(id)fp8;
- (id)operationQueue;
- (id)connectionPool;

@end

@interface JunkMailFilter : NSObject
{
    struct __LSMMap *_map;
    BOOL _isDirty;
    BOOL _isInTraining;
    BOOL _useCleanMap;
    float _lsmThreshold;
    NSString *_mapFilePath;
    NSURL *_mapFileURL;
    NSURL *_oldMapFileURL;
}

+ (id)sharedInstance;
+ (id)junkFilterUsageCounterKeys;
+ (int)daysUntilTransition;
+ (BOOL)shouldUpdateTrainingDebt;
+ (void)incrementJunkMailTrainingDebtBy:(int)fp8;
+ (void)incrementJunkMailTrainingCreditBy:(int)fp8;
+ (void)resetJunkMailTrainingBalance;
+ (void)resetJunkMailUsageCounters;
- (struct __LSMMap *)map;
- (void)setMap:(struct __LSMMap *)fp8;
- (void)dealloc;
- (unsigned int)evaluatedMessageCount;
- (unsigned int)evaluatedAsJunkMessageCount;
- (unsigned int)manuallyMarkedAsJunkMessageCount;
- (unsigned int)manuallyMarkedAsNotJunkMessageCount;
- (void)reset;
- (void)saveTraining;
- (int)junkMailTrainingBalance;
- (int)junkMailTrainingDebt;
- (int)junkMailTrainingCredit;
- (BOOL)isEnabled;
- (id)state;
- (BOOL)gatherUsageCounts;
- (id)usageCounter;
- (int)junkMailLevelForMessage:(id)fp8;
- (int)junkMailLevelForMessage:(id)fp8 junkRecorder:(id)fp12;
- (id)trainOnMessages:(id)fp8 junkMailLevel:(int)fp12;
- (void)userDidReplyToMessage:(id)fp8;
- (float)lsmThreshold;
- (void)setLsmThreshold:(float)fp8;
- (id)mapFilePath;
- (void)setMapFilePath:(id)fp8;
- (id)mapFileURL;
- (void)setMapFileURL:(id)fp8;
- (id)oldMapFileURL;
- (void)setOldMapFileURL:(id)fp8;
- (BOOL)useCleanMap;
- (void)setUseCleanMap:(BOOL)fp8;

@end

@interface MessageStringRenderContext : NSObject
{
    NSSet *_URLs;
    NSSet *_imageURLs;
    JunkRecorder *_junkRecorder;
    int _mode;
    NSMutableString *_buffer;
    BOOL _updateBodyFlags;
    int _imageCount;
    int _characterCount;
}

- (id)initForMode:(int)fp8;
- (id)renderString;
- (void)dealloc;
- (id)buffer;
- (void)setBuffer:(id)fp8;
- (BOOL)updateBodyFlags;
- (void)setUpdateBodyFlags:(BOOL)fp8;
- (int)mode;
- (id)imageURLs;
- (void)setImageURLs:(id)fp8;
- (id)URLs;
- (void)setURLs:(id)fp8;
- (int)characterCount;
- (void)setCharacterCount:(int)fp8;
- (int)imageCount;
- (void)setImageCount:(int)fp8;
- (id)junkRecorder;
- (void)setJunkRecorder:(id)fp8;

@end

@interface MimePart (StringRendering)
- (void)renderString:(id)fp8;
@end

@interface MimeBody (StringRendering)
- (void)renderStringForJunk:(id)fp8;
- (void)renderString:(id)fp8;
@end

@interface MessageBody (StringRendering)
- (void)renderString:(id)fp8;
@end

@interface Message (StringRendering)
- (void)renderHeaders:(id)fp8;
- (void)renderBody:(id)fp8;
- (void)renderString:(id)fp8;
@end

@interface MetadataLogger : NSObject
{
    BOOL _logiCalToDoSync;
    BOOL _logStoresToDoSync;
    BOOL _logInternal;
    BOOL _logCommits;
    BOOL _logReconciler;
    NSArray *_logToDoActivityOnHost;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)logToDos:(id)fp8;
- (void)logCalendars:(id)fp8;
- (void)addingToDos:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)deletingToDos:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)updatingToDos:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)commitAddingToDos:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)commitDeletingToDos:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)commitUpdatingToDos:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)toDosFromIMAP:(id)fp8;
- (void)toDosFromiCal:(id)fp8;
- (void)messageNotToDo:(id)fp8;
- (void)updatingToDoWithID:(id)fp8 newRemoteID:(id)fp12;
- (void)imapToDosToInsert:(id)fp8 imapToDosToUpdate:(id)fp12;
- (void)libraryToDoStore:(id)fp8 isAddingToDos:(id)fp12;
- (void)libraryToDoStore:(id)fp8 isUpdatingToDos:(id)fp12;
- (void)libraryToDoStore:(id)fp8 isDeletingToDos:(id)fp12;
- (void)libraryToDoIMAPStore:(id)fp8 isAddingToDos:(id)fp12;
- (void)libraryToDoIMAPStore:(id)fp8 isUpdatingToDos:(id)fp12;
- (void)libraryToDoIMAPStore:(id)fp8 isDeletingToDos:(id)fp12;
- (void)startingReconciliationForMailbox:(unsigned int)fp8 requester:(id)fp12;
- (void)finishedReconciliationForMailbox:(unsigned int)fp8 requester:(id)fp12;
- (void)storeWithID:(unsigned int)fp8 hasAdds:(id)fp12 updates:(id)fp16 deletes:(id)fp20;
- (void)cacheWithID:(unsigned int)fp8 hasAdds:(id)fp12 updates:(id)fp16 deletes:(id)fp20;
- (void)analyzerWorkingWithStoreSnapshot:(id)fp8 referenceSnapshot:(id)fp12 cacheSnapshot:(id)fp16;
- (void)aboutToAnalyzeDifferenceTable:(id)fp8;
- (void)processedDifferenceTableExpression:(id)fp8 result:(id)fp12;
- (void)calendarsFromiCal:(id)fp8;
- (void)addingCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)updatingCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (void)deletingCalendars:(id)fp8 reflectToCalendarStore:(id)fp12;
- (unsigned int)nextCommandNumber;

@end

@interface NoObject : NSNumber
{
}

+ (id)sharedInstance;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;

@end

@interface YesObject : NSNumber
{
}

+ (id)sharedInstance;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;

@end

@interface JunkRecorder : NSObject
{
    BOOL _isShort;
    BOOL _isSigned;
    int _imageCount;
    int _characterCount;
    float _imageToTextRatio;
    NSMutableDictionary *_imageInfos;
    float _lsmScore;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (float)lsmScore;
- (void)setLsmScore:(float)fp8;
- (BOOL)isShort;
- (void)setIsShort:(BOOL)fp8;
- (BOOL)isSigned;
- (void)setIsSigned:(BOOL)fp8;
- (id)imageInfos;
- (void)setImageInfos:(id)fp8;
- (float)imageToTextRatio;
- (void)setImageToTextRatio:(float)fp8;
- (int)characterCount;
- (void)setCharacterCount:(int)fp8;
- (int)imageCount;
- (void)setImageCount:(int)fp8;

@end

@interface ImageJunkMetadata : NSObject
{
    int _type;
    struct _NSSize _size;
    unsigned int _frameCount;
    unsigned int _pixelCount;
    unsigned int _byteCount;
    float _density;
    BOOL _isAnimated;
}

+ (id)stringForImageType:(int)fp8;
+ (id)lsmMarkerForImageSizeCategory:(int)fp8;
+ (id)lsmMarkerForImageDensityCategory:(int)fp8;
- (id)initWithImage:(id)fp8 name:(id)fp12 type:(int)fp16;
- (void)dealloc;
- (void)computeDensity;
- (void)setByteCount:(unsigned int)fp8;
- (void)setPixelCount:(unsigned int)fp8;
- (int)sizeCategory;
- (int)densityCategory;
- (id)description;
- (unsigned int)frameCount;
- (void)setFrameCount:(unsigned int)fp8;
- (BOOL)isAnimated;
- (void)setIsAnimated:(BOOL)fp8;
- (float)density;
- (void)setDensity:(float)fp8;
- (unsigned int)byteCount;
- (unsigned int)pixelCount;
- (struct _NSSize)size;
- (void)setSize:(struct _NSSize)fp8;
- (int)type;
- (void)setType:(int)fp8;

@end

@interface NSPersistentStoreCoordinator (MailAdditions)
- (id)_addSQLPersistentStoreFromPath:(id)fp8 URL:(id)fp12 type:(int)fp16 recoveringFromError:(id)fp20;
- (id)addSQLPersistentStoreFromPath:(id)fp8 type:(int)fp12 error:(id *)fp16;
@end

@interface ChangeMerger : NSObject
{
    NSMutableDictionary *_adds;
    NSMutableDictionary *_updates;
    NSMutableDictionary *_deletes;
}

- (void)add:(id)fp8;
- (void)update:(id)fp8;
- (void)delete:(id)fp8;
- (id)addedObjects;
- (id)updatedObjects;
- (id)deletedObjects;
- (void)changesSaved;

@end

@interface PreparedStatementManager : NSObject
{
    NSMutableDictionary *_statementCachesByDB;
    NSLock *_preparedStatementManagerLock;
}

+ (id)defaultManager;
+ (id)allocWithZone:(struct _NSZone *)fp8;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)statementsForDB:(id)fp8;
- (void)addToCache:(id)fp8 inDBKey:(id)fp12 forPatternString:(id)fp16;
- (id)checkOutPreparedStatement:(struct sqlite3 *)fp8 withPattern:(const char *)fp12;
- (void)removeStatementCacheEntriesForDB:(struct sqlite3 *)fp8;

@end

@interface PreparedStatement : NSObject
{
    struct sqlite3_stmt *compiled;
    BOOL cachedAndInUse;
}

- (id)initWithString:(const char *)fp8 andDb:(struct sqlite3 *)fp12;
- (int)reset;
- (int)checkIn;
- (void)dealloc;
- (BOOL)cachedAndInUse;
- (void)setCachedAndInUse:(BOOL)fp8;
- (struct sqlite3_stmt *)compiled;
- (void)setCompiled:(struct sqlite3_stmt *)fp8;

@end

@interface LibraryToDoIMAPStore : LibraryIMAPStore
{
    Class _libraryClass;
    IMAPToDoStoreReconciliationAgent *_reconciliationAgent;
    BOOL _isReconciling;
    NSCondition *_libraryIsUpToDateCondition;
    int _pendingLibraryOperations;
    NSConditionLock *_storeIsFreeCondition;
}

- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12 libraryClass:(Class)fp16;
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;
- (void)setReconciliationAgent:(id)fp8;
- (void)dealloc;
- (id)mailboxUid;
- (id)messageForMessageID:(id)fp8;
- (id)messageWithLibraryID:(unsigned int)fp8 options:(unsigned int)fp12;
- (id)lastMessageWithMessageID:(id)fp8 inMailbox:(id)fp12;
- (void)compactMessages:(id)fp8;
- (unsigned int)maximumRemoteIDForMailbox:(id)fp8;
- (id)getDetailsForMessagesWithRemoteIDs:(id)fp8 fromMailbox:(id)fp12;
- (BOOL)hasCacheFileForMessage:(id)fp8 part:(id)fp12 directoryContents:(id)fp16;
- (BOOL)hasCacheFileForMessage:(id)fp8 directoryContents:(id)fp12;
- (void)compactMailbox:(id)fp8;
- (id)messagesForMailbox:(id)fp8 olderThanNumberOfDays:(int)fp12;
- (id)messagesForMailbox:(id)fp8 where:(id)fp12 sortedBy:(id)fp16 ascending:(BOOL)fp20 options:(unsigned int)fp24;
- (id)duplicateMessages:(id)fp8 newRemoteIDs:(id)fp12 newDocumentIDs:(id)fp16 forMailbox:(id)fp20 setFlags:(unsigned long long)fp24 clearFlags:(unsigned long long)fp32 messageFlagsForMessages:(id)fp40 createNewCacheFiles:(BOOL)fp44;
- (id)duplicateMessages:(id)fp8 newRemoteIDs:(id)fp12 newDocumentIDs:(id)fp16 forMailbox:(id)fp20 setFlags:(unsigned long long)fp24 clearFlags:(unsigned long long)fp32 createNewCacheFiles:(BOOL)fp40;
- (id)messageWithRemoteID:(id)fp8 inRemoteMailbox:(id)fp12;
- (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 oldMessagesByNewMessage:(id)fp20;
- (id)addMessages:(id)fp8 withMailbox:(id)fp12 fetchBodies:(BOOL)fp16 isInitialImport:(BOOL)fp20 oldMessagesByNewMessage:(id)fp24 remoteIDs:(id)fp28 setFlags:(unsigned long long)fp32 clearFlags:(unsigned long long)fp40 messageFlagsForMessages:(id)fp48 copyFiles:(BOOL)fp52;
- (id)stringForQuery:(id)fp8 inStore:(id)fp12;
- (unsigned int)unreadCountForMailbox:(id)fp8;
- (unsigned int)deletedCountForMailbox:(id)fp8;
- (void)setBackgroundColorForMessages:(id)fp8 textColorForMessages:(id)fp12;
- (void)setFlagsForMessages:(id)fp8 mask:(unsigned long)fp12;
- (void)setFlagsAndColorForMessages:(id)fp8;
- (void)propagateMessagesWereAdded:(id)fp8 forIncrementalLoading:(BOOL)fp12;
- (BOOL)canSetMessageColors;
- (BOOL)messageHasBeenDeleted:(id)fp8;
- (void)deleteMessages:(id)fp8 moveToTrash:(BOOL)fp12;
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;
- (void)addToDos:(id)fp8;
- (void)updateToDos:(id)fp8;
- (void)deleteToDos:(id)fp8;
- (void)waitUntilStoreIsFree;
- (void)setStoreFree;
- (void)abandonProcessingStore;
- (void)waitForLibraryOperationsToFinish;
- (void)signalCanAcceptNewOperations;
- (void)signalEndOfLibraryOperation;
- (void)willAddMessages;
- (void)didAddMessages;
- (void)willRemoveMessages;
- (void)didRemoveMessages;
- (void)downloadChangesFromIMAP;
- (void)reconcile;
- (void)reconciliationFinished;
- (BOOL)isReconciling;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
- (id)libraryToDoWithRemoteID:(unsigned int)fp8 inMailbox:(unsigned int)fp12;
- (void)updateServerSnapshotForMailboxID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;

@end

@interface LibraryToDoIMAPStore (Internal)
- (void)messagesWereRemoved:(id)fp8;
- (void)addToDosInMessages:(id)fp8;
- (id)messageFromToDo:(id)fp8;
- (void)saveToDosToIMAPServer:(id)fp8;
- (void)deleteToDosFromIMAPServer:(id)fp8;
- (void)deleteToDoWithRemoteID:(id)fp8 inMailbox:(unsigned int)fp12;
@end

@interface IMAPToDoStoreReconciliationAgent : ToDoStoreReconciliationAgent
{
    LibraryToDoIMAPStore *_agentStore;
}

- (void)prepareToReconcileForID:(unsigned int)fp8;
- (void)startToReconcileForID:(unsigned int)fp8;
- (void)applyReconcilerChangesForID:(unsigned int)fp8;
- (void)finishReconciliationForID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
- (void)readyToReconcile;
- (void)requestReconciliation;

@end

@interface LibraryToDoStore : NSObject
{
    Class _libraryClass;
    MailboxUid *_mailboxUid;
    unsigned int _mailboxID;
}

- (id)initWithLibraryClass:(Class)fp8 mailboxUid:(id)fp12 mailboxID:(unsigned int)fp16;
- (id)initWithMailboxUid:(id)fp8 mailboxID:(unsigned int)fp12;
- (void)dealloc;
- (id)mailboxUid;
- (void)updateServerSnapshotForMailboxID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
- (void)addToDos:(id)fp8;
- (void)updateToDos:(id)fp8;
- (void)deleteToDos:(id)fp8;

@end

@interface ToDo : NSObject <NSCopying>
{
    BOOL _dueDateEnabled;
    NSDate *_dueDate;
    BOOL _completed;
    NSDate *_dateCompleted;
    ToDoAlarms *_alarms;
    BOOL _priorityEnabled;
    int _priority;
    ToDoCalendar *_calendar;
    NSString *_calendarID;
    NSString *_calendarTitle;
    NSString *_title;
    NSString *_notes;
    NSURL *_url;
    NSString *_todoID;
    NSString *_previousToDoID;
    NSData *_referencedTextLocation;
    NSString *_documentID;
    NSData *_referencedMessageID;
    NSDate *_dateCreated;
    NSData *_unrecognizedData;
    NSDate *_dateStamp;
    BOOL _hasChanged;
    int _changedProperties;
    CalTask *_calTask;
    NSMutableArray *_keysDigest;
}

+ (id)decodeMailitemURI:(id)fp8;
- (id)initWithGUID:(id)fp8 dueDate:(id)fp12 priority:(int)fp16 calendar:(id)fp20;
- (id)init;
- (id)initWithTitle:(id)fp8;
- (int)todoAlarmPriority:(unsigned int)fp8;
- (unsigned int)calAlarmPriority:(int)fp8;
- (id)initWithCalTask:(id)fp8;
- (id)calTaskFromToDo;
- (void)updateNonCalTaskInformationFrom:(id)fp8;
- (void)updateWithCalTask:(id)fp8;
- (void)dealloc;
- (id)initWithData:(id)fp8;
- (id)data;
- (BOOL)isEquivalentToCalTask:(id)fp8;
- (BOOL)isIdenticalTo:(id)fp8;
- (BOOL)isEquivalentTo:(id)fp8;
- (void)_todoChangedProperties:(unsigned int)fp8;
- (void)postToDoInfoChangedNotification:(unsigned int)fp8;
- (int)changedProperties;
- (id)todoID;
- (void)setToDoID:(id)fp8;
- (id)previousToDoID;
- (void)setPreviousToDoID:(id)fp8;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (BOOL)hasMessageReference;
- (id)messageReference;
- (id)documentID;
- (void)setDocumentID:(id)fp8;
- (id)documentUUID;
- (id)referencedMessageID;
- (void)setReferencedMessageID:(id)fp8;
- (id)referencedTextLocation;
- (void)setReferencedTextLocation:(id)fp8;
- (BOOL)overdue;
- (BOOL)dueDateEnabled;
- (void)setDueDateEnabled:(BOOL)fp8;
- (id)dueDate;
- (void)setDueDate:(id)fp8;
- (id)effectiveDueDate;
- (BOOL)completed;
- (void)setCompleted:(BOOL)fp8;
- (int)effectiveCompleteState;
- (id)dateCompleted;
- (void)setDateCompleted:(id)fp8;
- (id)dateCreated;
- (void)setDateCreated:(id)fp8;
- (id)dateStamp;
- (void)setDateStamp:(id)fp8;
- (id)alarms;
- (int)numberOfAlarms;
- (void)setAlarms:(id)fp8;
- (BOOL)priorityEnabled;
- (void)setPriorityEnabled:(BOOL)fp8;
- (int)priority;
- (void)setPriority:(int)fp8;
- (int)effectivePriority;
- (id)calendar;
- (void)setCalendar:(id)fp8;
- (void)setCalendarUsingID:(id)fp8;
- (void)calendarUpdated:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)notes;
- (void)setNotes:(id)fp8;
- (BOOL)notesHaveChanged;
- (id)url;
- (void)setUrl:(id)fp8;
- (id)unrecognizedData;
- (void)setUnrecognizedData:(id)fp8;
- (BOOL)isEditable;
- (void)prepareToAddAgain;
- (void)mergeFromToDo:(id)fp8 overwriteDirtyProperties:(BOOL)fp12 usingCondition:(void *)fp16;
- (id)description;
- (id)shortDescription;
- (id)richDescription;
- (id)account;
- (id)todoStore;
- (void)buildSetOfRecognizedKeys;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (BOOL)isUnique;
- (void)unique;
- (void)clearMessageLinks;
- (id)mailitemURIWithReferences:(BOOL)fp8;
- (void)toDoAlarms:(id)fp8 alarmAdded:(id)fp12;
- (void)toDoAlarms:(id)fp8 alarmRemoved:(id)fp12;
- (void)toDoAlarms:(id)fp8 alarmUpdated:(id)fp12;
- (id)calTask;
- (void)setCalTask:(id)fp8;
- (id)calendarTitle;
- (id)calendarID;
- (void)postNotificationName:(id)fp8 userInfo:(id)fp12 onCenter:(id)fp16;
- (id)uniqueID;
- (id)changedPropertiesBitField;
- (void)setChangedPropertiesBitField:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;

@end

@interface ToDo (Internal)
- (id)initForCopy;
- (BOOL)hasSamePropertiesAs:(id)fp8;
- (void)setHasChanged:(BOOL)fp8;
- (void)setChangedProperties:(int)fp8;
- (void)_setPropertiesUsingInfoEmbeddedInMailitemURI;
- (void)addRecognizedKeysToDictionary:(id)fp8;
- (void)addKeyToDigest:(const id)fp8;
- (void)_setCalendarTitle:(id)fp8;
- (void)_setCalendarID:(id)fp8;
@end

@interface CalTask (MailExtensions)
+ (id)createCalTaskFromCalTask:(id)fp8;
- (id)shortDescription;
- (void)updateWithMailToDoInformation:(id)fp8;
@end

@interface ToDoAlarm : NSObject <ChangeMergerObject, NSCopying>
{
    NSString *_alarmID;
    BOOL _enabled;
    int _type;
    int _offsetType;
    unsigned int _offsetDays;
    NSDate *_reminderDate;
    int _time;
    NSString *_sound;
    NSString *_emailAddress;
    NSURL *_url;
    CalAlarm *_calAlarm;
    NSString *_syncToDoID;
    id _delegate;
    NSData *_unrecognizedData;
    BOOL _hasChanged;
    int _changedProperties;
    int _previousOffsetType;
    int _previousType;
    id _lock;
}

+ (id)referenceDate;
- (void)setDefaultAlarmTime;
- (id)init;
- (id)initWithType:(int)fp8;
- (id)initWithAlarm:(id)fp8;
- (int)typeBasedOnIvars;
- (id)initWithCalAlarm:(id)fp8;
- (id)dateByCombiningDate:(id)fp8 andTime:(double)fp12;
- (id)calAlarmFromToDoAlarm;
- (id)initWithData:(id)fp8;
- (id)data;
- (BOOL)isIdenticalToAlarm:(id)fp8;
- (BOOL)isEquivalentToAlarm:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setLock:(id)fp8;
- (void)dealloc;
- (id)alarmID;
- (void)setAlarmID:(id)fp8;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (void)mergeFromAlarm:(id)fp8 overwriteDirtyProperties:(BOOL)fp12 usingCondition:(void *)fp16;
- (BOOL)enabled;
- (void)setEnabled:(BOOL)fp8;
- (int)type;
- (void)setType:(int)fp8;
- (int)offsetType;
- (void)setOffsetType:(int)fp8;
- (unsigned int)offsetDays;
- (void)setOffsetDays:(unsigned int)fp8;
- (id)reminderDate;
- (void)setReminderDate:(id)fp8;
- (int)time;
- (void)setTime:(int)fp8;
- (id)sound;
- (void)setSound:(id)fp8;
- (id)emailAddress;
- (void)setEmailAddress:(id)fp8;
- (id)url;
- (void)setUrl:(id)fp8;
- (id)description;
- (id)unrecognizedData;
- (void)setUnrecognizedData:(id)fp8;
- (void)buildSetOfRecognizedKeys;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)postNotificationName:(id)fp8 userInfo:(id)fp12 onCenter:(id)fp16;
- (double)relativeTriggerFromToDoAlarm;
- (unsigned int)defaultAlarmTime;
- (int)defaultAlarmOffset;
- (id)uniqueID;
- (id)changedPropertiesBitField;
- (void)setChangedPropertiesBitField:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;

@end

@interface ToDoAlarm (Private)
- (int)changedProperties;
- (void)setTimeInformationFromAbsoluteTrigger:(id)fp8 andRelativeTrigger:(double)fp12 usedBySyncAlarm:(BOOL)fp20;
- (void)_alarmChangedProperties:(unsigned int)fp8;
- (id)syncToDoID;
- (void)setSyncToDoID:(id)fp8;
@end

@interface ToDoAlarm (Internal)
- (int)offsetTypeFromCalAlarm:(id)fp8;
- (int)offsetTypeFromAbsoluteTrigger:(id)fp8 andRelativeTrigger:(double)fp12;
- (int)timeAndSetReminderDateFromCalAlarm:(id)fp8;
- (int)timeAndSetReminderDateFromAbsoluteTrigger:(id)fp8 andRelativeTrigger:(double)fp12 hasGMTOffset:(BOOL)fp20;
- (unsigned int)offsetDaysFromRelativeTrigger:(double)fp8;
- (int)previousOffsetType;
- (void)setPreviousOffsetType:(int)fp8;
- (int)previousType;
- (void)setPreviousType:(int)fp8;
- (id)delegate;
- (void)setHasChanged:(BOOL)fp8;
- (void)setChangedProperties:(int)fp8;
- (id)calAlarm;
- (void)setCalAlarm:(id)fp8;
- (id)lock;
@end

@interface ToDoAlarms : NSObject <NSCopying>
{
    id _delegate;
    NSMutableArray *_alarms;
    BOOL _hasChanged;
    ChangeMerger *_alarmChanges;
    id _lock;
}

+ (id)alarmWithMatchingID:(id)fp8 inArray:(id)fp12;
+ (BOOL)alarmsAreNotIdentical:(id)fp8 toAlarms:(id)fp12;
+ (BOOL)alarmsAreNotEquivalent:(id)fp8 toAlarms:(id)fp12;
- (id)init;
- (id)initWithDelegate:(id)fp8;
- (id)initWithCalAlarms:(id)fp8;
- (id)calAlarms;
- (id)initWithData:(id)fp8;
- (id)data;
- (BOOL)isIdenticalToAlarms:(id)fp8;
- (BOOL)isEquivalentToAlarms:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setLock:(id)fp8;
- (void)updateWithCalAlarms:(id)fp8;
- (void)dealloc;
- (unsigned int)count;
- (void)_createAlarmsIfNeeded;
- (void)addAlarm:(id)fp8;
- (void)removeAlarm:(id)fp8;
- (void)insertAlarm:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeAlarmAtIndex:(unsigned int)fp8;
- (void)removeAlarmWithID:(id)fp8;
- (void)removeAllAlarms;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (void)mergeFromAlarms:(id)fp8 overwriteDirtyProperties:(BOOL)fp12 usingCondition:(void *)fp16;
- (id)alarmWithID:(id)fp8;
- (id)alarmAtIndex:(unsigned int)fp8;
- (unsigned int)indexOfAlarm:(id)fp8;
- (id)alarms;
- (void)todoAlarmUpdated:(id)fp8;
- (id)description;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)postNotificationName:(id)fp8 userInfo:(id)fp12 onCenter:(id)fp16;
- (unsigned int)countByEnumeratingWithState:(CDAnonymousStruct13 *)fp8 objects:(id *)fp12 count:(unsigned int)fp16;
- (id)delegate;
- (id)lock;
- (void)setHasChanged:(BOOL)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)alarmEquivalentToAlarm:(id)fp8;

@end

@interface NSObject (ToDoAlarmsDelegate)
- (void)toDoAlarms:(id)fp8 alarmAdded:(id)fp12;
- (void)toDoAlarms:(id)fp8 alarmRemoved:(id)fp12;
- (void)toDoAlarms:(id)fp8 alarmUpdated:(id)fp12;
@end

@interface ToDoCalendar : NSObject <NSCopying>
{
    NSString *_calendarID;
    NSString *_title;
    NSColor *_color;
    BOOL _editable;
    NSURL *_url;
    MailAccount *_account;
    int _type;
    NSString *_groupID;
    CalCalendar *_calCalendar;
    BOOL _hasChanged;
    int _changedProperties;
}

- (id)initWithCalCalendar:(id)fp8 account:(id)fp12;
- (id)calCalendarFromToDoCalendar;
- (void)updateWithCalCalendar:(id)fp8;
- (void)dealloc;
- (BOOL)isIdenticalToCalCalendar:(id)fp8;
- (int)changedProperties;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)color;
- (void)setColor:(id)fp8;
- (BOOL)isEditable;
- (void)setEditable:(BOOL)fp8;
- (int)type;
- (void)setType:(int)fp8;
- (int)typeFromCalCalendarType:(id)fp8;
- (void)setTypeFromCalCalendarType:(id)fp8;
- (id)calCalendarType;
- (id)calendarID;
- (void)setCalendarID:(id)fp8;
- (id)url;
- (void)setUrl:(id)fp8;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (id)description;
- (id)shortDescription;
- (int)compare:(id)fp8;
- (id)initWithData:(id)fp8;
- (id)data;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)calCalendar;
- (void)setCalCalendar:(id)fp8;
- (id)account;
- (void)mergeIn:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)groupID;
- (void)setGroupID:(id)fp8;

@end

@interface CalCalendar (MailExtensions)
- (void)updateWithMailToDoCalendarInformation:(id)fp8;
- (id)shortDescription;
@end

@interface ToDoCalendar (private)
- (void)updatedProperty:(unsigned int)fp8;
@end

@interface ToDoCalendar (internal)
- (void)setHasChanged:(BOOL)fp8;
- (void)setChangedProperties:(int)fp8;
- (void)setAccount:(id)fp8;
@end

@interface ToDoCalendarGroup : NSObject
{
    MailAccount *_account;
    NSString *_groupID;
    NSString *_title;
    int _type;
    CalGroup *_calGroup;
}

- (id)initIMAPGroupWithTitle:(id)fp8 groupID:(id)fp12 account:(id)fp16;
- (id)initWithCalGroup:(id)fp8;
- (void)dealloc;
- (id)calGroupFromToDoCalendarGroup;
- (void)updateWithCalGroup:(id)fp8;
- (BOOL)isIdenticalToCalGroup:(id)fp8;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)groupID;
- (void)setGroupID:(id)fp8;
- (id)account;
- (int)type;
- (void)setType:(int)fp8;
- (int)typeFromCalGroupType:(id)fp8;
- (void)setTypeFromCalGroupType:(id)fp8;
- (id)calGroupType;
- (id)calGroup;
- (void)setCalGroup:(id)fp8;
- (id)description;
- (id)shortDescription;

@end

@interface ToDoCalendarGroup (Private)
- (void)setAccount:(id)fp8;
@end

@interface CalGroup (MailExtensions)
- (void)updateWithToDoCalendarGroupInformation:(id)fp8;
@end

@interface ToDoCalendarGroup (internal)
- (id)_accountForCalGroup:(id)fp8;
@end

@interface ToDoCalendars : NSObject
{
    NSMutableDictionary *_calendarsMap;
    NSMutableDictionary *_groupsMap;
    Class _libraryClass;
}

+ (id)sharedInstance;
- (void)dealloc;
- (id)init;
- (id)newCalendarWithTitle:(id)fp8 inAccount:(id)fp12 createdGroup:(char *)fp16;
- (id)calendarWithID:(id)fp8;
- (id)calendarWithID:(id)fp8 title:(id)fp12;
- (id)anyEditableCalendarInAccount:(id)fp8;
- (id)calendarWithTitle:(id)fp8 account:(id)fp12;
- (id)calendarWithTitle:(id)fp8 calendarID:(id)fp12 account:(id)fp16 searchEditableCalendarsOnly:(BOOL)fp20 inCalendarStore:(BOOL)fp24;
- (id)calendarEnumerator;
- (id)allCalendars;
- (id)allEditableCalendarsInAccount:(id)fp8;
- (id)allCalendarsInAccount:(id)fp8;
- (id)loadAndCacheAllCalendarsInDisabledAccount:(id)fp8 usingGroup:(id)fp12;
- (void)markAllCalendarsAsNonEditable;
- (id)allUniqueCalendarNames;
- (void)addCalendars:(id)fp8;
- (void)deleteCalendarsWithIDs:(id)fp8;
- (void)deleteCalendars:(id)fp8;
- (id)calendarsFromLibrary;
- (void)addGroups:(id)fp8;
- (void)updateGroups:(id)fp8;
- (void)deleteGroups:(id)fp8;
- (id)calendarGroupWithID:(id)fp8;
- (id)calendarGroupForAccount:(id)fp8;
- (id)loadAndCacheCalendarGroupForDisabledAccount:(id)fp8;
- (id)allCalendarGroupsInActiveAccounts;
- (id)defaultCalendarTitle;
- (id)detailedGroupsDescription;

@end

@interface ToDoCalendars (Internal)
- (id)_createMailCalDAVAccountForGroup:(id)fp8;
@end

@interface ToDoCalendars (Private)
- (id)groupsFromActiveAccounts;
- (id)calendarsFromActiveAccounts;
- (void)setAccountForCalendar:(id)fp8;
@end

@interface LocalToDoStoreReconciliationAgent : ToDoStoreReconciliationAgent
{
    LibraryToDoStore *_agentStore;
}

- (id)initWithMailboxUid:(id)fp8 mailboxID:(unsigned int)fp12;
- (void)dealloc;
- (void)prepareToReconcileForID:(unsigned int)fp8;
- (void)startToReconcileForID:(unsigned int)fp8;
- (void)applyReconcilerChangesForID:(unsigned int)fp8;
- (void)finishReconciliationForID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;

@end

@interface ReconcilerMechanism : NSObject <ReconciliationMechanism>
{
    int _conflictMode;
}

- (id)init;
- (id)initWithConflictMode:(int)fp8;
- (void)dealloc;
- (void)performReconciliationForID:(unsigned int)fp8 usingAgents:(id)fp12;
- (BOOL)areAgentsValid:(id)fp8;

@end

@interface ToDoDifferenceAnalyzer : NSObject
{
    NSMutableDictionary *_differenceTable;
    int _conflictMode;
    NSMutableArray *_storeAdds;
    NSMutableArray *_storeDeletes;
    NSMutableArray *_storeUpdates;
    NSMutableArray *_storeUnknowns;
    NSMutableArray *_cacheAdds;
    NSMutableArray *_cacheDeletes;
    NSMutableArray *_cacheUpdates;
    NSMutableArray *_cacheUnknowns;
    id <ReconciliationAgent> _storeAgent;
    id <ReconciliationAgent> _cacheAgent;
    ToDoSnapshot *_storeSnapshot;
    ToDoSnapshot *_cacheSnapshot;
    unsigned int _mailboxID;
    BOOL _analyzed;
    BOOL _avoidAsserts;
}

- (id)initWithStoreAgent:(id)fp8 cacheAgent:(id)fp12 referenceSnapshot:(id)fp16;
- (void)dealloc;
- (void)analyze;
- (void)setConflictHandlingMode:(int)fp8;
- (id)storeAdds;
- (id)storeDeletes;
- (id)storeUpdates;
- (id)storeUnknowns;
- (id)cacheAdds;
- (id)cacheDeletes;
- (id)cacheUpdates;
- (id)cacheUnknowns;
- (id)diffTableDescription;
- (void)setAvoidAsserts:(BOOL)fp8;

@end

@interface ToDoDifferenceExpression : NSObject
{
    ToDoUIDRemoteIDPair *_storeDifference;
    int _storeDifferenceType;
    ToDoUIDRemoteIDPair *_cacheDifference;
    int _cacheDifferenceType;
    BOOL _avoidAsserts;
}

- (id)init;
- (void)dealloc;
- (id)storeDifference;
- (void)setStoreDifference:(id)fp8 type:(int)fp12;
- (id)cacheDifference;
- (void)setCacheDifference:(id)fp8 type:(int)fp12;
- (id)generateResult;
- (id)generateForcedStoreResult;
- (id)generateForcedCacheResult;
- (int)resolveConflictForStoreAgent:(id)fp8 cacheAgent:(id)fp12 mailboxID:(unsigned int)fp16;
- (id)description;
- (void)setAvoidAsserts:(BOOL)fp8;
- (void)handleInvalidResult:(id)fp8;

@end

@interface ToDoDifferenceExpressionResult : NSObject
{
    int _operation;
    int _provider;
    NSString *_todoUID;
    NSString *_remoteID;
}

- (id)init;
- (id)initWithOperation:(int)fp8 provider:(int)fp12 todoUID:(id)fp16 remoteID:(id)fp20;
- (void)dealloc;
- (int)operation;
- (void)setOperation:(int)fp8;
- (int)provider;
- (void)setProvider:(int)fp8;
- (id)todoUID;
- (void)setToDoUID:(id)fp8;
- (id)remoteID;
- (void)setRemoteID:(id)fp8;
- (void)setOperation:(int)fp8 provider:(int)fp12 todoUID:(id)fp16 remoteID:(id)fp20;
- (BOOL)isAddDeleteOrUpdate;
- (BOOL)isAddDeleteUpdateOrOddity;
- (BOOL)isAdd;
- (BOOL)isDelete;
- (BOOL)isUpdate;
- (BOOL)isConflict;
- (BOOL)isInvalid;
- (BOOL)hasStoreSource;
- (BOOL)hasCacheSource;

@end

@interface ToDoDifferenceAnalyzer (Internal)
- (void)_populateTableWithDifferences:(id)fp8 sourceType:(int)fp12;
- (void)_insertDifference:(id)fp8 differenceType:(int)fp12 sourceType:(int)fp16;
- (void)_addNonConflictOperationFromExpressionResult:(id)fp8;
- (int)_determineConflictHandlingMode:(unsigned int)fp8;
- (void)_processConflicts:(id)fp8;
@end

@interface ToDoDifferenceExpression (DebuggingAids)
- (id)storeDifference;
- (int)storeDifferenceType;
- (id)cacheDifference;
- (int)cacheDifferenceType;
@end

@interface ToDoReconciler : NSObject
{
    NSMutableDictionary *_reconciliationAgentsData;
    int _reconcilerPhase;
    unsigned int _identifier;
    id <ReconciliationMechanism> _mechanism;
    unsigned int _numAgentsCompleteForPhase;
    NSConditionLock *_agentConditionLock;
    BOOL _requestsPending;
    BOOL _isReconciling;
    NSLock *_reconcilerBusyLock;
}

+ (id)reconcilerForID:(unsigned int)fp8;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)dealloc;
- (void)requestReconciliation:(id)fp8;

@end

@interface ReconcilerAgentData : NSObject
{
    id <ReconciliationAgent> _agent;
    int _state;
}

- (id)init;
- (id)initWithAgent:(id)fp8 state:(int)fp12;
- (void)dealloc;
- (id)agent;
- (int)state;
- (void)setState:(int)fp8;
- (id)description;

@end

@interface ToDoReconciler (DebuggingAids)
+ (id)listOfGlobalAgents;
+ (id)listOfReconcilers;
+ (id)detailedListOfReconcilers;
- (int)currentPhase;
@end

@interface ToDoReconciler (ReconciliationController)
+ (BOOL)registerReconciliationAgent:(id)fp8;
+ (void)unregisterReconciliationAgent:(id)fp8;
- (BOOL)registerReconciliationAgent:(id)fp8;
- (void)unregisterReconciliationAgent:(id)fp8;
- (BOOL)setReconciliationMechanism:(id)fp8;
- (void)phaseCompletedByAgent:(id)fp8;
@end

@interface ToDoReconciler (Internal)
+ (id)objectAsKey:(id)fp8;
- (id)_initWithID:(unsigned int)fp8;
- (BOOL)addAgent:(id)fp8;
- (void)removeAgent:(id)fp8;
- (void)setState:(int)fp8 forAgent:(id)fp12;
- (void)_triggerAgentsForPhase;
- (void)_reconcile;
@end

@interface ToDoSnapshot : NSObject
{
    unsigned int _mailboxID;
    NSMutableDictionary *_elements;
    NSMutableArray *_duplicates;
    NSMutableArray *_unknowns;
    void *_compareFunction;
}

- (id)init;
- (id)initWithMailboxID:(unsigned int)fp8 remoteIDCompareFunction:(void *)fp12;
- (void)dealloc;
- (void)addToDoUID:(id)fp8 remoteID:(id)fp12;
- (id)remoteIDForToDoUID:(id)fp8;
- (unsigned int)mailboxID;
- (void)clearSnapshot;
- (void)separateUnknowns;
- (unsigned int)elementsCount;
- (id)elements;
- (void)clearElements;
- (unsigned int)duplicatesCount;
- (id)duplicates;
- (void)clearDuplicates;
- (unsigned int)unknownsCount;
- (id)unknowns;
- (void)clearUnknowns;
- (id)compareToReferenceSnapshot:(id)fp8;
- (id)detailedDescription;

@end

@interface ToDoSnapshotDifferences : NSObject
{
    NSMutableArray *_adds;
    NSMutableArray *_deletes;
    NSMutableArray *_updates;
    NSMutableArray *_oddities;
}

- (id)init;
- (void)dealloc;
- (void)appendAdd:(id)fp8;
- (void)appendDelete:(id)fp8;
- (void)appendUpdate:(id)fp8;
- (void)appendOddity:(id)fp8;
- (id)adds;
- (id)deletes;
- (id)updates;
- (id)oddities;

@end

@interface ToDoUIDRemoteIDPair : NSObject
{
    NSString *_todoUID;
    NSString *_remoteID;
}

- (id)init;
- (id)initWithToDoUID:(id)fp8 remoteID:(id)fp12;
- (void)dealloc;
- (id)todoUID;
- (id)remoteID;

@end

@interface NSMutableArray (ToDoUIDRemoteIDPair)
- (void)addPairWithToDoUID:(const id)fp8 remoteID:(const id)fp12;
@end

@interface ToDoStoreReconciliationAgent : NSObject <ReconciliationAgent>
{
    MailboxUid *_mailboxUid;
    unsigned int _mailboxID;
    NSArray *_pendingAdds;
    NSArray *_pendingUpdates;
    NSArray *_pendingDeletes;
}

- (id)initWithMailboxUid:(id)fp8 mailboxID:(unsigned int)fp12;
- (void)dealloc;
- (void)prepareToReconcileForID:(unsigned int)fp8;
- (void)startToReconcileForID:(unsigned int)fp8;
- (void)applyReconcilerChangesForID:(unsigned int)fp8;
- (void)finishReconciliationForID:(unsigned int)fp8;
- (id)snapshotForMailboxID:(unsigned int)fp8;
- (id)todoWithUID:(id)fp8 remoteID:(id)fp12 mailboxID:(unsigned int)fp16;
- (void)processAdds:(id)fp8 updates:(id)fp12 deletes:(id)fp16 mailboxID:(unsigned int)fp20;
- (id)pendingAdds;
- (id)pendingUpdates;
- (id)pendingDeletes;

@end

@interface CalendarStoreInterchange : NSObject <CalendarStoreConduit>
{
    NSPredicate *_predicateForAllToDos;
    BOOL _holdNotifications;
    NSMutableArray *_queuedNotifications;
    NSMutableArray *_queuedNotificationsTypes;
    ToDosCache *_todosCache;
    ToDoCalendars *_todoCalendars;
    InvocationQueue *_invocationQueue;
}

- (void)_setPredicateForAllToDosUsingCalendars:(id)fp8;
- (id)initWithToDosCache:(id)fp8 todoCalendars:(id)fp12;
- (void)dealloc;
- (void)initialSynchronization;
- (id)calTaskWithID:(id)fp8;
- (void)synchronize;
- (void)holdNotifications;
- (void)resumeNotifications;
- (void)addToDo:(id)fp8;
- (void)saveToDo:(id)fp8;
- (void)removeToDo:(id)fp8;
- (void)addCalendar:(id)fp8;
- (void)saveCalendar:(id)fp8;
- (void)removeCalendar:(id)fp8;
- (void)addCalendarGroup:(id)fp8;
- (void)saveCalendarGroup:(id)fp8;
- (void)removeCalendarGroup:(id)fp8;
- (id)_createFakeNotificationWithID:(id)fp8 object:(id)fp12 objectIDForUserInfo:(id)fp16 keyForUserInfo:(id)fp20;
- (void)_notifyOfChangesInToDoCalendar:(id)fp8;
- (void)_notifyOfChangesInToDo:(id)fp8;
- (void)_updateMailitemURIonToDo:(id)fp8;
- (id)_currentToDosState;
- (id)_currentCalendarsState;
- (id)_currentCalendarGroupsState;
- (id)_todosFromUIDs:(id)fp8 forAddingToDos:(BOOL)fp12;
- (id)_todosFromCurrentUIDs:(id)fp8;
- (id)_todosFromNewUIDs:(id)fp8;
- (id)_cachedToDosFromUIDs:(id)fp8;
- (id)_calendarsFromUIDs:(id)fp8;
- (id)_cachedCalendarsFromUIDs:(id)fp8;
- (id)_cachedCalendarGroupsFromUIDs:(id)fp8;
- (id)_findExistingTodoCalendarGroupForCalGroup:(id)fp8;
- (id)_findAccountFromCalendarGroupID:(id)fp8;
- (id)_createLibraryToDoCalendarFromCalCalendar:(id)fp8;
- (id)_createToDoCalendarGroupFromCalGroup:(id)fp8;
- (void)_calTaskDidChangeNotification:(id)fp8;
- (void)_handleCalTaskChangeNotification:(id)fp8;
- (void)_calTaskDateStampDidChangeNotification:(id)fp8;
- (id)_calendarAccountFromCalCalendar:(id)fp8;
- (id)_getColorFromCalCalendar:(id)fp8;
- (void)_calCalendarDidChangeNotification:(id)fp8;
- (void)_handleCalCalendarChangeNotification:(id)fp8;
- (void)_calGroupDidChangeNotification:(id)fp8;
- (void)_handleCalGroupChangeNotification:(id)fp8;
- (void)_calCalendarResetNotification:(id)fp8;
- (void)_handleCalCalendarResetNotification:(id)fp8;
- (BOOL)_reportInconsistenciesInCalendar:(id)fp8;
- (BOOL)_reportInconsistenciesInToDo:(id)fp8;
- (BOOL)_todo:(id)fp8 isInSameAccountAsCalTask:(id)fp12;
- (id)_newCalTaskForToDoThatMovedBetweenAccounts:(id)fp8;
- (void)_splitUpdatedToDoIDs:(id)fp8 intoDeletedToDoIDs:(id)fp12 addedToDoIDs:(id)fp16;
- (BOOL)_addCalGroup:(id)fp8;
- (BOOL)_deleteCalGroup:(id)fp8;
- (BOOL)_addCalCalendar:(id)fp8;
- (BOOL)_addCalTask:(id)fp8;
- (BOOL)_updateCalTask:(id)fp8;
- (BOOL)_deleteCalTask:(id)fp8;
- (id)_recreateIMAPGroups:(id)fp8;
- (id)_recreateIMAPCalendars:(id)fp8 usingGroupsMapping:(id)fp12;
- (void)_recreateIMAPToDos:(id)fp8 usingCalendarsMapping:(id)fp12;
- (void)recreateIMAPGroups:(id)fp8 calendars:(id)fp12 todos:(id)fp16;
- (void)_removeIMAPInformationFromiCalDueToReset;
- (void)_removeToDosAffectedByReset:(id)fp8;
- (void)_splitKnownCalendarGroupsIntoThoseWithTruthIniCal:(id *)fp8 andTruthInMail:(id *)fp12;
- (void)_splitKnownCalendarsIntoThoseWithTruthIniCal:(id *)fp8 andTruthInMail:(id *)fp12;
- (void)_splitKnownToDosIntoThoseWithTruthIniCal:(id *)fp8 andTruthInMail:(id *)fp12;
- (void)_sendCalendarGroupsNotificationOfType:(id)fp8 withObjects:(id)fp12;
- (void)_sendCalendarsNotificationOfType:(id)fp8 withObjects:(id)fp12;
- (void)_sendToDosNotificationOfType:(id)fp8 withObjects:(id)fp12;

@end

@interface ToDoChangesQueue : NSObject
{
    NSMutableDictionary *_todosToAdd;
    NSMutableDictionary *_todosToUpdate;
    NSMutableDictionary *_todosToDelete;
    InvocationQueue *_invocationQueue;
}

- (id)initWithInvocationQueue:(id)fp8;
- (void)dealloc;
- (void)queueToDosToAdd:(id)fp8;
- (void)queueToDosToUpdate:(id)fp8;
- (void)queueToDosToDelete:(id)fp8;
- (id)todosToAdd;
- (id)todosToUpdate;
- (id)todosToDelete;
- (void)clearQueue;

@end

@interface ToDoCriterion : Criterion
{
}

+ (id)stringForCriterionType:(int)fp8;
+ (int)criterionTypeForString:(id)fp8;
- (BOOL)hasExpression;
- (BOOL)allowsEmptyExpression;
- (BOOL)isValid:(id *)fp8 options:(unsigned long)fp12;

@end

@interface ToDoLibraryAndStoreConsistencyChecker : NSObject
{
    unsigned int _todoCount;
    unsigned int _totalCountBefore;
    NSString *_callingMethodDescription;
    int _actionType;
    NSString *_actionDescription;
}

+ (unsigned int)_verifyStateOfAllTodos:(id)fp8;
- (id)initWithToDos:(id)fp8 actionType:(int)fp12 callingMethodDescription:(id)fp16;
- (void)dealloc;
- (void)finish;
- (void)logInconsistenciesInToDos:(id)fp8;
- (id)_actionDescriptionForType:(int)fp8;
- (BOOL)_countsMatch:(int)fp8;

@end

@interface NSPasteboard (ToDoPasteboardSupport)
- (BOOL)hasToDos;
- (id)todos;
- (void)insertTodos:(id)fp8;
@end

@interface NSArray (ToDoPasteboardArchiving)
- (id)pasteboardDataForTodos;
@end

@interface NSData (ToDoPasteboardUnarchiving)
- (id)todosFromPasteboardData;
@end

@interface ToDosCache : NSObject
{
    NSMutableDictionary *_todosByGUID;
    NSMutableDictionary *_deletedToDoIDsByDocumentID;
    BOOL _checkConsistency;
    Class _libraryClass;
    NSRecursiveLock *_lock;
    NSMutableArray *_listeners;
    id <CalendarStoreConduit> _calendarStoreConduit;
}

- (id)initWithLibraryClass:(Class)fp8 checkingConsistency:(BOOL)fp12;
- (void)dealloc;
- (void)addListener:(id)fp8;
- (void)removeListener:(id)fp8;
- (void)addToDo:(id)fp8;
- (void)updateToDo:(id)fp8;
- (void)removeToDo:(id)fp8;
- (id)cachedToDoWithID:(id)fp8;
- (id)todoWithID:(id)fp8;
- (id)todoWithPreviousID:(id)fp8;
- (BOOL)hasToDoWithIDBeenDeleted:(id)fp8;
- (id)allDeletedToDoIDsForDocumentID:(id)fp8;
- (id)libraryToDoFromCalTask:(id)fp8;
- (id)libraryToDoFromNewCalTask:(id)fp8;
- (id)allToDosForMailboxID:(unsigned int)fp8;
- (id)loadAndCacheToDosInDisabledAccount:(id)fp8;
- (id)todosByIDForDocumentID:(id)fp8 byPreviousID:(id *)fp12;
- (id)allToDosForDocumentID:(id)fp8;
- (id)allToDosForMessage:(id)fp8;
- (id)lastToDoWithID:(id)fp8 inMailbox:(id)fp12;
- (id)allToDosInActiveAccounts;
- (id)listOfToDoIDsInCalendarWithID:(id)fp8;
- (id)todosMatchingCriterion:(id)fp8;
- (id)todosInActiveAccountsMatchingCriterion:(id)fp8;

@end

@interface ToDosCache (ForMetadataManagerAgent)
- (id)snapshotForMailboxID:(unsigned int)fp8 idsFromUpdatedToDos:(id)fp12;
@end

@interface ToDosCache (ForCalendarStoreInterchange)
- (void)setCalendarStoreInterchange:(id)fp8;
@end

@interface ToDosCache (Internal)
- (id)_todoWithID:(id)fp8 loadIfNotFound:(BOOL)fp12;
- (id)_libraryToDoFromCalTask:(id)fp8 addToCache:(BOOL)fp12;
- (BOOL)_locked_haveRecordOfDeletedToDoWithID:(id)fp8;
- (void)_locked_removeDeletedToDoID:(id)fp8 forDocumentID:(id)fp12;
- (void)_locked_addDeletedToDoID:(id)fp8 forDocumentID:(id)fp12;
@end

@interface ToDoStore : NSObject <ToDoConsumer>
{
    NSMutableSet *_todos;
    MailboxUid *_mailboxUid;
    unsigned int _incompleteCount;
    int _mallsWatchingStore;
    id <ReconciliationAgent> _reconciliationAgent;
    unsigned int _mailboxID;
    NSConditionLock *_mailboxIDLock;
}

+ (id)toDoStoreForMailbox:(id)fp8;
+ (id)searchStoreForCriterion:(id)fp8;
+ (void)removeToDoStoreForMailbox:(id)fp8;
+ (void)addToDosToStores:(id)fp8;
+ (void)deleteToDosFromStores:(id)fp8;
+ (id)allStores;
+ (id)allToDosInStores;
+ (id)cachesDescription;
- (id)initWithMailboxUid:(id)fp8;
- (void)setReconciliationAgent:(id)fp8;
- (id)reconciliationAgent;
- (void)addWatchingMall;
- (void)removeWatchingMall;
- (int)mallsWatchingStore;
- (id)criterion;
- (void)setMallsWatchingStore:(int)fp8;
- (void)setIncompleteCount:(unsigned int)fp8;
- (void)dealloc;
- (void)setMailboxID:(id)fp8;
- (id)todos;
- (void)newToDosAvailable:(id)fp8;
- (BOOL)shouldCancel;
- (void)addToDos:(id)fp8;
- (void)deleteToDos:(id)fp8;
- (void)handleUpdatedToDo:(id)fp8;
- (id)mailboxUid;
- (unsigned int)incompleteCount;

@end

@interface ToDoStore (Internal)
+ (id)_toDoStoresByMailboxUid;
- (void)loadToDos;
- (unsigned int)mailboxID;
@end

@interface ToDoUndoCenter : NSObject
{
}

+ (id)sharedInstance;
+ (void)setDefaultCalendarFromToDo:(id)fp8 key:(id)fp12;
- (void)setValue:(id)fp8 forKey:(id)fp12 inToDo:(id)fp16 withUndoManager:(id)fp20;
- (void)setValue:(id)fp8 forKey:(id)fp12 inAlarm:(id)fp16 withUndoManager:(id)fp20;
- (void)addToDo:(id)fp8 withUndoManager:(id)fp12;
- (void)addToDos:(id)fp8 withUndoManager:(id)fp12;
- (void)deleteToDos:(id)fp8 withUndoManager:(id)fp12;
- (void)addAlarm:(id)fp8 toAlarms:(id)fp12 withUndoManager:(id)fp16;
- (void)insertAlarm:(id)fp8 atIndex:(unsigned int)fp12 intoAlarms:(id)fp16 withUndoManager:(id)fp20;
- (void)removeAlarmAtIndex:(unsigned int)fp8 fromAlarms:(id)fp12 withUndoManager:(id)fp16;
- (void)removeAlarm:(id)fp8 fromAlarms:(id)fp12 withUndoManager:(id)fp16;

@end

@interface NSUndoManager (ToDoUndoManager)
- (void)setValue:(id)fp8 forKey:(id)fp12 inToDo:(id)fp16;
- (void)setValue:(id)fp8 forKey:(id)fp12 inAlarm:(id)fp16;
- (void)addToDos:(id)fp8;
- (void)deleteToDos:(id)fp8;
- (void)addAlarm:(id)fp8 toAlarms:(id)fp12;
- (void)insertAlarm:(id)fp8 atIndex:(unsigned int)fp12 intoAlarms:(id)fp16;
- (void)removeAlarmAtIndex:(unsigned int)fp8 fromAlarms:(id)fp12;
- (void)removeAlarm:(id)fp8 fromAlarms:(id)fp12;
@end

@interface ToDoUtilities : NSObject
{
}

+ (BOOL)stringIsDifferent:(id)fp8 fromString:(id)fp12;
+ (BOOL)dateIsDifferent:(id)fp8 fromDate:(id)fp12;
+ (BOOL)urlIsDifferent:(id)fp8 fromUrl:(id)fp12;
+ (BOOL)dataAreDifferent:(id)fp8 fromData:(id)fp12;
+ (BOOL)splitToDosForMessages:(id)fp8 intoMessageToDos:(id *)fp12 noteToDos:(id *)fp16;

@end

@interface ToDoWriter : MessageWriter
{
}

- (id)init;
- (Class)messageClass;
- (id)createToDoMessageWithToDo:(id)fp8 headers:(id)fp12 forMessage:(id)fp16;

@end

@interface MailCalDAVAccount : MailAccount
{
    NSString *_title;
    BOOL _isBeingDeleted;
}

+ (id)defaultPathNameForAccount;
+ (id)accountTypeString;
- (id)initWithTitle:(id)fp8 groupID:(id)fp12;
- (void)dealloc;
- (BOOL)isActive;
- (id)uniqueId;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (BOOL)synchronizesDataWithServer;
- (BOOL)allowsCalendarCreation;
- (BOOL)isEditableByUser;
- (BOOL)canParticipateInRules;
- (BOOL)providesAccountInformation;
- (BOOL)isZeroConfiguration;
- (BOOL)isRemoteAccount;
- (BOOL)hasTrashMailbox;
- (BOOL)supportsAppleScript;
- (BOOL)canMailboxBeDeleted:(id)fp8;
- (BOOL)canCreateNewMailboxes;
- (id)hostname;
- (BOOL)canFetch;
- (BOOL)shouldAutoFetch;
- (BOOL)isOffline;
- (BOOL)canGoOffline;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (BOOL)canMoveDeletedMessagesToTrash;
- (id)path;
- (void)setIsOffline:(BOOL)fp8;
- (BOOL)rootChildrenCanBePromoted;
- (id)trashMailboxUidCreateIfNeeded:(BOOL)fp8;
- (id)_URLScheme;
- (id)_specialMailboxNameForType:(int)fp8;
- (BOOL)deleteMailbox:(id)fp8;
- (id)_infoForMatchingURL:(id)fp8;
- (void)deleteAccount;
- (BOOL)isBeingDeleted;

@end

@interface DatabaseRecoverer : NSObject
{
    NSString *_path;
    int _type;
    NSCondition *_analysisCondition;
    unsigned int _analysisResult;
}

+ (BOOL)anotherLocalCopyOfMailIsRunning;
+ (id)moveDatabaseToUniquePath:(id)fp8;
- (void)dealloc;
- (id)initWithPath:(id)fp8 type:(int)fp12;
- (void)_analyzeBusyCondition;
- (void)analyzeBusyCondition;
- (BOOL)fileLocked;
- (BOOL)aRemoteApplicationIsAccessingTheDatabase;
- (BOOL)lockFileFound;
- (void)removeLockFile;
- (void)recover;
- (void)_removeLocks;
- (id)_moveToUniquePath;
- (void)_moveToOriginalPath:(id)fp8;
- (unsigned int)analysisResult;
- (void)setAnalysisResult:(unsigned int)fp8;
- (id)analysisCondition;
- (void)setAnalysisCondition:(id)fp8;
- (int)type;
- (void)setType:(int)fp8;
- (id)path;
- (void)setPath:(id)fp8;

@end

@interface NSObject (ThreadingAdditions)
- (void)releaseOnMainThread;
@end

