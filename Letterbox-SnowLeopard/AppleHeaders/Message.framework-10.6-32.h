/*
 *     Generated by class-dump 3.3 (32 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2009 by Steve Nygard.
 */

#pragma mark Named Structures

struct EnrichedState {
    unsigned int excerptLevel:8;
    unsigned int alignment:4;
    unsigned int bold:1;
    unsigned int italic:1;
    unsigned int fixed:1;
    unsigned int underline:1;
    unsigned int fontDelta:16;
    NSString *fontFamily;
    NSColor *color;
};

struct _MessageSortingInformation {
    char _field1;
    char _field2;
    id _field3;
    void *_field4;
};

struct _NSPoint {
    float _field1;
    float _field2;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _NSRect {
    struct _NSPoint _field1;
    struct _NSSize _field2;
};

struct _NSSize {
    float width;
    float height;
};

struct __CFArray;

struct __CFDictionary;

#if 0
// Names with conflicting types:
typedef struct {
    NSString *_field1;
    unsigned int _field2;
    id _field3;
    struct _CommandStackEntry *_field4;
} _CommandStackEntry_a91ec601;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    id _field2;
    char _field3;
    id _field4;
    id _field5;
    id _field6;
    id _field7;
    unsigned int _field8;
    unsigned int _field9;
    char _field10;
} CDStruct_5f9072cd;

typedef struct {
    id _field1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
} CDStruct_3441fd00;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned char _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    unsigned char _field15;
    unsigned char _field16;
} CDStruct_bd2f613f;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    char _field3;
    char _field4;
} CDStruct_87ebd36c;

typedef struct {
    unsigned int first;
    unsigned int last;
} CDStruct_9c9676ea;

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDStruct_11f37819;

typedef struct {
    char *_field1;
    int _field2;
    double _field3;
} CDStruct_ab7a5ebc;

typedef struct {
    unsigned int colorHasBeenEvaluated:1;
    unsigned int colorWasSetManually:1;
    unsigned int redColor:8;
    unsigned int greenColor:8;
    unsigned int blueColor:8;
    unsigned int loadingBody:1;
    unsigned int firstUnused:2;
    unsigned int isMarkedForOverwrite:1;
    unsigned int unused:2;
} CDStruct_accefccd;

typedef struct {
    unsigned int reserved:26;
    unsigned int hasCustomEncoding:1;
    unsigned int isPartial:1;
    unsigned int partsHaveBeenCached:1;
    unsigned int hasTemporaryUid:1;
    unsigned int isHTML:1;
    unsigned int isRich:1;
} CDStruct_3292de3e;

typedef struct {
    int count;
    unsigned long long size;
} CDStruct_ff11e81d;

typedef struct {
    int version;
    int count;
    int timeStamp;
    float tocHeight;
    unsigned int sortOrder;
    unsigned int sortedAscending;
    int unused1;
    int unused2;
} CDStruct_c4d47a41;

typedef struct {
    id _field1;
    id _field2;
    struct __CFDictionary *_field3;
    struct __CFDictionary *_field4;
    unsigned int _field5;
    unsigned int _field6;
    int _field7;
    id _field8;
} CDStruct_3691c9db;

typedef struct {
    unsigned short buffer[64];
    struct __CFString *theString;
    unsigned short *directBuffer;
    struct {
        int location;
        int length;
    } rangeToBuffer;
    int bufferedRangeStart;
    int bufferedRangeEnd;
} CDStruct_4167bb2e;

typedef struct {
    int _field1;
    id _field2;
    id _field3;
    union {
        char _field1;
        CDStruct_ab7a5ebc _field2;
        CDStruct_ab7a5ebc _field3;
        struct {
            id _field1;
        } _field4;
        struct {
            struct __CFReadStream *_field1;
            struct __CFWriteStream *_field2;
        } _field5;
    } _field4;
} CDStruct_7da05bac;

#pragma mark Named Unions

union _IMAPResponseData {
    struct {
        int responseCode;
        id responseInfoAndOrUserData;
    } basic;
    NSArray *capabilities;
    unsigned long number;
    NSSet *flags;
    struct {
        NSString *mailboxName;
        NSDictionary *entries;
    } status;
    NSArray *searchResults;
    struct {
        unsigned long mailboxAttributes;
        id separatorAndOrMboxName;
    } list;
    struct {
        unsigned long number;
        char isValid;
        NSArray *items;
    } fetch;
    struct {
        NSString *mailboxName;
        NSArray *quotaRootNames;
    } quotaRoot;
    struct {
        NSString *quotaRootName;
        NSArray *quotas;
    } quota;
    struct {
        NSIndexSet *uids;
        IMAPFetchResult *flagsFetchResult;
        unsigned int change:1;
    } uidFlags;
    struct {
        NSString *name;
        NSArray *parameters;
    } other;
};

#pragma mark -

/*
 * File: /System/Library/Frameworks/Message.framework/Versions/B/Message
 * Arch: Intel 80x86 (i386)
 *       Current version: 1075.2.0, Compatibility version: 1.0.0
 *
 *       Objective-C Garbage Collection: Supported
 */

@protocol ABImageClient <NSObject>
- (void)consumeImageData:(id)arg1 forTag:(int)arg2;
@end

@protocol CalendarStoreConduit <NSObject>
- (id)initWithToDosCache:(id)arg1 todoCalendars:(id)arg2;
- (void)initialSynchronization;
- (id)calTaskWithID:(id)arg1;
- (void)synchronize;
- (void)addToDo:(id)arg1;
- (void)saveToDo:(id)arg1;
- (void)removeToDo:(id)arg1;
- (void)addCalendar:(id)arg1;
- (void)saveCalendar:(id)arg1;
- (void)removeCalendar:(id)arg1;
- (void)addCalendarGroup:(id)arg1;
- (void)saveCalendarGroup:(id)arg1;
- (void)removeCalendarGroup:(id)arg1;
- (void)removeCalendarGroup:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)holdNotifications;
- (void)resumeNotifications;
- (void)recreateIMAPGroups:(id)arg1 calendars:(id)arg2 todos:(id)arg3;
@end

@protocol ChangeMergerObject <NSObject, NSCopying>
- (id)uniqueID;
- (id)changedPropertiesBitField;
- (void)setChangedPropertiesBitField:(id)arg1;
@end

@protocol EWSAutodiscoverBindingDelegate <NSObject>
- (void)autodiscoverBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
@end

@protocol EWSErrorHandler <NSObject>
- (void)handleEWSError:(id)arg1;
@end

@protocol EWSExchangeServiceBindingDelegate <NSObject>
- (void)exchangeServiceBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
@end

@protocol IMAPMailboxDelegate <NSObject>
- (void)updateCountFromMailbox:(id)arg1;
- (void)processResponsesFromMailbox:(id)arg1;
- (void)updateUidValidityFromMailbox:(id)arg1;
- (void)updateSelectedGatewayFromMailbox:(id)arg1;
@end

@protocol IMAPObject <NSObject>
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (id)messageID;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)arg1;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)arg1;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)arg1;
- (CDStruct_3292de3e)remoteFlags;
- (unsigned int)messageSize;
- (id)subject;
- (id)mailboxName;
@end

@protocol IMAPResponseHandler <NSObject>
- (BOOL)handleResponse:(id)arg1 forOperation:(id)arg2;
@end

@protocol LibraryInterface <NSObject>
+ (long long)mailboxIDForMailboxUid:(id)arg1;
+ (id)urlForMailboxID:(long long)arg1;
+ (BOOL)addToDos:(id)arg1;
+ (BOOL)deleteToDos:(id)arg1;
+ (BOOL)updateToDos:(id)arg1;
+ (id)allToDos;
+ (id)allToDosForMailboxID:(long long)arg1;
+ (id)allToDosForDocumentID:(id)arg1;
+ (BOOL)updateToDo:(id)arg1 toRemoteID:(id)arg2;
+ (long long)toDoMailboxIdForMailAccount:(id)arg1;
+ (BOOL)addCalendars:(id)arg1;
+ (BOOL)updateCalendars:(id)arg1;
+ (BOOL)deleteCalendars:(id)arg1;
+ (id)allToDoCalendars;
+ (id)todoIDsMatchingCriterion:(id)arg1;
@end

@protocol LibraryObject <IMAPObject, MFChanging>
- (long long)libraryID;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (id)remoteID;
- (void)setRemoteID:(id)arg1;
@end

@protocol MFChanging <NSObject>
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)arg1;
- (BOOL)endChanging:(BOOL)arg1 immediately:(BOOL)arg2;
@end

@protocol MessageConsumer <NSObject>
- (void)newMessagesAvailable:(id)arg1;
- (void)newMessagesAvailable:(id)arg1 ranks:(id)arg2;
- (BOOL)shouldCancel;
@end

@protocol NSAlertDelegate <NSObject>
@end

@protocol NSCacheDelegate
@end

@protocol NSCoding
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSKeyedUnarchiverDelegate <NSObject>
@end

@protocol NSMachPortDelegate <NSPortDelegate>
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)arg1;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol NSPortDelegate <NSObject>
@end

@protocol NSXMLParserDelegate <NSObject>
@end

@protocol POP3ConnectionDelegate <NSObject>
- (void)connection:(id)arg1 receivedNumberOfBytes:(unsigned int)arg2;
- (int)connection:(id)arg1 willRetrieveMessageNumber:(unsigned long)arg2 header:(id)arg3 size:(unsigned long)arg4;
- (void)connection:(id)arg1 didRetrieveData:(id)arg2 forMessageNumber:(unsigned long)arg3;
- (BOOL)connectionShouldPrefetchMessages;
@end

@protocol ReconciliationAgent <NSObject>
- (void)startAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)finishAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)prepareToReconcileForMailboxID:(long long)arg1;
- (void)startToReconcileForMailboxID:(long long)arg1;
- (void)applyReconcilerChangesForMailboxID:(long long)arg1;
- (void)finishReconciliationForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
- (void)processAdds:(id)arg1 updates:(id)arg2 deletes:(id)arg3 mailboxID:(long long)arg4;
@end

@protocol ReconciliationMechanism <NSObject>
- (void)performReconciliationForMailboxID:(long long)arg1 usingAgents:(id)arg2;
- (BOOL)areAgentsValid:(id)arg1;
@end

@protocol RouterStore <NSObject>
- (void)messagesWillBeRouted:(id)arg1;
- (void)messagesWereRouted:(id)arg1;
- (void)cancel;
@end

@protocol SASLSecurityLayer <NSObject>
- (unsigned int)encryptionBufferSize;
- (id)createDecryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)createEncryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
@end

@protocol SyncableApp <NSObject>
- (id)syncerForDataType:(int)arg1;
- (id)ownerForDataType:(int)arg1;
- (id)interestedPartiesForDataType:(int)arg1;
- (BOOL)tellInterestedPartiesDataWillBeSyncedForDataType:(int)arg1;
- (void)tellInterestedPartiesDataWasSyncedForDataType:(int)arg1;
- (void)client:(id)arg1 mightWantToSyncEntityNames:(id)arg2;
@end

@protocol SyncableDataOwner <NSObject>
- (BOOL)dataWillBeSyncedVersion:(id *)arg1 data:(id *)arg2 type:(id)arg3;
- (BOOL)dataWasSyncedVersion:(id)arg1 newData:(id)arg2 acceptedChanges:(id)arg3;
@end

@protocol ToDoConsumer <NSObject>
- (void)newToDosAvailable:(id)arg1;
- (BOOL)shouldCancel;
@end

@protocol ToDosCacheListener <NSObject>
- (void)todoAddedToCache:(id)arg1;
- (void)todoRemovedFromCache:(id)arg1;
@end

@interface _NSSocket : NSObject
{
    id _streamAndProtocolLock;
    struct __CFReadStream *_readStream;
    struct __CFWriteStream *_writeStream;
    NSString *_protocol;
    NSMachPort *_socketActivityReplyPort;
    NSArray *_trustedCertificates;
    void *_stats;
    void *_request;
    BOOL _openCompleted;
    BOOL _error;
    BOOL _closed;
    int _connectionSetupState;
    unsigned int _identifier;
    double _lastReadTime;
    NSInvocation *_eventHandler;
    double _numTimeoutSecs;
    double _numConnectTimeoutSecs;
    int _activityType;
}

+ (void)_runIOThread;
+ (void)handlePortMessage:(id)arg1;
+ (void)initialize;
+ (int)simulatedSocketSpeed;
+ (void)setSimulatedSocketSpeed:(int)arg1;
- (void)_setError:(id *)arg1 fromDomain:(int)arg2 code:(int)arg3 andLogIfNecessary:(id)arg4;
- (id)securityProtocol;
- (BOOL)setSecurityProtocol:(id)arg1;
- (void)setTrustedCertificates:(id)arg1;
- (id)verboseSSLInformation;
- (id)serverCertificates;
- (id)initWithTimeout:(double)arg1 connectTimeout:(double)arg2;
- (id)init;
- (double)timeout;
- (void)setTimeout:(double)arg1;
- (double)connectTimeout;
- (void)setConnectTimeout:(double)arg1;
- (void)dealloc;
- (void)finalize;
- (void)abort;
- (void)finishRequest:(CDStruct_7da05bac *)arg1;
- (void)clearError;
- (BOOL)isReadable;
- (BOOL)isWritable;
- (void)waitUntilWritable;
- (BOOL)readIsValid;
- (BOOL)writeIsValid;
- (BOOL)isValid;
- (BOOL)_configureReadStream:(struct __CFReadStream *)arg1 writeStream:(struct __CFWriteStream *)arg2 error:(id *)arg3;
- (BOOL)connectToHost:(id)arg1 withPort:(unsigned long)arg2 protocol:(id)arg3;
- (int)writeBytes:(const char *)arg1 length:(int)arg2 error:(id *)arg3;
- (int)readBytes:(char *)arg1 length:(int)arg2 error:(id *)arg3;
- (void)setEventHandler:(id)arg1;
- (void)removeEventHandler;
- (id)remoteHostname;
- (unsigned long)remotePortNumber;
- (id)sourceIPAddress;
- (id)sourceHostname;
- (int)fileDescriptor;
- (double)lastReadTime;
- (int)activityType;
- (void)setActivityType:(int)arg1;
- (unsigned int)identifier;
- (void)setIdentifier:(unsigned int)arg1;

@end

@interface Account : NSObject <SyncableDataOwner>
{
    unsigned int _isOffline:1;
    unsigned int _willingToGoOnline:1;
    unsigned int _autosynchronizingEnabled:1;
    unsigned int _promptedToTrustSSLCertificates:1;
    unsigned int _isActive:2;
    NSMutableDictionary *_info;
}

+ (void)initialize;
+ (Class)accountClassForTypeString:(id)arg1;
+ (id)_typeStringForAccountClass:(Class)arg1;
+ (BOOL)haveAccountsBeenConfigured;
+ (id)readAccountsUsingDefaultsKey:(id)arg1 forceReadFromMailPreferences:(BOOL)arg2;
+ (id)readAccountsUsingDefaultsKey:(id)arg1;
+ (BOOL)_syncableChangesForNewAccountDefaults:(id)arg1 oldDefaults:(id)arg2;
+ (void)saveAccounts:(id)arg1 usingDefaultsKey:(id)arg2;
+ (void)saveAccounts:(id)arg1 usingDefaultsKey:(id)arg2 forceWriteToMailPreferences:(BOOL)arg3;
+ (void)saveAccountInfoToDefaults;
+ (id)accountsVersion;
+ (id)createAccountWithDictionary:(id)arg1;
+ (id)accountTypeString;
+ (id)_meCardFromMacBuddyPlistFile;
+ (id)myFullName;
+ (id)myEmailAddress;
+ (BOOL)allObjectsInArrayAreOffline:(id)arg1;
+ (id)keyPathsForValuesAffectingOfflineDisplayName;
+ (BOOL)defaultsToSSL;
+ (id)keyPathsForValuesAffectingPreferredAuthScheme;
- (id)init;
- (void)dealloc;
- (id)info;
- (void)setInfo:(id)arg1;
- (void)setAutosynchronizingEnabled:(BOOL)arg1;
- (void)_queueAccountInfoDidChange;
- (id)accountInfo;
- (void)_setAccountInfo:(id)arg1;
- (void)setAccountInfo:(id)arg1;
- (id)defaultsDictionary;
- (void)updateFromSyncedDictionary:(id)arg1;
- (BOOL)isSyncable;
- (BOOL)isActive;
- (void)setIsActive:(BOOL)arg1;
- (BOOL)isInactivatedInsteadOfBeingDeleted;
- (void)setIsInactivatedInsteadOfBeingDeleted:(BOOL)arg1;
- (BOOL)canGoOffline;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)isWillingToGoOnline;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (id)storedDisplayName;
- (void)setStoredDisplayName:(id)arg1;
- (id)displayName;
- (void)setDisplayName:(id)arg1;
- (id)offlineDisplayName;
- (id)username;
- (void)setUsername:(id)arg1;
- (id)hostname;
- (void)setHostname:(id)arg1;
- (id)_hostnameWithAccountInfoKey:(id)arg1;
- (void)_setHostname:(id)arg1 accountInfoKey:(id)arg2;
- (id)password;
- (void)setPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)sessionPassword;
- (void)setSessionPassword:(id)arg1;
- (id)promptUserForPasswordWithMessage:(id)arg1;
- (id)promptUserIfNeededForPasswordWithMessage:(id)arg1;
- (unsigned long)portNumber;
- (void)setPortNumber:(unsigned long)arg1;
- (unsigned long)_portNumberWithAccountInfoKey:(id)arg1 sslAccountInfoKey:(id)arg2;
- (void)_setPortNumber:(unsigned long)arg1 accountInfoKey:(id)arg2 sslAccountInfoKey:(id)arg3;
- (unsigned long)defaultPortNumber;
- (unsigned long)defaultSecurePortNumber;
- (unsigned long)secondaryDefaultPortNumber;
- (unsigned long)tertiaryDefaultPortNumber;
- (id)serviceName;
- (id)secureServiceName;
- (void)releaseAllConnections;
- (void)validateConnections;
- (BOOL)usesSSL;
- (void)setUsesSSL:(BOOL)arg1;
- (BOOL)_usesSSLWithAccountInfoKey:(id)arg1;
- (void)_setUsesSSL:(BOOL)arg1 accountInfoKey:(id)arg2;
- (int)securityLayerType;
- (void)setSecurityLayerType:(int)arg1;
- (id)domain;
- (void)setDomain:(id)arg1;
- (void)accountInfoDidChange;
- (id)preferredAuthScheme;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)saslProfileName;
- (Class)connectionClass;
- (BOOL)requiresAuthentication;
- (id)createConnectedConnection;
- (id)authenticatedConnection;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned long)arg1;
- (BOOL)_shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1;
- (BOOL)_connectAndAuthenticate:(id)arg1;
- (id)ISPAccountID;
- (void)setISPAccountID:(id)arg1;
- (id)uniqueId;
- (id)nameForMailboxUid:(id)arg1;
- (id)_ispDomain;
- (id)supportURL;
- (id)supportURLLabel;
- (id)subscriptionURL;
- (id)subscriptionURLLabel;
- (id)accountTypeString;
- (BOOL)dataWillBeSyncedVersion:(id *)arg1 data:(id *)arg2 type:(id)arg3;
- (BOOL)dataWasSyncedVersion:(id)arg1 newData:(id)arg2 acceptedChanges:(id)arg3;
- (void)updateAccountsFromPlist:(id)arg1 acceptedChanges:(id)arg2;
- (void)heal;
- (BOOL)isValid;
- (void)setAccountInfoObject:(id)arg1 forKey:(id)arg2;
- (void)removeAccountInfoObjectForKey:(id)arg1;

@end

@interface AccountStatus : NSObject
{
    NSMutableDictionary *_states;
    NSMutableDictionary *_stateDetails;
    struct __CFNetDiagnostic *netDiagnostics;
    NSMutableArray *_queue;
    BOOL _isRefreshingInternet;
    NSTimer *_refreshTimer;
    NSMutableArray *_clients;
    NSMutableArray *_clientTypes;
    NSMutableArray *_clientAccounts;
}

+ (id)sharedStatus;
- (id)init;
- (void)dealloc;
- (void)addObserver:(id)arg1 forAccounts:(id)arg2;
- (void)addObserver:(id)arg1 forTypes:(int)arg2;
- (void)addObserver:(id)arg1 forAccounts:(id)arg2 types:(int)arg3;
- (void)removeObserver:(id)arg1;
- (void)refreshAndClearStatus:(BOOL)arg1;
- (void)refreshForObserver:(id)arg1;
- (void)refreshForObserver:(id)arg1 onlyIfNeeded:(BOOL)arg2;
- (id)accountsForObserver:(id)arg1;
- (void)diagnoseInteractively;
- (int)internetStatus;
- (void)setInternetStatus:(int)arg1;
- (int)accountStatus:(id)arg1;
- (int)knownAccountStatus:(id)arg1;
- (void)setAccount:(id)arg1 status:(int)arg2;
- (id)accountStatusDetails:(id)arg1;
- (void)setAccount:(id)arg1 statusDetails:(id)arg2;
- (int)_accountStatus:(id)arg1;
- (void)_recomputeSelf;
- (id)_accountsForObserver:(id)arg1 onlyIfNeeded:(BOOL)arg2;
- (id)_accountsForFlags:(int)arg1;
- (void)_refreshAccounts:(id)arg1 andInternet:(BOOL)arg2 clearingStatus:(BOOL)arg3;
- (void)_timedRefresh:(id)arg1;
- (void)_networkChanged:(id)arg1;
- (void)_accountInfoChanged:(id)arg1;
- (void)_refreshInternetStatus;
- (void)_refreshInternetStatusFinishedWithResult:(id)arg1;
- (void)_refreshAccountStatus:(id)arg1;
- (void)_refreshAccountStatusUpdatedWithInfo:(id)arg1;
- (void)_refreshAccountStatusWillBegin:(id)arg1;
- (void)_refreshAccountStatusFinished:(id)arg1;

@end

@interface ActivityAggregate : NSObject
{
    struct __CFArray *_rateArray;
    BytesFormatter *_bytesFormatter;
    NSArrayController *_monitorController;
    float _rate;
    float _progress;
    BOOL _canCancel;
    unsigned int _itemsDone;
    unsigned int _itemsTotal;
    float _unifiedDone;
    unsigned int _baseItemsDone;
    unsigned int _baseItemsTotal;
    float _baseUnifiedDone;
    NSString *_bkItemDescription;
    NSString *_nameSingular;
    NSString *_namePlural;
    NSString *_status;
    int _activityType;
    BOOL _isResetting;
    BOOL _isProgressing;
    BOOL _bkIsProgressing;
    double _startTime;
    double _estimatedTimeRemaining;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffectingFormattedRate;
+ (id)keyPathsForValuesAffectingIsProgressIndeterminate;
- (id)init;
- (void)dealloc;
- (id)monitorController;
- (id)formattedRate;
- (unsigned int)currentItem;
- (void)setItemsDone:(unsigned int)arg1;
- (void)setItemsTotal:(unsigned int)arg1;
- (void)setUnifiedDone:(float)arg1;
- (void)setBkIsProgressing:(BOOL)arg1;
- (void)setCanCancel:(BOOL)arg1;
- (void)setIsProgressing:(BOOL)arg1;
- (void)setProgress:(float)arg1;
- (void)setRate:(float)arg1;
- (void)setEstimatedTimeRemaining:(double)arg1;
- (BOOL)isProgressIndeterminate;
- (void)updateStatus;
- (void)reset;
- (void)addActivityMonitor:(id)arg1;
- (void)removeActivityMonitor:(id)arg1;
- (void)updateAggregateIsProgressing;
- (void)updateAggregateValues;
- (void)updateIsProgressing;
- (void)updateUnitBasedValues;
- (void)updateTimeBasedValues;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)description;
- (void)recordBytes:(unsigned int)arg1;
- (void)signalCancel:(id)arg1;
- (int)activityType;
- (void)setActivityType:(int)arg1;
- (double)estimatedTimeRemaining;
- (id)namePlural;
- (void)setNamePlural:(id)arg1;
- (id)nameSingular;
- (void)setNameSingular:(id)arg1;
- (id)status;
- (void)setStatus:(id)arg1;
- (BOOL)canCancel;
- (unsigned int)itemsTotal;
- (unsigned int)itemsDone;
- (float)unifiedDone;
- (BOOL)isProgressing;
- (float)rate;
- (float)progress;
- (id)bkItemDescription;
- (void)setBkItemDescription:(id)arg1;
- (BOOL)bkIsProgressing;

@end

@interface ActivityAggregateArrayController : NSArrayController
{
}

- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface ActivityAggregator : NSObject
{
    NSTimer *_timer;
    ActivityAggregate *_in;
    ActivityAggregate *_out;
    ActivityAggregate *_save;
    unsigned int _numTimeBasedValueObservers;
    unsigned int _numberOfInterestingAggregates;
    double _timeBasedValueObserversLastNotifiedTime;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (id)init;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)dealloc;
- (id)in;
- (id)out;
- (id)save;
- (id)timer;
- (void)setTimer:(id)arg1;
- (void)installTimer;
- (void)uninstallTimer;
- (void)updateTimeBasedValues;
- (void)updateUnitBasedValues;
- (void)uiTimerFired;
- (void)recordInBytes:(unsigned int)arg1;
- (void)recordOutBytes:(unsigned int)arg1;
- (void)recordSaveBytes:(unsigned int)arg1;
- (void)activityMonitor:(id)arg1 didChangeTypeFrom:(int)arg2;
- (void)registerTimeBasedValueObserver:(id)arg1;
- (void)unregisterTimeBasedValueObserver:(id)arg1;
- (void)activityAggregateDidStart:(id)arg1;
- (void)activityAggregateDidEnd:(id)arg1;

@end

@interface ActivityMonitorMultiTarget : NSObject
{
    id _primaryTarget;
    NSMutableSet *_allTargets;
}

- (void)dealloc;
- (BOOL)addActivityTarget:(id)arg1;
- (BOOL)removeActivityTarget:(id)arg1;
- (id)primaryTarget;
- (void)setPrimaryTarget:(id)arg1;
- (id)allTargets;
- (id)displayName;

@end

@interface ActivityMonitor : NSObject <NSMachPortDelegate>
{
    NSString *_itemDescription;
    NSString *_taskName;
    NSString *_statusMessage;
    NSString *_descriptionString;
    NSMutableSet *_subMonitors;
    NSInvocation *_cancelInvocation;
    NSMachPort *_cancelPort;
    SafeValueCache *_targetDisplayNameCache;
    MFError *_error;
    id _delegate;
    id _target;
    float _doneValue;
    float previousDoneness;
    float _itemValue;
    float _itemMinValue;
    float _itemMaxValue;
    double _startTime;
    double _itemLastNotifiedTime;
    double _percentDone;
    int shouldUnifyDoneness;
    int currentProgressStage;
    int numberOfProgressStages;
    int _key;
    unsigned int _itemsDone;
    unsigned int _itemsTotal;
    unsigned int _itemFudgeFactor;
    int _changeCount;
    int _activityType;
    unsigned char _priority;
    BOOL _canCancel;
    BOOL _shouldCancel;
    BOOL _isActive;
    BOOL _isProgressing;
    BOOL _shouldPromptUserOnTermination;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (float)determinateProgress;
+ (void)setCurrentMonitor:(id)arg1;
+ (id)currentMonitor;
- (id)init;
- (void)dealloc;
- (BOOL)isActive;
- (void)setDelegate:(id)arg1;
- (void)postActivityStarting;
- (void)handlePortMessage:(id)arg1;
- (void)postActivityFinished;
- (void)_didChange;
- (int)changeCount;
- (void)setStatusMessage:(id)arg1;
- (void)setStatusMessage:(id)arg1 percentDone:(double)arg2;
- (id)statusMessage;
- (void)setPercentDone:(double)arg1;
- (double)percentDone;
- (float)unifiedFractionDone;
- (void)beginProgressFor:(int)arg1;
- (unsigned char)priority;
- (void)setPriority:(unsigned char)arg1;
- (id)activityDescription;
- (id)_updatedTargetDisplayName:(id)arg1;
- (id)description;
- (id)taskName;
- (void)setTaskName:(id)arg1;
- (void)setActivityTarget:(id)arg1;
- (id)activityTarget;
- (void)addActivityTarget:(id)arg1;
- (void)removeActivityTarget:(id)arg1;
- (void)setPrimaryTarget:(id)arg1;
- (id)activityTargets;
- (BOOL)canBeCancelled;
- (void)setCanBeCancelled:(BOOL)arg1;
- (BOOL)shouldCancel;
- (void)setShouldCancel:(BOOL)arg1;
- (void)addSubMonitor:(id)arg1;
- (void)removeSubMonitor:(id)arg1;
- (void)cancel;
- (int)acquireExclusiveAccessKey;
- (void)relinquishExclusiveAccessKey:(int)arg1;
- (void)setStatusMessage:(id)arg1 percentDone:(double)arg2 withKey:(int)arg3;
- (void)setStatusMessage:(id)arg1 withKey:(int)arg2;
- (void)setPercentDone:(double)arg1 withKey:(int)arg2;
- (void)_setCancelPort:(id)arg1;
- (id)cancelPort;
- (void)updateDoneValue;
- (void)setDoneValue:(float)arg1;
- (int)activityType;
- (void)setActivityType:(int)arg1;
- (void)setItemFudgeFactor:(unsigned int)arg1;
- (void)setIsProgressing:(BOOL)arg1;
- (void)setItemMaxValue:(float)arg1;
- (void)setItemIndeterminateValue;
- (void)setItem:(id)arg1;
- (void)resetItemValue;
- (void)setItemValue:(float)arg1;
- (void)setItemsDone:(unsigned int)arg1;
- (void)setItemsTotal:(unsigned int)arg1;
- (void)incrementItemValue:(float)arg1;
- (void)incrementItemsDone:(unsigned int)arg1;
- (void)incrementItemsTotal:(unsigned int)arg1;
- (void)markCompleted:(BOOL)arg1;
- (void)resetActivityType;
- (BOOL)shouldPromptUserOnTermination;
- (void)setShouldPromptUserOnTermination;
- (id)error;
- (void)setError:(id)arg1;
- (float)doneValue;
- (float)itemMaxValue;
- (float)itemMinValue;
- (void)setItemMinValue:(float)arg1;
- (float)itemValue;
- (unsigned int)itemsTotal;
- (unsigned int)itemsDone;
- (BOOL)isProgressing;
- (id)itemDescription;
- (void)setItemDescription:(id)arg1;
- (id)cancelInvocation;
- (void)setCancelInvocation:(id)arg1;

@end

@interface APOPConnection : POP3Connection
{
}

- (BOOL)authenticateUsingAccount:(id)arg1;
- (int)_authenticateUsingHostname:(id)arg1 username:(id)arg2 password:(id)arg3 authenticator:(id)arg4;

@end

@interface APOPAuthScheme : AuthScheme
{
}

- (BOOL)supportsAccountType:(id)arg1;
- (Class)connectionClassForAccount:(id)arg1;
- (Class)authenticatorClassForAccount:(id)arg1;
- (int)securityLevel;
- (BOOL)requiresPassword;
- (BOOL)requiresDomain;
- (id)name;
- (id)humanReadableName;
- (BOOL)canAuthenticateAccount:(id)arg1 connection:(id)arg2;

@end

@interface PlaceholderArchiveFileWrapper : ArchiveFileWrapper
{
}

- (BOOL)isPlaceholder;

@end

@interface ArchiveFileWrapper : NSFileWrapper
{
    NSData *_archiveData;
    int _archiveType;
    NSFileWrapper *_realFileWrapper;
    NSString *_quarantinePath;
    BOOL _isWritingToFile;
}

- (void)dealloc;
- (id)initWithData:(id)arg1 archiveType:(int)arg2;
- (id)initRegularFileWithContents:(id)arg1;
- (id)initSymbolicLinkWithDestination:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithSerializedRepresentation:(id)arg1;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 updateFilenames:(BOOL)arg3;
- (id)expandQuarantined;
- (void)removeQuarantine;
- (unsigned int)approximateSize;
- (BOOL)isRegularFile;
- (BOOL)isDirectory;
- (BOOL)isSymbolicLink;
- (id)serializedRepresentation;
- (id)addFileWrapper:(id)arg1;
- (void)removeFileWrapper:(id)arg1;
- (id)fileWrappers;
- (id)keyForFileWrapper:(id)arg1;
- (id)addFileWithPath:(id)arg1;
- (id)addRegularFileWithContents:(id)arg1 preferredFilename:(id)arg2;
- (id)addSymbolicLinkWithDestination:(id)arg1 preferredFilename:(id)arg2;
- (id)preferredFilename;
- (void)getCompressedData:(id *)arg1 archiveType:(int *)arg2;
- (id)fileAttributes;

@end

@interface ASExtendedTableView : NSTableView
{
    struct {
        unsigned int delegateProvidesDragImage:1;
        unsigned int delegateDoesCommandBySelector:1;
        unsigned int delegateDragWillEndOperation:1;
        unsigned int delegateDraggedImageMovedTo:1;
        unsigned int delegateProvidesBackgroundShadedRegions:1;
        unsigned int delegateProvidesHighlightStyle:1;
        unsigned int delegateRespondsToWillDrawRowsInRange:1;
        unsigned int delegateRespondsToDidDrawRowsInRange:1;
        unsigned int delegateApprovesScrolling:1;
        unsigned int delegateRespondsToGotEvent:1;
        unsigned int delegateRespondsToMouseDown:1;
        unsigned int delegateRespondsToWillMoveToWindow:1;
        unsigned int delegateRespondsToDidMoveToWindow:1;
        unsigned int delegateRespondsToWillStartLiveResize:1;
        unsigned int delegateRespondsToDidEndLiveResize:1;
    } _extendedTableViewFlags;
    BOOL _didLazyLoadMenu;
    int _mfClickedRow;
}

- (id)extendedDelegate;
- (id)menuForEvent:(id)arg1;
- (void)awakeFromNib;
- (void)finalize;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)keyDown:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)menu;
- (void)showTableColumnsFromArray:(id)arg1 allColumns:(id)arg2;
- (void)scrollRowToVisible:(int)arg1;
- (void)setTableColumn:(id)arg1 toVisible:(BOOL)arg2 atPosition:(int)arg3;
- (void)moveColumn:(int)arg1 toColumn:(int)arg2;
- (id)dragImageForRowsWithIndexes:(id)arg1 tableColumns:(id)arg2 event:(id)arg3 offset:(struct _NSPoint *)arg4;
- (void)draggedImage:(id)arg1 endedAt:(struct _NSPoint)arg2 operation:(unsigned int)arg3;
- (void)draggedImage:(id)arg1 movedTo:(struct _NSPoint)arg2;
- (BOOL)shouldUseSecondaryHighlightColor;
- (void)_highlightRect:(struct _NSRect)arg1 withColor:(id)arg2 usingStyle:(int)arg3;
- (void)_colorizeRow:(int)arg1 inRect:(struct _NSRect)arg2 clipRect:(struct _NSRect)arg3;
- (void)drawBackgroundInClipRect:(struct _NSRect)arg1;
- (void)drawRect:(struct _NSRect)arg1;
- (void)drawRow:(int)arg1 clipRect:(struct _NSRect)arg2;
- (int)clickedRow;
- (void)setMFClickedRow:(int)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)_postEventNotification:(id)arg1 fromCell:(id)arg2;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;

@end

@interface ASExtendedTableHeaderView : NSTableHeaderView
{
    BOOL _didLazyLoadMenu;
}

- (id)menu;

@end

@interface AuthScheme : NSObject
{
}

+ (void)initialize;
+ (id)knownSchemes;
+ (void)registerSchemeClass:(Class)arg1;
+ (id)schemeWithName:(id)arg1;
+ (id)authSchemesForAccount:(id)arg1 connection:(id)arg2;
+ (id)schemeWithAccountInfo:(id)arg1;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (Class)connectionClassForAccount:(id)arg1;
- (Class)authenticatorClassForAccount:(id)arg1;
- (BOOL)hasEncryption;
- (int)securityLevel;
- (BOOL)canAuthenticateAccount:(id)arg1 connection:(id)arg2;
- (id)authenticatorForAccount:(id)arg1 connection:(id)arg2;
- (BOOL)requiresPassword;
- (BOOL)requiresDomain;
- (id)name;
- (id)humanReadableName;
- (int)compareBySecurityLevel:(id)arg1;

@end

@interface BackupManager : NSObject
{
    MailboxUid *_topLevelRecoveryMailbox;
    NSDictionary *_lastSavedTableOfContents;
    NSMapTable *_mailboxBackupPaths;
    NSMutableDictionary *_mailboxesWithKnownContents;
    id _editableMessagesLock;
    BOOL _registeredForEditableMessageNotifications;
}

+ (id)sharedManager;
- (id)init;
- (void)dealloc;
- (void)invalidateCaches;
- (void)editableMessagesWereAdded:(id)arg1;
- (void)editableMessagesWereDeleted:(id)arg1;
- (void)_setupDefaultTopLevelRecoveryMailbox;
- (id)restoreMessagesAtPaths:(id)arg1 intoMailboxNamed:(id)arg2;
- (id)restoreMessagesAtPaths:(id)arg1 intoMailboxNamed:(id)arg2 reuseMailbox:(BOOL)arg3 createdMailboxNamed:(id *)arg4;
- (id)restoreMailboxAtPath:(id)arg1 intoMailboxNamed:(id)arg2;
- (BOOL)restoreMailboxAtPath:(id)arg1 intoArray:(id)arg2;
- (BOOL)_restoreMailboxAtPath:(id)arg1 intoMailbox:(id)arg2 orArray:(id)arg3;
- (void)setTopLevelRecoveryMailbox:(id)arg1;
- (id)_topLevelRecoveryMailbox;
- (id)_recoveryMailboxWithSuggestedName:(id)arg1 reuseMailbox:(BOOL)arg2;
- (id)_reducedPathFromFullPath:(id)arg1 supportDirectory:(id)arg2;
- (id)_reducedPathFromFullPath:(id)arg1;
- (BOOL)shouldSaveMessagesForMailbox:(id)arg1;
- (BOOL)_shouldSaveDisplayNameForMailbox:(id)arg1;
- (id)_expandedMailboxes:(id)arg1;
- (id)_dictionaryForSection:(int)arg1;
- (id)_dictionaryForMailbox:(id)arg1 parent:(id)arg2 messagePool:(id)arg3;
- (id)_dictionaryForMessage:(id)arg1 includeRecipients:(BOOL)arg2;
- (int)_sectionForMailbox:(id)arg1;
- (void)_addMailbox:(id)arg1 toSection:(int)arg2 sections:(id)arg3 messagePool:(id)arg4;
- (id)tableOfContents;
- (BOOL)saveTableOfContents:(id)arg1;
- (id)backupPathForMailbox:(id)arg1;
- (id)_backupPathForMailbox:(id)arg1 withParentPath:(id)arg2 pathsCache:(id)arg3;
- (id)backupPathForMailbox:(id)arg1 pathsCache:(id)arg2;
- (id)backupMailboxesEnumerator;

@end

@interface BerkeleyMbox : MessageStore
{
    NSData *_mboxData;
    NSString *_path;
}

+ (BOOL)storeExistsForPath:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)createEmptyStoreForPath:(id)arg1;
- (id)initWithPath:(id)arg1 create:(BOOL)arg2 readOnly:(BOOL)arg3 account:(id)arg4;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (void)dealloc;
- (void)writeUpdatedMessageDataToDisk;
- (id)path;
- (id)_lockFilePath;
- (id)_mboxData;
- (void)_resetAllMessages;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (void)doCompact;
- (id)_defaultRouterDestination;
- (void)fetchSynchronously;

@end

@interface BookmarksManager : NSObject
{
    NSManagedObjectContext *_managedObjectContext;
}

+ (void)initialize;
+ (id)_sharedPersistentStoreCoordinator;
+ (id)_createManagedObjectModel;
- (id)init;
- (void)dealloc;
- (void)_configureTransientFeedContext;
- (void)addAllRSSFeedsIfNecessary;
- (id)subscribedFeeds;
- (unsigned int)countOfSubscribedFeeds;
- (void)saveTransientFeedChanges;
- (void)discardTransientFeedChanges;
- (BOOL)updateContextWithChanges:(id)arg1;
- (void)clearTransientFeedContext;
- (id)transientFeedContext;
- (void)_setContext:(id)arg1;
- (id)addBookmarkWithId:(id)arg1;
- (id)addFolderWithId:(id)arg1 checkIfExists:(BOOL)arg2;
- (id)bookmarkWithId:(id)arg1;
- (id)folderWithId:(id)arg1;
- (id)addBookmarkWithURL:(id)arg1;
- (id)addSubscribedBookmarkWithURL:(id)arg1 name:(id)arg2;
- (id)bookmarksWithURL:(id)arg1;
- (id)bookmarkURLWithName:(id)arg1;
- (id)_itemsWithValue:(id)arg1 forKey:(id)arg2 entity:(id)arg3;
- (BOOL)setBookmarksWithURL:(id)arg1 isSubscribed:(BOOL)arg2 shouldDisplayUnderInbox:(BOOL)arg3;
- (BOOL)deleteBookmarkWithId:(id)arg1;
- (BOOL)_deleteBookmark:(id)arg1;
- (BOOL)deleteFolderWithId:(id)arg1;
- (BOOL)_deleteFolder:(id)arg1;
- (void)deleteAllBookmarks;
- (void)deleteAllFolders;
- (id)_allItemsForEntity:(id)arg1;

@end

@interface MutableByteSet : ByteSet
{
}

- (void)addBytesInRange:(struct _NSRange)arg1;
- (void)removeBytesInRange:(struct _NSRange)arg1;
- (void)invert;

@end

@interface ByteSet : NSObject <NSCopying, NSMutableCopying>
{
    char mySet[32];
}

+ (id)asciiWhitespaceSet;
+ (id)ASCIIByteSet;
+ (id)nonASCIIByteSet;
+ (id)suspiciousCodepage1252ByteSet;
- (BOOL)byteIsMember:(BOOL)arg1;
- (id)invertedSet;
- (id)initWithRange:(struct _NSRange)arg1;
- (id)initWithCString:(const char *)arg1;
- (id)initWithBytes:(const void *)arg1 length:(unsigned int)arg2;
- (id)_initWithSet:(const char *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;

@end

@interface BytesFormatter : NSNumberFormatter
{
}

- (id)init;
- (id)stringFromNumber:(id)arg1;

@end

@interface CachingABRecord : NSObject
{
    ABRecord *record;
    NSDictionary *recordDictionary;
    BOOL recordIsRemote;
    PHXSource *recordSource;
    NSMutableArray *matchingEmails;
    CachingABRecord *associatedRecord;
}

- (id)initWithABRecord:(id)arg1;
- (id)initWithABRecord:(id)arg1 fromSource:(id)arg2 isRemote:(BOOL)arg3;
- (void)dealloc;
- (void)finalize;
- (void)refetchRecordFromSharedAddressBook;
- (id)valueForProperty:(id)arg1;
- (BOOL)setValue:(id)arg1 forProperty:(id)arg2;
- (id)firstName;
- (id)lastName;
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)firstAndMiddleNames;
- (id)lastNameAndExtension;
- (id)_fullName;
- (id)_fullNameShowingNickname:(BOOL)arg1;
- (id)email;
- (id)emailAddresses;
- (BOOL)isGroup;
- (id)compoundName;
- (id)compoundNameAndEmail;
- (id)uniqueId;
- (int)recordType;
- (BOOL)exactlyMatchesString:(id)arg1;
- (id)associatedRecord;
- (BOOL)isRecentRecord;
- (BOOL)hasHandles;
- (BOOL)hasEmailAddress:(id)arg1;
- (BOOL)hasRelatedAddressBookRecord;
- (id)mostRecentDate;
- (id)record;
- (id)matchingEmails;
- (void)addMatchingEmail:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;

@end

@interface CalendarStoreInterchange : NSObject <CalendarStoreConduit>
{
    NSPredicate *_predicateForAllToDos;
    BOOL _holdNotifications;
    NSMutableArray *_queuedNotifications;
    NSMutableArray *_queuedNotificationsTypes;
    ToDosCache *_todosCache;
    ToDoCalendars *_todoCalendars;
    InvocationQueue *_invocationQueue;
}

+ (BOOL)isHandlingCalendarStoreChange;
+ (void)_beginHandlingCalendarStoreChange;
+ (void)_endHandlingCalendarStoreChange;
- (void)_setPredicateForAllToDosUsingCalendars:(id)arg1;
- (id)initWithToDosCache:(id)arg1 todoCalendars:(id)arg2;
- (id)init;
- (void)dealloc;
- (void)initialSynchronization;
- (void)_retrieveCurrentCalendarStoreState;
- (id)calTaskWithID:(id)arg1;
- (void)synchronize;
- (void)holdNotifications;
- (void)resumeNotifications;
- (void)addToDo:(id)arg1;
- (void)saveToDo:(id)arg1;
- (void)removeToDo:(id)arg1;
- (void)addCalendar:(id)arg1;
- (void)saveCalendar:(id)arg1;
- (void)removeCalendar:(id)arg1;
- (void)addCalendarGroup:(id)arg1;
- (void)saveCalendarGroup:(id)arg1;
- (void)removeCalendarGroup:(id)arg1;
- (void)removeCalendarGroup:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (id)_createFakeNotificationWithID:(id)arg1 object:(id)arg2 objectIDForUserInfo:(id)arg3 keyForUserInfo:(id)arg4;
- (void)_notifyOfChangesInToDoCalendar:(id)arg1;
- (void)_notifyOfChangesInToDo:(id)arg1;
- (void)_updateMailitemURIonToDo:(id)arg1;
- (void)_cleanUpToDosWithoutAccounts;
- (id)_currentToDosState;
- (id)_currentCalendarsState;
- (id)_currentCalendarGroupsState;
- (id)_todosFromUIDs:(id)arg1 forAddingToDos:(BOOL)arg2;
- (id)_todosFromCurrentUIDs:(id)arg1;
- (id)_todosFromNewUIDs:(id)arg1;
- (id)_cachedToDosFromUIDs:(id)arg1;
- (id)_calendarsFromUIDs:(id)arg1;
- (id)_cachedCalendarsFromUIDs:(id)arg1;
- (id)_cachedCalendarGroupsFromUIDs:(id)arg1;
- (id)_findExistingTodoCalendarGroupForCalGroup:(id)arg1;
- (id)_findAccountFromCalendarGroupID:(id)arg1;
- (id)_createLibraryToDoCalendarFromCalCalendar:(id)arg1;
- (id)_createToDoCalendarGroupFromCalGroup:(id)arg1;
- (void)_calTaskDidChangeNotification:(id)arg1;
- (void)_handleCalTaskChangeNotification:(id)arg1;
- (void)_calTaskDateStampDidChangeNotification:(id)arg1;
- (id)_calendarAccountFromCalCalendar:(id)arg1;
- (id)_getColorFromCalCalendar:(id)arg1;
- (void)_calCalendarDidChangeNotification:(id)arg1;
- (void)_handleCalCalendarChangeNotification:(id)arg1;
- (void)_calGroupDidChangeNotification:(id)arg1;
- (void)_handleCalGroupChangeNotification:(id)arg1;
- (void)_calCalendarResetNotification:(id)arg1;
- (void)_handleCalCalendarResetNotification:(id)arg1;
- (BOOL)_reportInconsistenciesInCalendar:(id)arg1;
- (BOOL)_reportInconsistenciesInToDo:(id)arg1;
- (BOOL)_todo:(id)arg1 isInSameAccountAsCalTask:(id)arg2;
- (id)_newCalTaskForToDoThatMovedBetweenAccounts:(id)arg1;
- (void)_splitUpdatedToDoIDs:(id)arg1 intoDeletedToDoIDs:(id)arg2 addedToDoIDs:(id)arg3;
- (BOOL)_addCalGroup:(id)arg1;
- (BOOL)_deleteCalGroup:(id)arg1;
- (BOOL)_addCalCalendar:(id)arg1;
- (BOOL)_addCalTask:(id)arg1;
- (BOOL)_updateCalTask:(id)arg1;
- (BOOL)_deleteCalTask:(id)arg1;
- (id)_recreateIMAPGroups:(id)arg1;
- (void)_recreateIMAPCalendars:(id)arg1 usingGroupsMapping:(id)arg2;
- (void)recreateIMAPGroups:(id)arg1 calendars:(id)arg2 todos:(id)arg3;
- (void)_removeIMAPInformationFromiCalDueToReset;
- (void)_removeToDosAffectedByReset:(id)arg1;
- (void)_splitKnownCalendarGroupsIntoThoseWithTruthIniCal:(id *)arg1 andTruthInMail:(id *)arg2;
- (void)_splitKnownCalendarsIntoThoseWithTruthIniCal:(id *)arg1 andTruthInMail:(id *)arg2;
- (void)_splitKnownToDosIntoThoseWithTruthIniCal:(id *)arg1 andTruthInMail:(id *)arg2;
- (void)_sendCalendarGroupsNotificationOfType:(id)arg1 withObjects:(id)arg2;
- (void)_sendCalendarsNotificationOfType:(id)arg1 withObjects:(id)arg2;
- (void)_sendToDosNotificationOfType:(id)arg1 withObjects:(id)arg2;
- (BOOL)_inferredCalendarStoreReset;

@end

@interface ChangeMerger : NSObject
{
    NSMutableDictionary *_adds;
    NSMutableDictionary *_updates;
    NSMutableDictionary *_deletes;
}

- (void)add:(id)arg1;
- (void)update:(id)arg1;
- (void)delete:(id)arg1;
- (id)addedObjects;
- (id)updatedObjects;
- (id)deletedObjects;
- (void)changesSaved;

@end

@interface Connection : NSObject
{
    id <SASLSecurityLayer> _securityLayer;
    _NSSocket *_socket;
    char *_buffer;
    int _bufferRemainingBytes;
    unsigned int _bufferStart;
    unsigned int _bufferLength;
    NSData *_logData;
    NSString *_hostname;
    unsigned int _portNumber;
    int _securityLayerType;
    NSString *_username;
    NSString *_password;
    SASLAuthenticator *_authenticator;
    Class _accountClass;
    double _connectTimeout;
    double _readWriteTimeout;
    BOOL _canReauthenticate;
}

+ (void)initialize;
+ (void)logBytes:(const char *)arg1 length:(unsigned long)arg2;
+ (void)flushLog;
+ (id)logClasses;
+ (void)setLogClasses:(id)arg1;
+ (BOOL)logAllSocketActivity;
+ (void)setLogAllSocketActivity:(BOOL)arg1;
+ (id)logActivityOnPorts;
+ (void)setLogActivityOnPorts:(id)arg1;
+ (id)logActivityOnHosts;
+ (void)setLogActivityOnHosts:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (void)_resetLogHeader;
- (void)_setupSSLDomainError:(id)arg1 hostname:(id)arg2 socket:(id)arg3;
- (void)_setupConnectionErrorMessageForMonitor:(id)arg1 withHostname:(id)arg2 port:(unsigned long)arg3 usingSSL:(BOOL)arg4;
- (BOOL)connectAndSetSecurityLayerUsingAccount:(id)arg1;
- (BOOL)connectUsingAccount:(id)arg1;
- (BOOL)reconnect;
- (BOOL)_connectUsingAccount:(id)arg1 securityLayerType:(int)arg2;
- (BOOL)_connectUsingHostname:(id)arg1 onPort:(unsigned long)arg2 securityLayerType:(int)arg3 accountClass:(Class)arg4;
- (void)_clearSuccessfulConnection;
- (void)_setSuccessfulConnectionHostname:(id)arg1 onPort:(unsigned long)arg2 securityLayerType:(int)arg3 accountClass:(Class)arg4;
- (void)_setupConnection;
- (BOOL)_teardownConnectionWithResult:(BOOL)arg1;
- (BOOL)authenticateUsingAccount:(id)arg1;
- (BOOL)_reauthenticate;
- (void)_clearSuccessfulAuthentication;
- (void)_setSuccessfulAuthenticationUsername:(id)arg1 password:(id)arg2 authenticator:(id)arg3;
- (id)capabilities;
- (id)authenticationMechanisms;
- (BOOL)_writeData:(id)arg1 dontLogBytesInRange:(struct _NSRange)arg2 error:(id *)arg3;
- (BOOL)_writeData:(id)arg1 error:(id *)arg2;
- (int)_readBytesFromSocketIntoBuffer:(char *)arg1 amount:(int)arg2 requireAllBytes:(BOOL)arg3 error:(id *)arg4;
- (BOOL)_fillBuffer:(id *)arg1;
- (BOOL)_readLineIntoData:(id)arg1 error:(id *)arg2;
- (BOOL)_readBytesIntoData:(id)arg1 desiredLength:(unsigned int)arg2 error:(id *)arg3;
- (BOOL)_authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (BOOL)_startTLSForHostname:(id)arg1 onPort:(unsigned long)arg2 securityLayerType:(int)arg3 accountClass:(Class)arg4;
- (int)_startTLSForSecurityLayerType:(int)arg1;
- (BOOL)isValid;
- (void)disconnect;
- (void *)_socket;
- (BOOL)_hasBytesAvailable;
- (id)hostname;
- (double)readWriteTimeout;
- (void)setReadWriteTimeout:(double)arg1;
- (double)connectTimeout;
- (void)setConnectTimeout:(double)arg1;

@end

@interface CRAM_MD5Authenticator : SASLAuthenticator
{
}

- (id)responseForServerData:(id)arg1;

@end

@interface CRAM_MD5AuthScheme : AuthScheme
{
}

- (Class)authenticatorClassForAccount:(id)arg1;
- (id)name;
- (id)humanReadableName;
- (BOOL)sendsPlainTextPasswords;
- (BOOL)hasEncryption;
- (int)securityLevel;
- (BOOL)canAuthenticateAccount:(id)arg1 connection:(id)arg2;

@end

@interface RawSQLCriterion : Criterion
{
    id _target;
    SEL _action;
    id _evaluationBlock;
}

+ (id)stringForCriterionType:(int)arg1;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2 evaluationBlock:(id)arg3;
- (void)dealloc;
- (id)rawSQLString;
- (BOOL)evaluateMessage:(id)arg1;
- (int)criterionType;
- (id)description;

@end

@interface Criterion : NSObject
{
    NSString *_uniqueId;
    NSString *_name;
    NSString *_expression;
    NSString *_criterionIdentifier;
    int _criterionType;
    int _qualifier;
    int _dateUnits;
    BOOL _dateIsRelative;
    NSArray *_criteria;
    BOOL _allCriteriaMustBeSatisfied;
    unsigned int _knownLimit;
    NSString *_cachedAccountURLForSyncConflictResolution;
    int _specialMailboxUidType;
}

+ (id)criteriaFromDefaultsArray:(id)arg1;
+ (id)criteriaFromDefaultsArray:(id)arg1 removingRecognizedKeys:(BOOL)arg2;
+ (id)defaultsArrayFromCriteria:(id)arg1;
+ (id)compoundCriterionWithCriteria:(id)arg1;
+ (int)criterionTypeForString:(id)arg1;
+ (id)stringForCriterionType:(int)arg1;
- (id)compoundCriterionBySplittingExpression;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 andRemoveRecognizedKeysIfMutable:(BOOL)arg2;
- (id)init;
- (id)initWithCriterion:(id)arg1 expression:(id)arg2;
- (id)initWithDictionary:(id)arg1;
- (id)dictionaryRepresentation;
- (int)criterionType;
- (BOOL)hasExpression;
- (void)setCriterionType:(int)arg1;
- (void)setCriterionIdentifier:(id)arg1;
- (void)_setCriterionIdentifier:(id)arg1;
- (id)criterionIdentifier;
- (id)_qualifierString;
- (BOOL)containsBodyCriterion;
- (int)ruleQualifierForString:(id)arg1;
- (id)stringForRuleQualifier:(int)arg1;
- (id)simplifyOnce;
- (id)simplifiedCriterion;
- (void)setCriteria:(id)arg1;
- (id)descriptionWithDepth:(unsigned int)arg1;
- (id)description;
- (BOOL)isValid:(id *)arg1 options:(unsigned long)arg2;
- (unsigned int)knownLimit;
- (void)setKnownLimit:(unsigned int)arg1;
- (int)specialMailboxUidType;
- (void)setSpecialMailboxUidType:(int)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (id)criteria;
- (BOOL)dateIsRelative;
- (void)setDateIsRelative:(BOOL)arg1;
- (int)dateUnits;
- (void)setDateUnits:(int)arg1;
- (int)qualifier;
- (void)setQualifier:(int)arg1;
- (id)expression;
- (void)setExpression:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;

@end

@interface DatabaseRecoverer : NSObject
{
    NSString *_path;
    int _type;
    NSCondition *_analysisCondition;
    unsigned int _analysisResult;
}

+ (BOOL)anotherLocalCopyOfMailIsRunning;
+ (id)moveDatabaseToUniquePath:(id)arg1;
- (void)dealloc;
- (id)initWithPath:(id)arg1 type:(int)arg2;
- (id)init;
- (void)_analyzeBusyCondition;
- (void)analyzeBusyCondition;
- (BOOL)fileLocked;
- (BOOL)aRemoteApplicationIsAccessingTheDatabase;
- (BOOL)lockFileFound;
- (void)removeLockFile;
- (void)recover;
- (void)_removeLocks;
- (id)_moveToUniquePath;
- (void)_moveToOriginalPath:(id)arg1;
- (unsigned int)analysisResult;
- (void)setAnalysisResult:(unsigned int)arg1;
- (id)analysisCondition;
- (void)setAnalysisCondition:(id)arg1;
- (int)type;
- (void)setType:(int)arg1;
- (id)path;
- (void)setPath:(id)arg1;

@end

@interface DataScanner : NSObject
{
    NSData *myData;
    unsigned int myLocation;
}

+ (id)scannerWithData:(id)arg1;
- (void)setData:(id)arg1;
- (void)dealloc;
- (id)data;
- (unsigned int)scanLocation;
- (void)setScanLocation:(unsigned int)arg1;
- (BOOL)scanByte:(char *)arg1;
- (BOOL)scanInt:(int *)arg1;
- (BOOL)scanData:(id)arg1 intoData:(id *)arg2;
- (BOOL)scanCString:(const char *)arg1 intoData:(id *)arg2;
- (BOOL)scanBytesFromSet:(id)arg1 intoData:(id *)arg2;
- (void)incrementLocation;
- (BOOL)scanUpToData:(id)arg1 intoData:(id *)arg2;
- (BOOL)scanUpToCString:(const char *)arg1 intoData:(id *)arg2;
- (BOOL)scanUpToBytesFromSet:(id)arg1 intoData:(id *)arg2;
- (BOOL)isAtEnd;
- (BOOL)byteAtScanLocation;
- (id)nextTokenWithPunctuation:(id)arg1;
- (id)initWithData:(id)arg1;

@end

@interface Defaults : NSObject
{
}

+ (void)initialize;
+ (void)_userDefaultsChanged:(id)arg1;
+ (id)sharedInstance;
+ (void)setupLoggingDefaults;
+ (id)logMessages;
+ (id)macBuddyPlist;
+ (id)mailSetupFromMacBuddy;
+ (id)localeCache;
+ (void)resetLocaleCache;
+ (double)backgroundThreadPriority;
+ (unsigned int)preferredWindowBackingLocation;
- (id)primaryEmailAddress;
- (void)setPrimaryEmailAddress:(id)arg1;
- (int)headerDetailLevel;
- (void)setHeaderDetailLevel:(int)arg1;
- (id)_regexesForCustomDisplayedHeaders;
- (id)headersToDisplayFromHeaderKeys:(id)arg1 headerDetailLevel:(int)arg2;
- (id)customDisplayedHeaders;
- (void)setCustomDisplayedHeaders:(id)arg1;
- (int)sendFormat;
- (void)setSendFormat:(int)arg1;
- (id)mailAccountDirectory;
- (id)unresolvedSupportDirectory;
- (void)_setSupportDirectoryForTesting:(id)arg1;
- (id)supportDirectory;
- (id)defaultMailDirectory;
- (void)setDefaultRSSDirectory:(id)arg1;
- (id)defaultRSSDirectory;
- (id)archiveMailbox;
- (id)draftsMailbox;
- (id)notesMailbox;
- (id)trashMailboxName;
- (id)todosMailbox;
- (id)quotingColorList;
- (void)setQuotingColorList:(id)arg1;
- (id)colorForQuoteLevel:(int)arg1;
- (id)userStyleSheetURL;
- (id)alternateAddressesForSelf;
- (id)dictionaryForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (void)setBool:(BOOL)arg1 forKey:(id)arg2;
- (BOOL)boolForKey:(id)arg1;
- (int)integerForKey:(id)arg1;
- (BOOL)synchronize;

@end

@interface DeliveryAccount : Account
{
}

+ (void)initialize;
+ (id)_deliveryAccounts;
+ (id)deliveryAccounts;
+ (id)syncableDeliveryAccounts;
+ (void)setDeliveryAccounts:(id)arg1;
+ (void)addDeliveryAccount:(id)arg1;
+ (void)insertObjectInDeliveryAccounts:(id)arg1 atIndex:(unsigned int)arg2;
+ (void)removeDeliveryAccount:(id)arg1;
+ (void)registerDynamicAccount:(id)arg1;
+ (void)unregisterDynamicAccount:(id)arg1;
+ (void)clearIsSyncableForHTTPMailAccounts;
+ (void)_postDeliveryAccountsHaveChanged;
+ (id)readDeliveryAccountsFromDefaults;
+ (void)saveAccountInfoToDefaults;
+ (id)accountWithUniqueId:(id)arg1;
+ (id)accountWithIdentifier:(id)arg1;
+ (id)accountWithDomain:(id)arg1;
+ (id)accountWithWhichToSendMessage:(id)arg1;
+ (id)accountForHeaders:(id)arg1 message:(id)arg2;
+ (id)existingAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)accountWithHostname:(id)arg1 username:(id)arg2;
+ (id)accountWithHostname:(id)arg1 username:(id)arg2 lookForExistingAccounts:(BOOL)arg3 addToDeliveryAccountsIfNeeded:(BOOL)arg4;
+ (id)newDefaultInstance;
- (Class)deliveryClass;
- (BOOL)isDynamic;
- (id)associatedAccount;
- (void)setAssociatedAccount:(id)arg1;
- (id)displayName;
- (id)identifier;
- (void)updateFromSyncedDictionary:(id)arg1;
- (BOOL)shouldUseAuthentication;
- (void)setShouldUseAuthentication:(BOOL)arg1;
- (unsigned long long)maximumMessageBytes;
- (void)setMaximumMessageBytes:(unsigned long long)arg1;
- (id)remoteMailAccountsEmployedBy;

@end

@interface EWSAccount : RemoteStoreAccount
{
    double _lastFullFetchDuration;
    double _lastFullFetchTime;
    EWSConnection *_connection;
    EWSGateway *_gateway;
    EWSDeliveryAccount *_ewsDeliveryAccount;
    NSMutableDictionary *_folderIdsToMailboxUids;
    NSDictionary *_distinguishedFolderIdsAndMailboxUidTypes;
    InvocationQueue *_networkChangeQueue;
    id _connectionLock;
    id _folderHierarchySyncLock;
    MFUUID *_messageTracerUUID;
    int _canCreateToDos;
    BOOL _useExternalURL;
}

+ (id)accountTypeString;
+ (id)defaultPathNameForAccount;
+ (id)keyPathsForValuesAffecting_URLConnectionScheme;
+ (id)keyPathsForValuesAffectingInternalConnectionURL;
+ (id)keyPathsForValuesAffectingExternalConnectionURL;
- (id)init;
- (void)dealloc;
- (Class)connectionClass;
- (unsigned long)defaultPortNumber;
- (unsigned long)defaultSecurePortNumber;
- (BOOL)requiresAuthentication;
- (int)securityLayerType;
- (void)setSecurityLayerType:(int)arg1;
- (id)domain;
- (void)setDomain:(id)arg1;
- (id)preferredAuthScheme;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)defaultsDictionary;
- (void)setUsesSSL:(BOOL)arg1;
- (void)setPortNumber:(unsigned long)arg1;
- (id)permanentPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)sessionPassword;
- (void)setSessionPassword:(id)arg1;
- (id)_passwordWithPersistence:(unsigned int)arg1;
- (void)_setPassword:(id)arg1 persistence:(unsigned int)arg2;
- (BOOL)isSyncable;
- (id)createConnectedConnection;
- (id)authenticatedConnection;
- (BOOL)_connectAndAuthenticate:(id)arg1;
- (void)releaseAllConnections;
- (void)setIsOffline:(BOOL)arg1;
- (id)_URLPersistenceScheme;
- (id)_URLInternalConnectionScheme;
- (id)_URLExternalConnectionScheme;
- (Class)storeClass;
- (Class)todoStoreClass;
- (BOOL)allowsToDoCalendarCreation;
- (BOOL)supportsRichTextNotes;
- (BOOL)defaultShouldShowNotesInInbox;
- (BOOL)supportsToDos;
- (id)mailboxPathExtension;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)setShouldMoveDeletedMessagesToTrash:(BOOL)arg1;
- (id)primaryMailboxUid;
- (BOOL)deleteConvertsStoreToFolder;
- (void)fetchSynchronouslyIsAuto:(id)arg1;
- (void)synchronizeAllMailboxes;
- (BOOL)_shouldSynchronizeMailbox:(id)arg1;
- (void)_synchronizeMailboxesSynchronously;
- (BOOL)_supportsMailboxListInitialization;
- (BOOL)_synchronizeMailboxListWithUserInput:(BOOL)arg1;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (BOOL)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (id)_defaultSpecialMailboxNameForType:(int)arg1;
- (id)_specialMailboxNameForType:(int)arg1;
- (void)_setSpecialMailboxName:(id)arg1 forType:(int)arg2;
- (BOOL)_readMailboxCache;
- (id)junkMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)todosMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2 displayName:(id)arg3;
- (id)_createMailboxWithParent:(id)arg1 name:(id)arg2 displayName:(id)arg3 type:(int)arg4;
- (BOOL)canMailboxBeRenamed:(id)arg1;
- (BOOL)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (BOOL)_deleteMailbox:(id)arg1;
- (BOOL)supportsSlashesInMailboxName;
- (id)validNameForMailbox:(id)arg1 fromDisplayName:(id)arg2 error:(id *)arg3;
- (id)_mailboxNameForFolderName:(id)arg1;
- (id)_folderNameForMailboxName:(id)arg1;
- (id)deliveryAccount;
- (void)setDeliveryAccount:(id)arg1;
- (id)dynamicDeliveryAccount;
- (id)_specialMailboxUidWithType:(int)arg1 create:(BOOL)arg2 isLocal:(BOOL)arg3;
- (BOOL)storeJunkOnServerDefault;
- (id)externalHostname;
- (void)setExternalHostname:(id)arg1;
- (unsigned long)externalPortNumber;
- (void)setExternalPortNumber:(unsigned long)arg1;
- (BOOL)externalUsesSSL;
- (void)setExternalUsesSSL:(BOOL)arg1;
- (id)internalServerPath;
- (void)setInternalServerPath:(id)arg1;
- (id)externalServerPath;
- (void)setExternalServerPath:(id)arg1;
- (id)_serverPathWithAccountInfoKey:(id)arg1;
- (void)_setServerPath:(id)arg1 accountInfoKey:(id)arg2;
- (id)folderHierarchySyncState;
- (void)setFolderHierarchySyncState:(id)arg1;
- (id)internalConnectionURL;
- (void)setInternalConnectionURL:(id)arg1;
- (id)externalConnectionURL;
- (void)setExternalConnectionURL:(id)arg1;
- (id)_connectionURL:(BOOL)arg1;
- (void)_setConnectionURL:(id)arg1 isExternal:(BOOL)arg2;
- (id)connectionURL;
- (void)_invalidateCanCreateToDos:(id)arg1;
- (void)_calCalendarsChanged:(id)arg1;
- (BOOL)_isSameAsCalGroup:(id)arg1;
- (void)_networkConfigurationChanged:(id)arg1;
- (BOOL)_shouldHideMailboxUid:(id)arg1 withType:(int)arg2;
- (id)mailboxNameForFolderIdString:(id)arg1;
- (void)createMailboxFromEWSFolder:(id)arg1;
- (void)updateMailboxForEWSFolder:(id)arg1;
- (void)deleteMailboxForEWSFolderIdString:(id)arg1;
- (void)deleteEWSItemsWithIdStrings:(id)arg1 fromFolderWithIdString:(id)arg2;
- (void)undeleteMessagesWithEWSItemIdStrings:(id)arg1 fromFolderWithIdString:(id)arg2;
- (id)deletedEWSIdStringsFromStrings:(id)arg1 inFolderWithIdString:(id)arg2;
- (void)updateEWSOfflineIdsToRealIds:(id)arg1 forFolders:(BOOL)arg2;
- (void)_setupMailboxUid:(id)arg1 forFolderId:(id)arg2;
- (id)_mailboxUidForFolderId:(id)arg1;
- (void)_setMailboxUid:(id)arg1 forFolderId:(id)arg2;
- (void)_saveFolderId:(id)arg1 forMailbox:(id)arg2;
- (void)_clearFolderId:(id)arg1 forMailbox:(id)arg2;
- (id)_loadFolderIdForMailboxUid:(id)arg1;
- (BOOL)_setEWSError:(id)arg1;
- (BOOL)useExternalURL;
- (void)setUseExternalURL:(BOOL)arg1;
- (id)messageTracerUUID;
- (void)setMessageTracerUUID:(id)arg1;
- (double)lastFullFetchTime;
- (void)setLastFullFetchTime:(double)arg1;
- (double)lastFullFetchDuration;
- (void)setLastFullFetchDuration:(double)arg1;
- (id)connection;
- (void)setConnection:(id)arg1;
- (id)distinguishedFolderIdsAndMailboxUidTypes;
- (void)setDistinguishedFolderIdsAndMailboxUidTypes:(id)arg1;
- (id)gateway;
- (void)setGateway:(id)arg1;

@end

@interface EWSAutodiscovery : NSObject <EWSAutodiscoverBindingDelegate>
{
    NSString *_emailAddress;
    NSString *_password;
    NSString *_userName;
    NSDictionary *_receivingAccountInfo;
    int _status;
    NSError *_lastError;
}

+ (void)initialize;
- (id)init;
- (id)initWithEmailAddress:(id)arg1 userName:(id)arg2 password:(id)arg3;
- (void)dealloc;
- (int)executeSynchronouslyWithMonitor:(id)arg1;
- (void)autodiscoverBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didFinishWithResponse:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didFailWithError:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didReceiveCertificateError:(id)arg2;
- (id)lastError;
- (void)setLastError:(id)arg1;
- (int)status;
- (void)setStatus:(int)arg1;
- (id)receivingAccountInfo;
- (void)setReceivingAccountInfo:(id)arg1;
- (id)userName;
- (void)setUserName:(id)arg1;
- (id)password;
- (void)setPassword:(id)arg1;
- (id)emailAddress;
- (void)setEmailAddress:(id)arg1;

@end

@interface EWSConnection : Connection <EWSExchangeServiceBindingDelegate>
{
    EWSExchangeServiceBinding *_binding;
    EWSAccount *_account;
}

- (void)dealloc;
- (BOOL)connectUsingAccount:(id)arg1;
- (BOOL)connectAndSetSecurityLayerUsingAccount:(id)arg1;
- (BOOL)authenticateUsingAccount:(id)arg1;
- (id)_connectAndAuthenticateUsingAccount:(id)arg1;
- (void)_setupConnectionErrorMessageForMonitor:(id)arg1 withHostname:(id)arg2 port:(unsigned long)arg3 usingSSL:(BOOL)arg4;
- (BOOL)reconnect;
- (BOOL)isValid;
- (void)disconnect;
- (id)sendMessage:(id)arg1 forRequest:(id)arg2;
- (id)_sendMessage:(id)arg1 error:(id *)arg2;
- (void)disconnectWithError:(id)arg1;
- (void)exchangeServiceBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didReceiveCertificateError:(id)arg2;
- (id)account;
- (void)setAccount:(id)arg1;
- (id)binding;
- (void)setBinding:(id)arg1;

@end

@interface EWSCopyItemsRequestOperation : EWSRequestOperation <NSCoding>
{
    NSString *_sourceEWSFolderIdString;
    NSString *_destinationEWSFolderIdString;
    NSArray *_EWSItemIds;
    NSArray *_offlineCreatedEWSItemIdStrings;
}

+ (Class)classForResponse;
- (id)initWithEWSItemIds:(id)arg1 sourceIdString:(id)arg2 destinationIdString:(id)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (void)_ewsCopyItemsRequestOperationCommonInitWithEWSItemIds:(id)arg1 sourceIdString:(id)arg2 destinationIdString:(id)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (id)activityString;
- (id)prepareRequest;
- (void)setupOfflineResponse;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)offlineCreatedEWSItemIdStrings;
- (void)setOfflineCreatedEWSItemIdStrings:(id)arg1;
- (id)EWSItemIds;
- (void)setEWSItemIds:(id)arg1;
- (id)destinationEWSFolderIdString;
- (void)setDestinationEWSFolderIdString:(id)arg1;
- (id)sourceEWSFolderIdString;
- (void)setSourceEWSFolderIdString:(id)arg1;

@end

@interface EWSCopyItemsResponseOperation : EWSResponseOperation
{
    NSArray *_newEWSItemIdStrings;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)newEWSItemIdStrings;
- (void)setNewEWSItemIdStrings:(id)arg1;

@end

@interface EWSCreateEventReplyRequestOperation : EWSCreateItemRequestOperation
{
    NSString *_messageMeetingItemIdString;
    BOOL _messageResponseType;
    EWSGetItemsResponseOperation *_getItemsResponse;
}

+ (Class)classForResponse;
- (id)initWithItemIdString:(id)arg1 folderIdString:(id)arg2 messageType:(BOOL)arg3 responseType:(BOOL)arg4 disposition:(int)arg5 gateway:(id)arg6 errorHandler:(id)arg7;
- (void)_ewsCreateEventReplyRequestOperationCommonInitWithItemIdString:(id)arg1 responseType:(BOOL)arg2;
- (id)initWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(int)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)prepareRequest;
- (id)getItemsResponse;
- (void)setGetItemsResponse:(id)arg1;
- (BOOL)messageResponseType;
- (void)setMessageResponseType:(BOOL)arg1;
- (id)messageMeetingItemIdString;
- (void)setMessageMeetingItemIdString:(id)arg1;

@end

@interface EWSCreateEventReplyResponseOperation : EWSCreateItemResponseOperation
{
}

- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;

@end

@interface EWSCreateFolderRequestOperation : EWSRequestOperation <NSCoding>
{
    NSString *_parentEWSFolderIdString;
    NSString *_offlineCreatedEWSFolderIdString;
    NSString *_folderName;
    int _mailboxType;
}

+ (Class)classForResponse;
- (id)initWithParentEWSFolderIdString:(id)arg1 name:(id)arg2 mailboxType:(int)arg3 gateway:(id)arg4;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)_ewsCreateFolderRequestOperationCommonInitWithFolderIdString:(id)arg1 name:(id)arg2 mailboxType:(int)arg3;
- (void)dealloc;
- (id)copyWithUpdatedNameCount:(unsigned int)arg1;
- (id)activityString;
- (BOOL)isFolderRequest;
- (id)prepareRequest;
- (void)setupOfflineResponse;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (int)mailboxType;
- (void)setMailboxType:(int)arg1;
- (id)folderName;
- (void)setFolderName:(id)arg1;
- (id)offlineCreatedEWSFolderIdString;
- (void)setOfflineCreatedEWSFolderIdString:(id)arg1;
- (id)parentEWSFolderIdString;
- (void)setParentEWSFolderIdString:(id)arg1;

@end

@interface EWSCreateFolderResponseOperation : EWSResponseOperation
{
    NSString *_createdFolderId;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)createdFolderId;
- (void)setCreatedFolderId:(id)arg1;

@end

@interface EWSCreateItemRequestOperation : EWSRequestOperation <NSCoding>
{
    NSString *_EWSFolderIdString;
    NSString *_offlineCreatedEWSItemIdString;
    int _disposition;
    BOOL _messageType;
    BOOL _wroteOfflineData;
}

+ (Class)classForResponse;
- (id)initWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(int)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (void)_ewsCreateItemRequestOperationCommonInitWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(int)arg3;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)activityString;
- (void)setupOfflineResponse;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)wroteOfflineData;
- (void)setWroteOfflineData:(BOOL)arg1;
- (id)offlineCreatedEWSItemIdString;
- (void)setOfflineCreatedEWSItemIdString:(id)arg1;
- (int)disposition;
- (void)setDisposition:(int)arg1;
- (BOOL)messageType;
- (void)setMessageType:(BOOL)arg1;
- (id)EWSFolderIdString;
- (void)setEWSFolderIdString:(id)arg1;

@end

@interface EWSCreateItemResponseOperation : EWSResponseOperation
{
    NSString *_itemId;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)itemId;
- (void)setItemId:(id)arg1;

@end

@interface EWSCreateMessageRequestOperation : EWSCreateItemRequestOperation <NSCoding>
{
    EWSGetItemsResponseOperation *_getItemsResponse;
    Message *_message;
    NSData *_data;
    NSString *_sender;
    NSString *_existingItemIdString;
    NSDictionary *_recipientsByHeaderKey;
    unsigned int _flags;
}

- (id)initWithMessage:(id)arg1 data:(id)arg2 folderIdString:(id)arg3 messageType:(BOOL)arg4 flags:(unsigned long)arg5 existingItemIdString:(id)arg6 sender:(id)arg7 recipientsByHeaderKey:(id)arg8 disposition:(int)arg9 gateway:(id)arg10 errorHandler:(id)arg11;
- (void)_ewsCreateMessageRequestOperationCommonInitWithMessage:(id)arg1 data:(id)arg2 flags:(unsigned long)arg3 existingItemIdString:(id)arg4 sender:(id)arg5 recipientsByHeaderKey:(id)arg6;
- (id)initWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(int)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)prepareRequest;
- (id)getItemsResponse;
- (void)setGetItemsResponse:(id)arg1;
- (id)recipientsByHeaderKey;
- (void)setRecipientsByHeaderKey:(id)arg1;
- (id)existingItemIdString;
- (void)setExistingItemIdString:(id)arg1;
- (id)sender;
- (void)setSender:(id)arg1;
- (unsigned long)flags;
- (void)setFlags:(unsigned long)arg1;
- (id)data;
- (void)setData:(id)arg1;
- (id)message;
- (void)setMessage:(id)arg1;

@end

@interface EWSDeleteFolderRequestOperation : EWSRequestOperation <NSCoding>
{
    NSString *_folderIdString;
}

+ (Class)classForResponse;
- (id)initWithEWSFolderIdString:(id)arg1 gateway:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (BOOL)isFolderRequest;
- (id)prepareRequest;
- (void)setupOfflineResponse;
- (id)folderIdString;
- (void)setFolderIdString:(id)arg1;

@end

@interface EWSDeleteItemsRequestOperation : EWSRequestOperation <NSCoding>
{
    NSArray *_EWSItemIds;
    NSString *_folderIdString;
}

+ (Class)classForResponse;
- (id)initWithEWSItemIds:(id)arg1 folderIdString:(id)arg2 gateway:(id)arg3;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)activityString;
- (id)prepareRequest;
- (void)setupOfflineResponse;
- (id)folderIdString;
- (void)setFolderIdString:(id)arg1;
- (id)EWSItemIds;
- (void)setEWSItemIds:(id)arg1;

@end

@interface EWSDelivery : MailDelivery <EWSErrorHandler>
{
    MFError *_error;
}

- (void)dealloc;
- (Class)deliveryClass;
- (id)headersForDelivery;
- (int)deliverSynchronously;
- (void)handleEWSError:(id)arg1;
- (id)error;
- (void)setError:(id)arg1;

@end

@interface EWSDeliveryAccount : DeliveryAccount
{
    EWSAccount *_EWSAccount;
}

+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
- (id)initWithAccount:(id)arg1;
- (id)init;
- (void)dealloc;
- (id)storedDisplayName;
- (void)setStoredDisplayName;
- (id)displayName;
- (void)setDisplayName;
- (id)offlineDisplayName;
- (BOOL)isSyncable;
- (BOOL)isInactivatedInsteadOfBeingDeleted;
- (void)setIsInactivatedInsteadOfBeingDeleted:(BOOL)arg1;
- (id)defaultsDictionary;
- (void)updateFromSyncedDictionary:(id)arg1;
- (void)updateAccountsFromPlist:(id)arg1 acceptedChanges:(id)arg2;
- (void)releaseAllConnections;
- (void)setAccountInfoObject:(id)arg1 forKey:(id)arg2;
- (void)removeAccountInfoObjectForKey:(id)arg1;
- (void)_setAccountInfo:(id)arg1;
- (id)info;
- (void)setInfo:(id)arg1;
- (id)username;
- (void)setUsername:(id)arg1;
- (id)password;
- (void)setPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)sessionPassword;
- (void)setSessionPassword:(id)arg1;
- (id)promptUserForPasswordWithMessage:(id)arg1;
- (id)promptUserIfNeededForPasswordWithMessage:(id)arg1;
- (unsigned long)portNumber;
- (void)setPortNumber:(unsigned long)arg1;
- (BOOL)usesSSL;
- (void)setUsesSSL:(BOOL)arg1;
- (id)hostname;
- (void)setHostname:(id)arg1;
- (int)securityLayerType;
- (void)setSecurityLayerType:(int)arg1;
- (id)domain;
- (void)setDomain:(id)arg1;
- (id)preferredAuthScheme;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)ISPAccountID;
- (void)setISPAccountID:(id)arg1;
- (id)_guessedISPAccountDictionary;
- (id)uniqueId;
- (id)accountInfo;
- (void)setAccountInfo:(id)arg1;
- (id)serviceName;
- (id)secureServiceName;
- (id)saslProfileName;
- (BOOL)requiresAuthentication;
- (Class)connectionClass;
- (unsigned long)defaultPortNumber;
- (unsigned long)defaultSecurePortNumber;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned long)arg1;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)isWillingToGoOnline;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (BOOL)canGoOffline;
- (BOOL)isValid;
- (id)supportURL;
- (id)supportURLLabel;
- (id)subscriptionURL;
- (id)subscriptionURLLabel;
- (id)accountTypeString;
- (void)validateConnections;
- (id)authenticatedConnection;
- (BOOL)_connectAndAuthenticate:(id)arg1;
- (BOOL)_shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1;
- (id)identifier;
- (Class)deliveryClass;
- (BOOL)isDynamic;
- (id)associatedAccount;
- (void)setAssociatedAccount:(id)arg1;
- (BOOL)shouldUseAuthentication;
- (void)setShouldUseAuthentication:(BOOL)arg1;
- (id)remoteMailAccountsEmployedBy;

@end

@interface EWSFindItemsRequestOperation : EWSRequestOperation
{
    NSArray *_additionalProperties;
    NSArray *_EWSFolderIds;
    EWSSearchExpressionType *_searchExpression;
}

+ (Class)classForResponse;
- (id)initWithSearchExpression:(id)arg1 EWSFolderIdStrings:(id)arg2 additionalProperties:(id)arg3 gateway:(id)arg4;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (id)prepareRequest;
- (id)searchExpression;
- (void)setSearchExpression:(id)arg1;
- (id)EWSFolderIdStrings;
- (void)setEWSFolderIdStrings:(id)arg1;
- (id)additionalProperties;
- (void)setAdditionalProperties:(id)arg1;

@end

@interface EWSFindItemsResponseOperation : EWSResponseOperation
{
    NSArray *_EWSFolderIds;
    NSMutableDictionary *_rootFoldersByEWSFolderId;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)rootFolderForEWSFolderId:(id)arg1;
- (void)setRootFoldersByEWSFolderId:(id)arg1;
- (id)rootFoldersByEWSFolderId;
- (id)EWSFolderIds;
- (void)setEWSFolderIds:(id)arg1;

@end

@interface _WriteSyncStateOperation : ThrowingInvocationOperation
{
    NSMutableSet *_itemIdStrings;
    NSString *_syncState;
}

+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (id)initWithStore:(id)arg1 syncState:(id)arg2;
- (void)dealloc;
- (void)setIdStrings:(id)arg1;
- (void)removeIdStringsForItemIdTypes:(id)arg1;
- (void)removeIdStringsForMessages:(id)arg1;
- (void)cancel;
- (BOOL)isReady;
- (id)description;
- (id)syncState;
- (void)setSyncState:(id)arg1;

@end

@interface EWSGateway : NSObject <NSCoding>
{
    EWSAccount *_account;
    NSOperationQueue *_requestResponseQueue;
    NSMutableArray *_offlineRequests;
    NSDictionary *_savedOfflineToRealEWSIdStrings;
    NSMutableDictionary *_pendingSyncOperations;
    NSMutableDictionary *_headersByItemIdStringForSync;
    NSOperationQueue *_syncOperationQueue;
}

+ (id)createTemporaryItemId;
- (id)initWithAccount:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (void)addRequest:(id)arg1;
- (void)addResponse:(id)arg1;
- (void)addError:(id)arg1 withHandler:(id)arg2;
- (void)sendMessage:(id)arg1 forRequest:(id)arg2;
- (void)takeRequestOffline:(id)arg1 error:(id)arg2;
- (id)fetchDistinguishedFolderIdsWithConnection:(id)arg1;
- (void)saveRequestToOfflineCache:(id)arg1;
- (void)_saveOfflineCache;
- (void)_addCreateRequestToOfflineCache:(id)arg1;
- (void)_addDeleteRequestToOfflineCache:(id)arg1;
- (void)playbackRequestsFromOfflineCacheWithConnection:(id)arg1 error:(id *)arg2;
- (BOOL)writeMessageToOfflineCache:(id)arg1 data:(id)arg2 forItemIdString:(id)arg3;
- (void)retrieveMessageFromOfflineCache:(id *)arg1 data:(id *)arg2 forItemIdString:(id)arg3;
- (void)removeMessageAndDataFromOfflineCacheForEWSItemIdString:(id)arg1;
- (id)_offlineCachePath;
- (id)_offlineCachePathForMessageWithItemIdString:(id)arg1;
- (id)_offlineCachePathForDataWithItemIdString:(id)arg1;
- (id)connection;
- (id)syncFolderHierarchyWithSyncState:(id)arg1;
- (id)_syncFolderHierarchyWithSyncState:(id)arg1 includesLastItem:(char *)arg2;
- (id)syncFolderItemsFromFolderIdString:(id)arg1 syncState:(id)arg2 forStore:(id)arg3;
- (id)_syncFolderItemsFromTargetFolderIdType:(id)arg1 syncState:(id)arg2 forStore:(id)arg3 includesLastItem:(char *)arg4;
- (void)_handleSyncedMessagesWithoutHeaders:(id)arg1 inFolderIdString:(id)arg2 store:(id)arg3 newSyncState:(id)arg4;
- (void)setEWSIdStringsBlockingSyncCompletion:(id)arg1 syncState:(id)arg2 forFolderIdString:(id)arg3;
- (void)setHeaders:(id)arg1 forItemIdString:(id)arg2;
- (void)updateMessagesLocallyFromSync:(id)arg1 inStore:(id)arg2 withFolderIdString:(id)arg3 newMessageIDs:(id)arg4 newSyncState:(id)arg5;
- (void)_updateMessagesLocallyFromSync:(id)arg1 inStore:(id)arg2 withFolderIdString:(id)arg3 newMessageIDs:(id)arg4 newSyncState:(id)arg5;
- (void)cancelSyncOfFolderItemsFromFolderIdString:(id)arg1;
- (void)removeIdStringsForMessagesThatSynced:(id)arg1 fromFolderWithIdString:(id)arg2;
- (void)_cancelWriteSyncStateOperationForFolderIdString:(id)arg1 withSyncState:(id)arg2;
- (void)_saveData:(id)arg1 forMessage:(id)arg2 isPartial:(BOOL)arg3 updateMetadata:(BOOL)arg4;
- (id)fetchMimeDataForMessage:(id)arg1 errorHandler:(id)arg2;
- (id)_EWSItemTypesWithBodyDataForMessages:(id)arg1 errorHandler:(id)arg2;
- (void)cacheDataForLibraryMessages:(id)arg1 store:(id)arg2 folderIdString:(id)arg3 errorHandler:(id)arg4;
- (void)_cacheDataForLibraryMessages:(id)arg1 store:(id)arg2 folderIdString:(id)arg3 errorHandler:(id)arg4;
- (id)appendMessage:(id)arg1 withData:(id)arg2 toEWSFolderWithIdString:(id)arg3 messageType:(BOOL)arg4 flags:(unsigned long)arg5 sender:(id)arg6 recipientsByHeaderKey:(id)arg7 send:(BOOL)arg8 errorHandler:(id)arg9;
- (void)deleteMessagesWithEWSItemIds:(id)arg1 fromFolderWithEWSIdString:(id)arg2 synchronously:(BOOL)arg3;
- (void)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2 inFolderWithEWSIdString:(id)arg3 errorHandler:(id)arg4;
- (id)copyMessagesWithEWSItemIds:(id)arg1 fromFolderWithIdString:(id)arg2 toFolderWithIdString:(id)arg3 synchronously:(BOOL)arg4 errorHandler:(id)arg5;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2 inStore:(id)arg3 errorHandler:(id)arg4;
- (void)undeleteMessageForFailedCreateEventResponse:(id)arg1;
- (void)_fetchMeetingRequestMessages:(id)arg1 errorHandler:(id)arg2;
- (void)_fetchMeetingCancellationMessages:(id)arg1 errorHandler:(id)arg2;
- (id)createMailboxWithParentEWSFolderIdString:(id)arg1 name:(id)arg2 mailboxType:(int)arg3 error:(id *)arg4;
- (BOOL)renameMailboxWithEWSFolderIdString:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (BOOL)moveMailboxWithEWSFolderIdString:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (BOOL)deleteMailboxWithEWSFolderIdString:(id)arg1 error:(id *)arg2;
- (id)resolvedIdStringForIdString:(id)arg1;
- (void)addOfflineToRealEWSIdStrings:(id)arg1 forRequest:(id)arg2;
- (CDStruct_ff11e81d)fetchUsageInfoForEWSFolderIdString:(id)arg1;
- (void)_chunkItemsToSend:(id)arg1 applyToBlock:(id)arg2;
- (unsigned int)_maxRequestsToSend;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_logPendingSyncOperations:(id)arg1;
- (id)savedOfflineToRealEWSIdStrings;
- (void)setSavedOfflineToRealEWSIdStrings:(id)arg1;
- (id)offlineRequests;
- (void)setOfflineRequests:(id)arg1;
- (id)syncOperationQueue;
- (void)setSyncOperationQueue:(id)arg1;
- (id)requestResponseQueue;
- (void)setRequestResponseQueue:(id)arg1;
- (id)account;
- (void)setAccount:(id)arg1;

@end

@interface EWSGetFolderRequestOperation : EWSRequestOperation
{
    NSArray *_EWSFolderIds;
}

+ (Class)classForResponse;
- (id)initWithEWSFolderIds:(id)arg1 gateway:(id)arg2 errorHandler:(id)arg3;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (BOOL)isFolderRequest;
- (id)prepareRequest;
- (id)EWSFolderIds;
- (void)setEWSFolderIds:(id)arg1;

@end

@interface EWSGetFolderResponseOperation : EWSResponseOperation
{
    NSArray *_EWSFolderIdsRequested;
    NSArray *_EWSFolders;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)EWSFolderIdsRequested;
- (void)setEWSFolderIdsRequested:(id)arg1;
- (id)EWSFolders;
- (void)setEWSFolders:(id)arg1;

@end

@interface EWSGetItemDataRequestOperation : EWSRequestOperation
{
    NSArray *_itemIdTypes;
}

+ (Class)classForResponse;
- (id)initWithItemIdTypes:(id)arg1 dataHandler:(id)arg2 gateway:(void)arg3 errorHandler:(id)arg4;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (id)prepareRequest;
- (id)itemIdTypes;
- (void)setItemIdTypes:(id)arg1;

@end

@interface EWSGetItemDataResponseOperation : EWSResponseOperation
{
    NSArray *_itemIdTypes;
    id _dataHandler;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)dataHandler;
- (void)setDataHandler:(id)arg1;
- (id)itemIdTypes;
- (void)setItemIdTypes:(id)arg1;

@end

@interface EWSGetItemsRequestOperation : EWSRequestOperation
{
    NSArray *_EWSItemIds;
    NSArray *_additionalProperties;
}

+ (Class)classForResponse;
- (id)initWithEWSItemIds:(id)arg1 additionalProperties:(id)arg2 gateway:(id)arg3 errorHandler:(id)arg4;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (id)prepareRequest;
- (id)additionalProperties;
- (void)setAdditionalProperties:(id)arg1;
- (id)EWSItemIds;
- (void)setEWSItemIds:(id)arg1;

@end

@interface EWSGetItemsResponseOperation : EWSResponseOperation
{
    NSArray *_EWSItemIdsRequested;
    NSMutableArray *_EWSItems;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)EWSItemIdsRequested;
- (void)setEWSItemIdsRequested:(id)arg1;
- (id)EWSItems;
- (void)setEWSItems:(id)arg1;

@end

@interface EWSMessage : RemoteMessage
{
    NSString *_itemId;
    NSString *_changeKey;
    NSData *_bodyData;
    NSData *_headerData;
    MessageHeaders *_headers;
    long long _libraryID;
}

+ (void)initialize;
+ (BOOL)messageTypeForEWSItemClass:(id)arg1;
+ (id)EWSItemClassForMessageType:(BOOL)arg1;
+ (id)EWSFolderClassForMailboxType:(int)arg1;
+ (id)headersItemShape;
+ (void)parseExtendedFieldsFromEWSMessage:(id)arg1 intoFlags:(unsigned int *)arg2 flagsMask:(unsigned int *)arg3 messageID:(id *)arg4 headers:(id *)arg5;
+ (void)_extendedPropertiesFromEWSItem:(id)arg1 statusFlags:(int *)arg2 messageFlags:(int *)arg3 flagStatus:(int *)arg4 toDoFlags:(int *)arg5 replyFlags:(int *)arg6 hasAttachments:(char *)arg7 customFlags:(id)arg8 messageID:(id *)arg9 headers:(id *)arg10;
+ (id)extendedFieldsForEWSNoteType;
+ (id)fieldsToMaintainWhenUpdatingMessageType:(BOOL)arg1;
+ (id)extendedFieldsForEWSMeetingMessageType;
+ (id)extendedFieldsForEWSMeetingRequestMessageType;
+ (id)extendedFieldsForEWSCalendarType;
+ (id)propertiesToGetBeforeUpdatingMessageFlags:(id)arg1 forMessageType:(BOOL)arg2 includesReadReceipts:(char *)arg3;
+ (id)updatesForEWSItem:(id)arg1 applyingFlags:(id)arg2;
+ (id)_extendedFieldsForFlags:(unsigned long)arg1 importance:(int *)arg2;
+ (id)_createEWSExtendedPropertyWithTag:(id)arg1 intValue:(int)arg2;
+ (id)_createCustomEWSExtendedPropertyWithName:(id)arg1 boolValue:(BOOL)arg2;
+ (id)_createEWSSetItemWithPropertyTag:(id)arg1 intValue:(int)arg2;
+ (id)_createCustomEWSSetItemWithPropertyName:(id)arg1 boolValue:(BOOL)arg2;
+ (id)dataFromMimeContent:(id)arg1;
+ (id)_mimeContentForData:(id)arg1;
+ (id)createEWSItemFromMessage:(id)arg1 data:(id)arg2 flags:(unsigned long)arg3 sender:(id)arg4 recipientsByHeaderKey:(id)arg5 categories:(id)arg6 existingProperties:(id)arg7;
+ (id)EWSItemIdTypesForMessages:(id)arg1;
+ (id)EWSItemIdStringsForItemIdTypes:(id)arg1;
+ (id)EWSItemIdTypesForItemIdStrings:(id)arg1;
+ (id)_createEWSHeaderFieldsForMessageHeaders:(id)arg1 encodingHint:(unsigned long)arg2;
+ (id)_createEWSAddressForAddress:(id)arg1;
+ (id)_createEWSAddressesForAddresses:(id)arg1;
- (id)initWithItemId:(id)arg1 changeKey:(id)arg2;
- (id)init;
- (void)dealloc;
- (id)remoteID;
- (BOOL)isEditable;
- (BOOL)isMessageContentsLocallyAvailable;
- (void)setHeaderAndBodyFromFullData:(id)arg1;
- (long long)libraryID;
- (void)setLibraryID:(long long)arg1;
- (id)headers;
- (void)setHeaders:(id)arg1;
- (id)headerData;
- (void)setHeaderData:(id)arg1;
- (id)fetchedBodyData;
- (void)setFetchedBodyData:(id)arg1;
- (id)changeKey;
- (void)setChangeKey:(id)arg1;
- (id)itemId;
- (void)setItemId:(id)arg1;

@end

@interface EWSMoveFolderRequestOperation : EWSRequestOperation <NSCoding>
{
    NSString *_destinationEWSFolderIdString;
    NSArray *_originEWSFolderIdStrings;
    EWSGetFolderResponseOperation *_changeKeysResponse;
}

+ (Class)classForResponse;
- (id)initWithEWSFolderIdString:(id)arg1 originEWSFolderIdStrings:(id)arg2 gateway:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (BOOL)isFolderRequest;
- (id)prepareRequest;
- (void)setupOfflineResponse;
- (id)originEWSFolderIdStrings;
- (void)setOriginEWSFolderIdStrings:(id)arg1;
- (id)changeKeysResponse;
- (void)setChangeKeysResponse:(id)arg1;
- (id)destinationEWSFolderIdString;
- (void)setDestinationEWSFolderIdString:(id)arg1;

@end

@interface EWSOfflineGateway : EWSGateway <NSKeyedUnarchiverDelegate>
{
    EWSConnection *_offlineConnection;
    NSMutableDictionary *_offlineToRealEWSIdStrings;
    id _offlineToRealEWSIdStringsLock;
    EWSResponseOperation *_lastResponseDecoded;
}

- (id)initWithAccount:(id)arg1 connection:(id)arg2;
- (id)initWithAccount:(id)arg1;
- (void)dealloc;
- (id)connection;
- (void)addRequest:(id)arg1;
- (id)resolvedIdStringForIdString:(id)arg1;
- (void)addOfflineToRealEWSIdStrings:(id)arg1 forRequest:(id)arg2;
- (void)takeRequestOffline:(id)arg1 error:(id)arg2;
- (id)playbackRequests:(id)arg1 offlineToRealEWSIdStrings:(id *)arg2 error:(id *)arg3;
- (void)setOfflineToRealEWSIdStrings:(id)arg1;
- (id)offlineToRealEWSIdStrings;
- (id)_EWSFolderFromCreateRequestOperation:(id)arg1;
- (id)_deleteRequestRemovingUndeletedItems:(id)arg1;
- (void)_moveMessageFromFailedCreateRequest:(id)arg1 withBackupManager:(id)arg2 toMailboxNamed:(id)arg3 actualName:(id *)arg4;
- (void)_undeleteMessagesFromFailedCopyRequest:(id)arg1;
- (void)_undeleteMessagesFromFailedDeleteRequest:(id)arg1;
- (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;
- (id)lastResponseDecoded;
- (void)setLastResponseDecoded:(id)arg1;
- (id)offlineConnection;
- (void)setOfflineConnection:(id)arg1;

@end

@interface EWSRenameFolderRequestOperation : EWSRequestOperation
{
    NSString *_folderIdString;
    NSString *_folderName;
    EWSGetFolderResponseOperation *_changeKeysResponse;
}

+ (Class)classForResponse;
- (id)initWithEWSFolderIdString:(id)arg1 name:(id)arg2 gateway:(id)arg3;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (BOOL)isFolderRequest;
- (id)prepareRequest;
- (id)changeKeysResponse;
- (void)setChangeKeysResponse:(id)arg1;
- (id)folderName;
- (void)setFolderName:(id)arg1;
- (id)folderIdString;
- (void)setFolderIdString:(id)arg1;

@end

@interface EWSRequestOperation : MonitoredOperation
{
    EWSResponseOperation *_responseOperation;
    EWSGateway *_gateway;
    BOOL _isOffline;
}

+ (Class)classForResponse;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)init;
- (void)dealloc;
- (id)prepareRequest;
- (void)executeOperation;
- (BOOL)isFolderRequest;
- (BOOL)isOffline;
- (void)goOffline;
- (void)setupOfflineResponse;
- (id)description;
- (id)gateway;
- (void)setGateway:(id)arg1;
- (id)responseOperation;
- (void)setResponseOperation:(id)arg1;

@end

@interface EWSResponseOperation : MonitoredOperation
{
    EWSBaseMessageResponseType *_response;
    EWSGateway *_gateway;
    id <EWSErrorHandler> _errorHandler;
    MFError *_lastError;
    BOOL _isOffline;
}

- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)init;
- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (void)failWithError:(id)arg1;
- (void)handleResponseMessages;
- (BOOL)handleResponseMessage:(id)arg1;
- (BOOL)handleResponseMessage:(id)arg1 withObject:(id)arg2;
- (id)description;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)arg1;
- (id)lastError;
- (void)setLastError:(id)arg1;
- (id)errorHandler;
- (void)setErrorHandler:(id)arg1;
- (id)gateway;
- (void)setGateway:(id)arg1;
- (id)response;
- (void)setResponse:(id)arg1;

@end

@interface EWSSizeEngine : RemoteStoreSizeEngine
{
}

- (id)initWithAccount:(id)arg1;
- (void)_runWorkerThread;
- (void)_getSizeForMailboxUid:(id)arg1;

@end

@interface _SetFlags : NSObject
{
    NSDictionary *_flagsToSet;
    NSMutableArray *_messages;
}

- (id)initWithFlagsDictionary:(id)arg1 messages:(id)arg2;
- (id)init;
- (void)dealloc;
- (void)addMessages:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (id)messages;
- (id)flagsToSet;

@end

@interface EWSStore : RemoteStore <EWSErrorHandler>
{
    NSString *_folderId;
    NSString *_syncState;
    NSLock *_syncLock;
    NSMutableSet *_flagsToSetDuringSync;
}

- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (void)dealloc;
- (BOOL)canRebuild;
- (BOOL)allowsOverwrite;
- (BOOL)allowsDeleteInPlace;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (void)openSynchronouslyIfWaitingToOpen;
- (void)fetchSynchronously;
- (void)startSynchronization;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (void)messagesWereAdded:(id)arg1 forIncrementalLoading:(BOOL)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (int)undoAppendOfMessageIDs:(id)arg1;
- (void)forceResync;
- (BOOL)shouldRouteNewMessages;
- (BOOL)_copyMessagesByID:(id)arg1 toStore:(id)arg2 settingFlags:(id)arg3 newMessages:(id)arg4 error:(id *)arg5;
- (int)_appendToServerWithContext:(CDStruct_5f9072cd *)arg1 error:(id *)arg2;
- (void)_deleteMessagesOnServerSynchronouslyWithEWSItemIds:(id)arg1 fromFolderWithEWSIdString:(id)arg2;
- (void)setMessageWithEWSItemId:(id)arg1 read:(BOOL)arg2;
- (void)deleteMessageWithEWSItemIdString:(id)arg1;
- (void)undeleteMessagesWithEWSItemIdStrings:(id)arg1;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (void)_fetchChangesFromServer;
- (id)_EWSAccount;
- (id)_EWSConnection;
- (id)_gateway;
- (id)syncState;
- (void)setSyncState:(id)arg1;
- (void)_setSyncState:(id)arg1 persistToLibrary:(BOOL)arg2;
- (BOOL)_loadFolderId;
- (void)handleEWSError:(id)arg1;
- (id)folderId;
- (void)setFolderId:(id)arg1;

@end

@interface EWSSuppressReadReceiptsRequestOperation : EWSRequestOperation
{
    EWSGetItemsResponseOperation *_getItemsResponse;
}

+ (Class)classForResponse;
- (id)initWithGetItemsResponse:(id)arg1 gateway:(id)arg2;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)prepareRequest;
- (id)getItemsResponse;
- (void)setGetItemsResponse:(id)arg1;

@end

@interface EWSSyncFolderHierarchyRequestOperation : EWSRequestOperation
{
    NSString *_syncState;
}

+ (Class)classForResponse;
- (id)initWithSyncState:(id)arg1 createBlock:(id)arg2 updateBlock:(void)arg3 deleteBlock:(id)arg4 gateway:(void)arg5;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (id)prepareRequest;
- (id)syncState;
- (void)setSyncState:(id)arg1;

@end

@interface EWSSyncFolderHierarchyResponseOperation : EWSResponseOperation
{
    id _createBlock;
    id _updateBlock;
    id _deleteBlock;
}

- (void)dealloc;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)executeOperation;
- (id)deleteBlock;
- (void)setDeleteBlock:(id)arg1;
- (id)updateBlock;
- (void)setUpdateBlock:(id)arg1;
- (id)createBlock;
- (void)setCreateBlock:(id)arg1;

@end

@interface EWSSyncFolderItemsRequestOperation : EWSRequestOperation
{
    NSString *_syncState;
    EWSTargetFolderIdType *_targetFolder;
}

+ (id)keyPathsForValuesAffectingTargetFolderIdString;
+ (id)keyPathsForValuesAffectingTargetFolderName;
+ (Class)classForResponse;
- (id)initWithTargetFolder:(id)arg1 syncState:(id)arg2 gateway:(id)arg3;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (id)activityString;
- (id)prepareRequest;
- (id)targetFolderIdString;
- (id)targetFolderName;
- (id)targetFolder;
- (void)setTargetFolder:(id)arg1;
- (id)syncState;
- (void)setSyncState:(id)arg1;

@end

@interface EWSSyncFolderItemsResponseMessageOperation : EWSResponseOperation
{
    EWSStore *_store;
    NSString *_folderIdString;
    NSString *_startSyncState;
    NSString *_endSyncState;
    NSMutableArray *_messagesWithoutHeaders;
}

+ (void)initialize;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;
- (void)executeOperation;
- (void)_handleSyncFolderItemsCreateOrUpdate:(id)arg1 forStore:(id)arg2 messagesToUpdate:(id)arg3 libraryIDs:(id)arg4 messagesToCreate:(id)arg5 messagesThatFinished:(id)arg6;
- (void)_addMessageWithoutHeaders:(id)arg1;
- (id)messagesWithoutHeaders;
- (id)endSyncState;
- (void)setEndSyncState:(id)arg1;
- (id)startSyncState;
- (void)setStartSyncState:(id)arg1;
- (id)folderIdString;
- (void)setFolderIdString:(id)arg1;
- (id)store;
- (void)setStore:(id)arg1;

@end

@interface EWSUpdateItemRequestOperation : EWSRequestOperation <NSCoding>
{
    NSArray *_EWSItemIds;
    NSDictionary *_flags;
    EWSGetItemsResponseOperation *_getItemsResponse;
    EWSSuppressReadReceiptsRequestOperation *_suppressReadReceiptsRequest;
    BOOL _messageType;
}

+ (Class)classForResponse;
- (id)initWithEWSItemIds:(id)arg1 messageType:(BOOL)arg2 flags:(id)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)dealloc;
- (void)_ewsUpdateItemRequestOperationCommonInitWithEWSItemIds:(id)arg1 messageType:(BOOL)arg2 flags:(id)arg3 errorHandler:(id)arg4;
- (void)setupOfflineResponse;
- (id)activityString;
- (id)prepareRequest;
- (id)itemsPriorToUpdate;
- (BOOL)messageType;
- (void)setMessageType:(BOOL)arg1;
- (id)suppressReadReceiptsRequest;
- (void)setSuppressReadReceiptsRequest:(id)arg1;
- (id)getItemsResponse;
- (void)setGetItemsResponse:(id)arg1;
- (id)flags;
- (void)setFlags:(id)arg1;
- (id)EWSItemIds;
- (void)setEWSItemIds:(id)arg1;

@end

@interface EWSUpdateItemSetFlagsRequestOperation : EWSUpdateItemRequestOperation
{
}

- (id)initWithEWSItemIds:(id)arg1 messageType:(BOOL)arg2 flags:(id)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (id)awakeAfterUsingCoder:(id)arg1;

@end

@interface ExchangeAccount : IMAPAccount
{
}

+ (void)initialize;
+ (id)accountTypeString;
+ (BOOL)usingActiveDirectory;
+ (id)outlookWebAccessServer;
+ (void)setOutlookWebAccessServer:(id)arg1;
+ (id)exchangeServer;
+ (void)setExchangeServer:(id)arg1;
+ (id)activeDirectoryUser;
+ (void)setActiveDirectoryUser:(id)arg1;
+ (id)activeDirectoryPassword;
+ (void)setActiveDirectoryPassword:(id)arg1;
+ (id)activeDirectoryFullName;
+ (id)activeDirectoryEmailAddress;
- (Class)connectionClass;
- (BOOL)storeJunkOnServerDefault;
- (void)updateFromSyncedDictionary:(id)arg1;
- (BOOL)storeDraftsOnServer;
- (BOOL)storeSentMessagesOnServer;
- (BOOL)storeJunkOnServer;
- (id)_defaultSpecialMailboxNameForType:(int)arg1;
- (void)filterMailboxList:(id)arg1 forMailbox:(id)arg2 options:(int)arg3;
- (id)_nonMailboxChildrenOfMailboxWithPath:(id)arg1 iisServer:(id)arg2;
- (void)_filterMailboxList:(id)arg1 forMailboxWithPath:(id)arg2 iisServer:(id)arg3;
- (id)additionalHeaderFields;
- (id)hostname;
- (void)setHostname:(id)arg1;
- (id)username;
- (void)setUsername:(id)arg1;
- (id)permanentPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)defaultsDictionary;
- (BOOL)isSyncable;
- (void)handleOpenMailboxError:(id)arg1;

@end

@interface ExchangeConnection : IMAPConnection
{
}

- (BOOL)_isFetchResponseValid:(id)arg1;

@end

@interface ExpandingSplitView : NSSplitView
{
    int dividerToolTipTag;
    NSString *toolTipString;
    NSImage *splitterDimple;
    NSImage *splitterBackground;
    float _dividerThickness;
    int _dividerType;
}

- (void)dealloc;
- (int)dividerType;
- (void)setDividerType:(int)arg1;
- (float)getSplitPercentage;
- (BOOL)_isSubviewAtIndexVisible:(unsigned int)arg1;
- (BOOL)isSecondViewVisible;
- (BOOL)isFirstViewVisible;
- (void)resizeSubviewsToPercentage:(float)arg1;
- (void)setDividerToolTip:(id)arg1;
- (float)dividerThickness;
- (struct _NSRect)_dividerRect;
- (void)drawDividerInRect:(struct _NSRect)arg1;
- (id)accessibilityAttributeValue:(id)arg1;

@end

@interface FormatFlowedWriter : NSObject
{
    NSAttributedString *_inputAttrString;
    NSString *_inputString;
    unsigned int _encoding;
    NSMutableString *_outputString;
    unsigned int _addedTrailingSpaces:1;
    unsigned int _quoteLevel:31;
    struct _NSRange _paraRange;
    NSMutableString *_lineString;
    NSMutableAttributedString *_attrString;
}

+ (id)newWithAttributedString:(id)arg1 encoding:(unsigned long)arg2;
- (void)dealloc;
- (unsigned int)_findLineBreakInRange:(struct _NSRange)arg1 maxCharWidthCount:(unsigned int)arg2 endIsURL:(BOOL)arg3;
- (void)_outputQuotedParagraph;
- (id)outputString;
- (BOOL)addedTrailingSpaces;

@end

@interface SafeObserver : NSObject
{
    unsigned int _retainCount;
    BOOL _inDealloc;
}

+ (void)initialize;
+ (void)lockSafeObservers;
+ (void)unlockSafeObservers;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)retain;
- (id)willDealloc;
- (void)release;
- (unsigned int)retainCount;

@end

@interface GSSAPIAuthenticator : SASLAuthenticator <SASLSecurityLayer>
{
    unsigned int _maxBufferSize;
    unsigned int _substate:2;
    unsigned int _securityLevel:4;
    struct gss_ctx_id_struct *_gssContext;
    struct gss_name_struct *_targetName;
    struct gss_cred_id_struct *_credentials;
    unsigned int _qopState;
    int _requestConfidentiality;
}

- (void)dealloc;
- (void)finalize;
- (long)fillClientPrincipal:(id *)arg1 servicePrincipal:(id *)arg2 usingAccount:(id)arg3;
- (void)setAuthenticationState:(int)arg1;
- (id)responseForServerData:(id)arg1;
- (id)securityLayer;
- (unsigned int)encryptionBufferSize;
- (id)createDecryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)createEncryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;

@end

@interface GSSAPIAuthScheme : AuthScheme
{
}

- (Class)authenticatorClassForAccount:(id)arg1;
- (id)name;
- (id)humanReadableName;
- (BOOL)requiresPassword;
- (BOOL)hasEncryption;
- (int)securityLevel;
- (BOOL)canAuthenticateAccount:(id)arg1 connection:(id)arg2;

@end

@interface HeaderParsingUtils : NSObject
{
}

+ (id)dictionaryForReceivedHeader:(id)arg1;
+ (void)_setReceivedValuesInDictionary:(id)arg1 key:(id)arg2 value:(id)arg3 comment:(id)arg4 actualHostDotted:(id)arg5 actualHostIP:(id)arg6;
+ (BOOL)isHostRemote:(id)arg1;
+ (id)firstRemoteReceivedHeaderForReceivedHeaders:(id)arg1;

@end

@interface IMAPAccount : RemoteStoreAccount
{
    NSString *_separatorChar;
    NSArray *_lastKnownCapabilities;
    IMAPConnectionPool *_connectionPool;
    unsigned int _readBufferSize:31;
    unsigned int _lastConnectionFailed:1;
    IMAPOperationCache *_offlineCache;
    unsigned int _shouldIncludePrefixInPath:1;
    NSLock *_mailboxListingLock;
    NSLock *_connectionPoolLock;
    BOOL _allowsInputForConnectionProblems;
    NSMutableSet *_mailboxURLsToSynchronize;
    NSMutableDictionary *_IMAPMailboxes;
    NSMutableDictionary *_IMAPQuotaRoots;
    unsigned int _isFetchingUnreadCountsForAllMailboxes:1;
    unsigned int _isFetchingUnreadCountsAndCheckingNewMessagesForAllMailboxes:1;
    double _lastUnreadCountsUpdateTime;
    double _lastUnreadCountsAndNewMessagesUpdateTime;
    NSString *_fileSystemServerPathPrefix;
    NSLock *_fsPrefixLock;
    BOOL _recoveringFromConnectionLoss;
    double _lastToDoReconcileTime;
    NSArray *_namespacePrefixes;
    LibraryIMAPStore *_inboxStore;
}

+ (void)initialize;
+ (id)accountTypeString;
+ (void)_deleteQueuedMailboxes:(id)arg1;
- (id)init;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)_writeCustomInfoToMailboxCache:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (void)saveCache;
- (void)updateFromSyncedDictionary:(id)arg1;
- (void)doRoutineCleanup;
- (BOOL)isSyncable;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (unsigned long)defaultPortNumber;
- (unsigned long)defaultSecurePortNumber;
- (id)serviceName;
- (id)secureServiceName;
- (id)saslProfileName;
- (BOOL)requiresAuthentication;
- (Class)connectionClass;
- (id)authenticatedConnection;
- (BOOL)compactWhenClosingMailboxes;
- (void)setCompactWhenClosingMailboxes:(BOOL)arg1;
- (BOOL)useIDLEIfAvailable;
- (void)setUseIDLEIfAvailable:(BOOL)arg1;
- (BOOL)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (id)primaryMailboxUid;
- (BOOL)handleResponseCodeFromResponse:(id)arg1;
- (void)_handleAlertResponse:(id)arg1;
- (unsigned int)readBufferSize;
- (void)setReadBufferSize:(unsigned int)arg1;
- (void)synchronizeAllMailboxes;
- (BOOL)needToSynchronizeMailboxCaches;
- (void)didSynchronizeMailboxCachesAndFoundChanges:(BOOL)arg1;
- (void)_checkForNewMessagesInStore:(id)arg1;
- (id)_dataForTemporaryUid:(unsigned long)arg1;
- (unsigned int)minimumPartialDownloadSize;
- (BOOL)allowsPartialDownloads;
- (void)setAllowsPartialDownloads:(BOOL)arg1;
- (void)_clearAllPathBasedCachesAndDelete:(BOOL)arg1;
- (BOOL)_connectAndAuthenticate:(id)arg1;
- (void)handleOpenMailboxError:(id)arg1;
- (id)gatewayForStore:(id)arg1 options:(int)arg2;
- (id)gatewayForExistingConnectionToMailbox:(id)arg1;
- (void)recoverFromConnectionLoss;
- (void)invalidateMailboxWithName:(id)arg1 expunge:(BOOL)arg2 URLToCompact:(id)arg3;
- (void)_invalidateMailboxWithName:(id)arg1 expunge:(BOOL)arg2 URLToCompact:(id)arg3;
- (id)_gatewayForMailboxUid:(id)arg1 name:(id)arg2 options:(int)arg3;
- (id)_getPotentialGatewayForMailbox:(id)arg1 options:(int)arg2 createdNewConnection:(char *)arg3 needsSelect:(char *)arg4;
- (BOOL)_shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1;
- (BOOL)_recoverFromConnectionlessState;
- (void)_releaseAllConnectionsAndCallSuper:(BOOL)arg1 saveOfflineCache:(BOOL)arg2;
- (void)releaseAllConnections;
- (void)_validateConnections;
- (void)validateConnections;
- (void)filterMailboxList:(id)arg1 forMailbox:(id)arg2 options:(int)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)IMAPMailboxForMailboxUid:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)IMAPMailboxForMailboxName:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)_IMAPMailboxForMailboxUid:(id)arg1 name:(id)arg2 createIfNeeded:(BOOL)arg3;
- (id)_addIMAPMailboxForMailboxUid:(id)arg1 name:(id)arg2;
- (void)_renameIMAPMailboxWithMailboxUid:(id)arg1 fromName:(id)arg2 toName:(id)arg3;
- (void)_removeIMAPMailboxWithName:(id)arg1;
- (void)_startObserving:(BOOL)arg1 IMAPMailbox:(id)arg2;
- (id)quotaRootForName:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)clearQuotaRoots;
- (void)_setIsOffline:(BOOL)arg1;
- (void)setIsOffline:(BOOL)arg1;
- (void)_asynchronouslyFetchUnreadCountsCheckForNewMessages:(BOOL)arg1;
- (void)fetchToDosSynchronously;
- (void)fetchSynchronouslyIsAuto:(id)arg1;
- (void)_setSeparatorChar:(id)arg1;
- (id)separatorChar;
- (id)lastKnownCapabilities;
- (BOOL)supportsIDLE;
- (id)additionalHeaderFields;
- (BOOL)_synchronizeMailboxListWithUserInput:(BOOL)arg1;
- (id)_listingForMailboxUid:(id)arg1 listAllChildren:(BOOL)arg2 onlySubscribed:(BOOL)arg3 withUserInput:(BOOL)arg4;
- (id)_namespacePrefixesForPrivate:(BOOL)arg1 public:(BOOL)arg2 shared:(BOOL)arg3;
- (id)_recursivelyFilterMailboxList:(id)arg1 accordingToList:(id)arg2;
- (id)_listingForMailboxUid:(id)arg1 listAllChildren:(BOOL)arg2 withUserInput:(BOOL)arg3;
- (BOOL)_createMailbox:(id)arg1 withGateway:(id)arg2;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2 displayName:(id)arg3;
- (id)validNameForMailbox:(id)arg1 fromDisplayName:(id)arg2 error:(id *)arg3;
- (BOOL)_askToChangePathPrefixToCreateMailbox:(id)arg1 displayName:(id)arg2 withGateway:(id)arg3;
- (BOOL)_deleteMailbox:(id)arg1;
- (id)_specialMailboxNameForType:(int)arg1;
- (id)_specialMailboxUidWithType:(int)arg1 create:(BOOL)arg2 isLocal:(BOOL)arg3;
- (void)_fetchUnreadCountsForMailboxUid:(id)arg1 recursively:(BOOL)arg2 gateway:(id)arg3 checkForNewMessages:(BOOL)arg4;
- (void)_fetchUnreadCountsForMailboxUid:(id)arg1 recursively:(BOOL)arg2 gateway:(id)arg3;
- (void)_fetchUnreadCountsCheckForNewMessages:(BOOL)arg1;
- (void)_synchronizeAccountWithServerWithUserInput:(id)arg1;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (void)refreshMailboxListingRootedAtUid:(id)arg1;
- (void)_waitForMailboxListingLoadToComplete;
- (void)_mailboxesWereRemovedFromTree:(id)arg1 withFileSystemPaths:(id)arg2;
- (void)_recursivelyModifySubscriptions:(BOOL)arg1 forMailbox:(id)arg2 children:(id)arg3 withGateway:(id)arg4;
- (BOOL)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned int)arg2;
- (id)_pathComponentForUidName:(id)arg1;
- (id)_uidNameForPathComponent:(id)arg1;
- (id)_pathForMailboxName:(id)arg1 toCreateInMailboxUid:(id)arg2;
- (id)_nameForMailboxUid:(id)arg1;
- (id)nameForMailboxUid:(id)arg1;
- (id)_mailboxUidForName:(id)arg1;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (id)serverPathPrefix;
- (void)_setServerPathPrefix:(id)arg1 permanently:(BOOL)arg2 shouldSync:(BOOL)arg3;
- (void)setServerPathPrefix:(id)arg1 permanently:(BOOL)arg2;
- (id)_fileSystemServerPathPrefix;
- (void)_setFileSystemServerPathPrefix;
- (void)syncFileSystemWithServerPathPrefix;
- (id)_mailboxPathPrefix;
- (void)_loadEntriesFromFileSystemPath:(id)arg1 parent:(id)arg2;
- (void)deleteMessagesFromMailboxUid:(id)arg1 olderThanNumberOfDays:(unsigned int)arg2;
- (id)offlineCacheIfOffline;
- (id)offlineCache;
- (void)_clearOfflineCache;
- (id)mailboxUidForRelativePath:(id)arg1 create:(BOOL)arg2;
- (id)_URLPersistenceScheme;
- (id)_infoForMatchingURL:(id)arg1;
- (Class)reconciliationAgentClass;
- (BOOL)supportsToDos;
- (BOOL)storesUnseenCount;
- (id)inboxStore;
- (void)setInboxStore:(id)arg1;
- (BOOL)recoveringFromConnectionLoss;
- (void)setRecoveringFromConnectionLoss:(BOOL)arg1;
- (id)connectionPool;
- (void)setConnectionPool:(id)arg1;

@end

@interface _IMAPMailboxDeletionQueueEntry : NSObject
{
    NSArray *urls;
    NSArray *paths;
    IMAPAccount *account;
}

- (void)dealloc;
- (id)account;
- (void)setAccount:(id)arg1;
- (id)paths;
- (void)setPaths:(id)arg1;
- (id)urls;
- (void)setUrls:(id)arg1;

@end

@interface IMAPAttachmentsDownload : IMAPCompoundDownload
{
    id <IMAPObject> _message;
}

- (void)dealloc;
- (id)initWithLibraryMessage:(id)arg1;
- (id)createClone;
- (void)saveCompletedDownloads;
- (id)message;
- (void)setMessage:(id)arg1;

@end

@interface IMAPClientLoginOperation : IMAPSingleClientOperation
{
    NSString *_username;
    NSString *_quotedUsername;
    NSString *_password;
    NSString *_quotedPassword;
    NSData *_literalPassword;
}

- (void)dealloc;
- (id)initWithUsername:(id)arg1 password:(id)arg2;
- (id)commandTypeString;
- (id)debugCommandString;
- (BOOL)handlesAllUntaggedResponses;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)literalPassword;
- (void)setLiteralPassword:(id)arg1;
- (id)quotedPassword;
- (void)setQuotedPassword:(id)arg1;
- (id)password;
- (void)setPassword:(id)arg1;
- (id)quotedUsername;
- (void)setQuotedUsername:(id)arg1;
- (id)username;
- (void)setUsername:(id)arg1;

@end

@interface IMAPClientAuthenticateOperation : IMAPSingleClientOperation
{
    NSString *_authenticateType;
    SASLAuthenticator *_authenticator;
}

- (void)dealloc;
- (id)initWithAuthenticator:(id)arg1;
- (id)commandTypeString;
- (BOOL)handlesAllUntaggedResponses;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)authenticator;
- (void)setAuthenticator:(id)arg1;
- (id)authenticateType;
- (void)setAuthenticateType:(id)arg1;

@end

@interface IMAPClientStartTLSOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientData : NSObject
{
    NSMutableData *_data;
    NSMutableString *_commandString;
    IMAPClientData *_nextData;
    struct _NSRange _dontLogRange;
    BOOL _isFrozen;
}

- (void)dealloc;
- (id)initWithData:(id)arg1;
- (id)init;
- (id)initWithStringWaitingForArguments:(id)arg1;
- (void)addStringArgument:(id)arg1;
- (void)addDataArgument:(id)arg1 literalPlus:(BOOL)arg2;
- (void)freeze;
- (BOOL)isFrozen;
- (void)setIsFrozen:(BOOL)arg1;
- (struct _NSRange)dontLogRange;
- (void)setDontLogRange:(struct _NSRange)arg1;
- (id)nextData;
- (void)setNextData:(id)arg1;
- (id)commandString;
- (void)setCommandString:(id)arg1;
- (id)data;
- (void)setData:(id)arg1;

@end

@interface IMAPClientFetchBodyDataItem : IMAPClientFetchDataItem
{
    int _textSectionSpecifier;
    NSString *_partSectionSpecifier;
    NSArray *_headerFieldNames;
    BOOL _peek;
    struct _NSRange _dataRange;
}

+ (id)createSectionSpecifierFromPart:(id)arg1 text:(int)arg2;
- (void)dealloc;
- (id)init;
- (id)initWithPartSectionSpecifier:(id)arg1 textSectionSpecifier:(int)arg2 dataRange:(struct _NSRange)arg3;
- (id)initWithHeaderFieldNames:(id)arg1;
- (id)initWithPartSectionSpecifier:(id)arg1 textSectionSpecifier:(int)arg2 peek:(BOOL)arg3 headerFieldNames:(id)arg4 dataRange:(struct _NSRange)arg5;
- (BOOL)isHeader;
- (void)_finalizeCommandString;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (struct _NSRange)dataRange;
- (void)setDataRange:(struct _NSRange)arg1;
- (BOOL)peek;
- (void)setPeek:(BOOL)arg1;
- (id)headerFieldNames;
- (void)setHeaderFieldNames:(id)arg1;
- (id)partSectionSpecifier;
- (void)setPartSectionSpecifier:(id)arg1;
- (int)textSectionSpecifier;
- (void)setTextSectionSpecifier:(int)arg1;

@end

@interface IMAPClientFetchDataItem : NSObject
{
    NSString *_commandString;
}

+ (id)flagsDataItem;
+ (id)UIDDataItem;
+ (id)bodyStructureDataItem;
+ (id)internalDateDataItem;
+ (id)sizeDataItem;
- (void)dealloc;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (id)commandString;
- (void)setCommandString:(id)arg1;

@end

@interface IMAPAggregateFetchUIDOperation : IMAPAggregateClientOperation
{
    unsigned int _expectedSize;
}

- (id)initWithOperations:(id)arg1 expectedSize:(unsigned long)arg2;
- (id)commandTypeString;
- (void)cleanupAfterCompletion;
- (unsigned long)expectedSize;
- (void)setExpectedSize:(unsigned long)arg1;

@end

@interface IMAPClientFetchUIDOperation : IMAPClientFetchOperation
{
    NSIndexSet *_UIDs;
}

- (void)dealloc;
- (id)init;
- (id)initWithUIDs:(id)arg1;
- (id)commandTypeString;
- (id)_createMessageSetCommandString;
- (id)UIDs;
- (void)setUIDs:(id)arg1;

@end

@interface IMAPClientFetchOperation : IMAPSingleClientOperation
{
    CDStruct_9c9676ea _range;
    NSMutableArray *_dataItems;
    id <IMAPResponseHandler> _responseHandler;
}

- (void)dealloc;
- (id)init;
- (id)initWithRange:(CDStruct_9c9676ea)arg1;
- (id)commandTypeString;
- (void)addDataItem:(id)arg1;
- (void)addMessageSkeletonDataItemsWithAdditionalHeaderFields:(id)arg1;
- (void)addMessageUidsAndFlagsDataItemsWithAdditionalHeaderFields:(id)arg1;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)responseHandler;
- (void)setResponseHandler:(id)arg1;
- (id)dataItems;
- (void)setDataItems:(id)arg1;
- (CDStruct_9c9676ea)range;
- (void)setRange:(CDStruct_9c9676ea)arg1;

@end

@interface IMAPClientDoneOperation : IMAPSingleClientOperation
{
    NSDate *_resetDate;
    BOOL _isReallyReady;
    BOOL _shouldQueueIdleWhenFinished;
    BOOL _didQueueIdle;
}

- (void)dealloc;
- (id)init;
- (BOOL)setShouldQueueIdleWhenFinished:(BOOL)arg1;
- (BOOL)shouldQueueIdleWhenFinished;
- (BOOL)_shouldQueueIdleNow;
- (id)commandTypeString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (void)setResetDate:(id)arg1;
- (id)resetDate;
- (void)setSequenceNumber:(unsigned int)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (void)cancel;
- (BOOL)isReady;
- (BOOL)updateReadiness;
- (void)setResetDateEarlierThanNow;

@end

@interface IMAPClientIdleOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientLSubOperation : IMAPClientListOperation
{
}

- (id)initWithMailboxName:(id)arg1 referenceName:(id)arg2 options:(int)arg3;
- (id)commandTypeString;

@end

@interface IMAPClientListOperation : IMAPSingleClientOperation
{
    NSString *_mailboxName;
    NSString *_referenceName;
    int _options;
    NSMutableDictionary *_listing;
    NSString *_separator;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 referenceName:(id)arg2 options:(int)arg3;
- (id)initWithMailboxName:(id)arg1 options:(int)arg2;
- (id)commandTypeString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)separator;
- (void)setSeparator:(id)arg1;
- (id)listing;
- (void)setListing:(id)arg1;
- (int)options;
- (void)setOptions:(int)arg1;
- (id)referenceName;
- (void)setReferenceName:(id)arg1;
- (id)mailboxName;
- (void)setMailboxName:(id)arg1;

@end

@interface IMAPClientAppendOperation : IMAPClientMailboxOperation
{
    NSDate *_dateReceived;
    NSArray *_serverFlags;
    NSData *_data;
    NSDictionary *_newMessageInfo;
    BOOL _shouldTryCreate;
    ActivityMonitor *_progressMonitor;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 flags:(id)arg2 dateReceived:(id)arg3 data:(id)arg4;
- (id)commandTypeString;
- (id)detailsString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)progressMonitor;
- (void)setProgressMonitor:(id)arg1;
- (BOOL)shouldTryCreate;
- (void)setShouldTryCreate:(BOOL)arg1;
- (id)newMessageInfo;
- (void)setNewMessageInfo:(id)arg1;
- (id)data;
- (void)setData:(id)arg1;
- (id)serverFlags;
- (void)setServerFlags:(id)arg1;
- (id)dateReceived;
- (void)setDateReceived:(id)arg1;

@end

@interface IMAPAggregateStatusOperation : IMAPAggregateClientOperation
{
}

- (id)initWithOperations:(id)arg1;
- (id)commandTypeString;

@end

@interface IMAPClientStatusOperation : IMAPClientMailboxOperation
{
    unsigned int _dataItems;
    NSString *_dataItemsString;
    NSDictionary *_statusEntries;
}

+ (id)createStringForDataItems:(unsigned int)arg1;
- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 dataItems:(unsigned int)arg2;
- (id)commandTypeString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)statusEntries;
- (void)setStatusEntries:(id)arg1;
- (id)dataItemsString;
- (void)setDataItemsString:(id)arg1;
- (unsigned int)dataItems;
- (void)setDataItems:(unsigned int)arg1;

@end

@interface IMAPClientRenameOperation : IMAPClientMailboxOperation
{
    NSString *_newMailboxName;
    NSString *_newMailboxArgumentName;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 newMailboxName:(id)arg2;
- (id)commandTypeString;
- (id)detailsString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (id)newMailboxArgumentName;
- (void)setNewMailboxArgumentName:(id)arg1;
- (id)newMailboxName;
- (void)setNewMailboxName:(id)arg1;

@end

@interface IMAPClientUnsubscribeOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;

@end

@interface IMAPClientSubscribeOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientDeleteOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;

@end

@interface IMAPClientCreateOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;

@end

@interface IMAPClientExamineOperation : IMAPClientSelectOperation
{
}

- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;
- (BOOL)readOnly;

@end

@interface IMAPClientSelectOperation : IMAPClientMailboxOperation
{
    IMAPMailbox *_imapMailbox;
    BOOL _delayed;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;
- (BOOL)handlesAllUntaggedResponses;
- (BOOL)executeOnConnection:(id)arg1;
- (BOOL)isReady;
- (BOOL)readOnly;
- (void)setDelayed:(BOOL)arg1;
- (BOOL)delayed;
- (id)imapMailbox;
- (void)setImapMailbox:(id)arg1;

@end

@interface IMAPClientMailboxOperation : IMAPSingleClientOperation
{
    NSString *_mailboxName;
    NSString *_mailboxArgumentName;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1;
- (id)_initWithCommandType:(int)arg1 mailboxName:(id)arg2;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (id)simpleDescriptionString;
- (id)mailboxArgumentName;
- (void)setMailboxArgumentName:(id)arg1;
- (id)mailboxName;
- (void)setMailboxName:(id)arg1;

@end

@interface IMAPClientNamespaceOperation : IMAPSingleClientOperation
{
    IMAPAccount *_account;
    NSString *_separatorChar;
    NSArray *_privateNamespaces;
    NSArray *_publicNamespaces;
    NSArray *_sharedNamespaces;
}

- (void)dealloc;
- (id)initWithAccount:(id)arg1 separatorChar:(id)arg2;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;
- (id)sharedNamespaces;
- (void)setSharedNamespaces:(id)arg1;
- (id)publicNamespaces;
- (void)setPublicNamespaces:(id)arg1;
- (id)privateNamespaces;
- (void)setPrivateNamespaces:(id)arg1;
- (id)separatorChar;
- (void)setSeparatorChar:(id)arg1;
- (id)account;
- (void)setAccount:(id)arg1;

@end

@interface IMAPClientCloseOperation : IMAPClientUnselectOperation
{
}

- (id)init;
- (id)commandTypeString;

@end

@interface IMAPClientUnselectOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientExpungeOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;

@end

@interface IMAPClientCheckOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;

@end

@interface IMAPClientLogoutOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientNoopOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientCapabilityOperation : IMAPSingleClientOperation
{
}

- (id)init;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPAggregateClientOperation : IMAPClientOperation
{
    NSMutableArray *_operations;
}

- (void)dealloc;
- (id)initWithCommandType:(int)arg1 operations:(id)arg2;
- (int)composition;
- (void)setGateway:(id)arg1;
- (void)cleanupAfterCompletion;
- (id)operations;
- (void)setOperations:(id)arg1;

@end

@interface IMAPSingleClientOperation : IMAPClientOperation
{
    NSMutableArray *_untaggedResponses;
    MFError *_error;
    unsigned int _sequenceNumber;
    unsigned int _sessionNumber;
    BOOL _isComplete;
}

- (void)dealloc;
- (int)composition;
- (BOOL)handlesAllUntaggedResponses;
- (void)setSequenceNumber:(unsigned int)arg1;
- (void)cleanupAfterCompletion;
- (id)debugCommandString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (id)tag;
- (id)createCommandString;
- (BOOL)isComplete;
- (void)setIsComplete:(BOOL)arg1;
- (unsigned int)sessionNumber;
- (void)setSessionNumber:(unsigned int)arg1;
- (unsigned int)sequenceNumber;
- (id)error;
- (void)setError:(id)arg1;
- (id)untaggedResponses;
- (void)setUntaggedResponses:(id)arg1;

@end

@interface IMAPClientSuspendOperation : IMAPClientOperation
{
    BOOL _shouldExecuteSynchronously;
}

- (id)init;
- (id)commandTypeString;
- (BOOL)shouldExecuteSynchronously;
- (void)setShouldExecuteSynchronously:(BOOL)arg1;

@end

@interface IMAPClientOperation : NSOperation
{
    int _commandType;
    IMAPGateway *_gateway;
    int _completionState;
}

+ (id)IMAPCreateQuotedString:(id)arg1;
+ (id)IMAPCreateStringForMailboxName:(id)arg1;
+ (id)IMAPNeedsLiteralCharacterSet;
+ (id)_IMAPNeedsQuoteCharacterSet;
- (void)dealloc;
- (id)init;
- (id)initWithCommandType:(int)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)commandTypeString;
- (BOOL)alwaysAllowToComplete;
- (int)minRequiredConnectionState;
- (int)maxAllowedConnectionState;
- (int)composition;
- (BOOL)isWaitingToStart;
- (id)activityString;
- (id)detailsString;
- (void)cleanupAfterCompletion;
- (BOOL)completedSuccessfully;
- (void)increasePriority;
- (void)main;
- (BOOL)executeOnConnection:(id)arg1;
- (void)operationDidFinish;
- (id)simpleDescriptionString;
- (id)shallowDescription;
- (id)description;
- (int)completionState;
- (void)setCompletionState:(int)arg1;
- (id)gateway;
- (void)setGateway:(id)arg1;
- (int)commandType;
- (void)setCommandType:(int)arg1;

@end

@interface IMAPClientOperationQueue : NSOperationQueue
{
    IMAPClientDoneOperation *_doneOperation;
    IMAPClientSelectOperation *_selectOperation;
    IMAPClientSuspendOperation *_suspendOperation;
    NSRecursiveLock *_addOperationLock;
    IMAPGateway *_gateway;
    NSString *_activityName;
    ActivityMonitor *_activityMonitor;
    NSRecursiveLock *_activityMonitorLock;
    struct dispatch_source_s *_activityFinishTimer;
    BOOL _activityMonitorIsActive;
}

- (void)dealloc;
- (id)init;
- (void)activityDidStart:(id)arg1;
- (void)_clearActivityFinishTimer;
- (void)_postDelayedActivityFinished;
- (void)activityDidFinish:(id)arg1;
- (id)selectedMailboxName;
- (id)doneOperation;
- (void)setDoneOperation:(id)arg1;
- (id)selectOperation;
- (void)setSelectOperation:(id)arg1;
- (BOOL)addClientOperation:(id)arg1 outUpdatedOperation:(id *)arg2;
- (BOOL)waitUntilOperationIsFinished:(id)arg1;
- (id)createSelectOperationForResumingIfNeeded;
- (void)changeSelectDependenciesTo:(id)arg1;
- (void)updateDoneReadiness;
- (BOOL)refreshDoneWithGateway:(id)arg1 operation:(id)arg2;
- (void)_setupDependeciesOnDone;
- (void)clearDoneWithOperation:(id)arg1;
- (BOOL)isIdle;
- (BOOL)shouldAllowIdleToExecute:(id)arg1;
- (BOOL)setupDependenciesOnSuspendCreatingIfNeeded;
- (void)suspendIfNeededAndClear:(BOOL)arg1;
- (void)setSuspendOperation:(id)arg1;
- (id)suspendOperation;
- (void)finishIdling;
- (void)refreshIdle;
- (void)_logErrorAndAbort:(id)arg1;
- (id)description;
- (id)activityMonitor;
- (id)activityName;
- (void)setActivityName:(id)arg1;
- (id)gateway;
- (void)setGateway:(id)arg1;
- (id)addOperationLock;
- (void)setAddOperationLock:(id)arg1;

@end

@interface IMAPClientGetQuotaOperation : IMAPSingleClientOperation
{
    NSString *_quotaRoot;
}

- (void)dealloc;
- (id)initWithQuotaRoot:(id)arg1;
- (id)commandTypeString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (id)quotaRoot;
- (void)setQuotaRoot:(id)arg1;

@end

@interface IMAPAggregateGetQuotaRootOperation : IMAPAggregateClientOperation
{
}

- (id)initWithOperations:(id)arg1;
- (id)commandTypeString;

@end

@interface IMAPClientGetQuotaRootOperation : IMAPClientMailboxOperation
{
}

- (id)initWithMailboxName:(id)arg1;
- (id)commandTypeString;

@end

@interface IMAPClientUIDSearchOperation : IMAPClientUIDOperation
{
    NSArray *_terms;
    NSMutableIndexSet *_matchingUIDs;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 range:(CDStruct_9c9676ea)arg2 terms:(id)arg3;
- (id)commandTypeString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (id)_createArgumentForSearchTerm:(id)arg1 isLiteral:(char *)arg2;
- (BOOL)executeOnConnection:(id)arg1;
- (id)matchingUIDs;
- (void)setMatchingUIDs:(id)arg1;
- (id)terms;
- (void)setTerms:(id)arg1;

@end

@interface IMAPClientUIDCopyOperation : IMAPClientUIDOperation
{
    NSString *_copyMailboxName;
    NSString *_copyMailboxArgumentName;
    NSDictionary *_newMessageInfo;
    BOOL _shouldTryCreate;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 UIDs:(id)arg2 destinationMailboxName:(id)arg3;
- (id)commandTypeString;
- (id)detailsString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (BOOL)shouldTryCreate;
- (void)setShouldTryCreate:(BOOL)arg1;
- (id)newMessageInfo;
- (void)setNewMessageInfo:(id)arg1;
- (id)copyMailboxArgumentName;
- (void)setCopyMailboxArgumentName:(id)arg1;
- (id)copyMailboxName;
- (void)setCopyMailboxName:(id)arg1;

@end

@interface IMAPClientUIDStoreOperation : IMAPClientUIDOperation
{
    BOOL _addFlags;
    NSArray *_serverFlags;
}

- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 UIDs:(id)arg2 add:(BOOL)arg3 flags:(id)arg4;
- (id)initWithMailboxName:(id)arg1 range:(CDStruct_9c9676ea)arg2 add:(BOOL)arg3 flags:(id)arg4;
- (id)commandTypeString;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (BOOL)executeOnConnection:(id)arg1;
- (id)serverFlags;
- (void)setServerFlags:(id)arg1;
- (BOOL)addFlags;
- (void)setAddFlags:(BOOL)arg1;

@end

@interface IMAPClientUIDExpungeOperation : IMAPClientUIDOperation
{
}

- (id)initWithMailboxName:(id)arg1 UIDs:(id)arg2;
- (id)commandTypeString;
- (BOOL)executeOnConnection:(id)arg1;

@end

@interface IMAPClientUIDOperation : IMAPClientMailboxOperation
{
    NSIndexSet *_UIDs;
    CDStruct_9c9676ea _range;
}

+ (id)createMessageSetForRange:(CDStruct_9c9676ea)arg1;
+ (id)createMessageSetForNumbers:(id)arg1 range:(struct _NSRange)arg2;
+ (id)createMessageSetForIndexSet:(id)arg1;
- (void)dealloc;
- (id)initWithMailboxName:(id)arg1 UIDs:(id)arg2;
- (id)_initWithCommandType:(int)arg1 mailboxName:(id)arg2 range:(CDStruct_9c9676ea)arg3;
- (id)_initWithCommandType:(int)arg1 mailboxName:(id)arg2 UIDs:(id)arg3;
- (id)_initWithCommandType:(int)arg1 mailboxName:(id)arg2 UIDs:(id)arg3 range:(CDStruct_9c9676ea)arg4;
- (id)createCommandDataForLiteralPlus:(BOOL)arg1;
- (CDStruct_9c9676ea)range;
- (void)setRange:(CDStruct_9c9676ea)arg1;
- (id)UIDs;
- (void)setUIDs:(id)arg1;

@end

@interface _IMAPFetchUnit : NSObject
{
    unsigned int _uid;
    IMAPClientFetchDataItem *_fetchItem;
    IMAPFetchResult *_expectedFetchResult;
}

- (void)dealloc;
- (void)_setupExpectedFetchResult;
- (BOOL)matchesFetchResponse:(id)arg1;
- (id)createFailedFetchResponse;
- (id)expectedFetchResult;
- (void)setExpectedFetchResult:(id)arg1;
- (id)fetchItem;
- (void)setFetchItem:(id)arg1;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;

@end

@interface IMAPCommandPipeline : NSObject
{
    id _imapCommandPipelineLock;
    unsigned int _chunkSize;
    unsigned int _expectedSize;
    BOOL _isSending;
    BOOL _isFull;
    NSMutableArray *_fetchUnits;
    double _startedSendingTime;
}

- (void)dealloc;
- (id)init;
- (id)imapCommandPipelineLock;
- (void)addFetchCommandForUid:(unsigned long)arg1 fetchItem:(id)arg2 expectedLength:(unsigned long)arg3;
- (void)_removeFetchUnitMatchingResponse:(id)arg1;
- (id)failureResponsesFromSendingCommandsWithGateway:(id)arg1 responseHandler:(id)arg2 highPriority:(BOOL)arg3;
- (id)_lockedCreateOperationsAssigningResponseHandler:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (double)startedSendingTime;
- (void)setStartedSendingTime:(double)arg1;
- (id)fetchUnits;
- (void)setFetchUnits:(id)arg1;
- (BOOL)isFull;
- (void)setIsFull:(BOOL)arg1;
- (BOOL)isSending;
- (void)setIsSending:(BOOL)arg1;
- (unsigned long)expectedSize;
- (void)setExpectedSize:(unsigned long)arg1;
- (unsigned long)chunkSize;
- (void)setChunkSize:(unsigned long)arg1;

@end

@interface IMAPConnection : Connection
{
    NSRecursiveLock *_imapConnectionLock;
    IMAPAccount *_IMAPAccount;
    int _capabilityFlags;
    int _connectionState;
    NSMutableSet *_capabilities;
    NSString *_separatorChar;
    NSString *_selectedMailbox;
    IMAPMailbox *_selectedIMAPMailbox;
    BOOL _selectedMailboxIsReadOnly;
    BOOL _canStartIdle;
    unsigned int _commandNumber;
    unsigned int _readBufferSize;
    double _expirationTime;
    InvocationQueue *_streamEventQueue;
    NSMutableDictionary *_unhandledTaggedResponses;
    unsigned int _fetchSizeNextReadingIndex;
    double _fetchSizeRollingAverage;
    BOOL _fetchSizeFirstTime;
    BOOL _fetchSizeFilledHistory;
    double _fetchSizeRecentTimes[8];
    IMAPGateway *_gateway;
    NSRecursiveLock *_validatingLock;
    unsigned int _lastIdleSequenceNumber;
    unsigned int _lastIdleSessionNumber;
    BOOL _executingInternalReconnect;
    unsigned int _numSuccessfulOperationsSinceLastFlush;
}

+ (void)initialize;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffecting_gateway;
+ (void)_setReadSizeParameters;
- (id)initWithPendingGateway:(BOOL)arg1 account:(id)arg2;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)displayName;
- (BOOL)reconnect;
- (void)_setupConnection;
- (BOOL)_teardownConnectionWithResult:(BOOL)arg1;
- (void)disconnectAndNotify:(BOOL)arg1;
- (void)disconnect;
- (void)quit;
- (BOOL)_tryToStartValidating;
- (void)setIsValidating:(BOOL)arg1;
- (BOOL)isValidating;
- (id)gateway;
- (id)_gateway;
- (int)connectionState;
- (int)currentConnectionState;
- (void)_transitionToState:(int)arg1;
- (void)_transitionToState:(int)arg1 selectedMailbox:(id)arg2 readOnly:(BOOL)arg3;
- (void)_setSelectedMailbox:(id)arg1;
- (id)mailboxNameIfSelected:(BOOL)arg1;
- (void)setSelectedIMAPMailbox:(id)arg1;
- (id)selectedIMAPMailbox;
- (BOOL)needsSelectForMailboxName:(id)arg1 gateway:(id)arg2;
- (BOOL)isValid;
- (BOOL)isValidPreferringNetworkCheck:(BOOL)arg1;
- (BOOL)isDisconnected;
- (BOOL)shouldExecuteOperationsImmediately;
- (void)_flushSuccessfulOperationMessageTracerInfoIfNeededOrForceFlush:(BOOL)arg1;
- (void)_logMessageTracerInfoForOperationIfNeededForOperationStateProblemDescription:(id)arg1;
- (BOOL)prepareAndExecuteOperation:(id)arg1 outWrongState:(char *)arg2;
- (BOOL)executeClientOperation:(id)arg1;
- (BOOL)_sendCommand:(id)arg1 response:(id *)arg2;
- (void)_socketDiedError:(id *)arg1;
- (BOOL)_writeData:(id)arg1 dontLogBytesInRange:(struct _NSRange)arg2 error:(id *)arg3;
- (BOOL)_readLineIntoData:(id)arg1 error:(id *)arg2;
- (BOOL)_readBytesIntoData:(id)arg1 desiredLength:(unsigned int)arg2 error:(id *)arg3;
- (id)_copyNextServerResponse:(id *)arg1;
- (id)_copyNextTaggedOrContinuationResponseForCommand:(id)arg1;
- (id)_copyNextTaggedOrContinuationResponseForCommand:(id)arg1 exists:(unsigned int *)arg2;
- (id)_errorForResponse:(id)arg1 operation:(id)arg2;
- (id)capabilities;
- (BOOL)supportsCapability:(int)arg1;
- (void)updateCanStartIdle:(BOOL)arg1;
- (void)_clearCapabilities;
- (void)_addToCapabilities:(id)arg1;
- (void)_fetchCapabilitiesIfNeeded;
- (BOOL)executeCapability:(id)arg1;
- (BOOL)executeNoop:(id)arg1;
- (BOOL)authenticateUsingAccount:(id)arg1;
- (BOOL)_reauthenticate;
- (BOOL)_authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (int)_authenticateUsingHostname:(id)arg1 username:(id)arg2 password:(id)arg3 authenticator:(id)arg4;
- (BOOL)executeAuthenticate:(id)arg1;
- (BOOL)_startTLSForHostname:(id)arg1 onPort:(unsigned long)arg2 securityLayerType:(int)arg3 accountClass:(Class)arg4;
- (int)_startTLSForSecurityLayerType:(int)arg1;
- (BOOL)executeStartTLS:(id)arg1;
- (id)_getServerAlertErrorFromResponse:(id)arg1 forCommand:(id)arg2;
- (BOOL)_loginWithUsername:(id)arg1 password:(id)arg2;
- (BOOL)executeLogin:(id)arg1;
- (BOOL)executeLogout:(id)arg1;
- (id)separatorChar;
- (void)setSeparatorChar:(id)arg1;
- (BOOL)executeListOrLSub:(id)arg1;
- (BOOL)executeUnselect:(id)arg1;
- (void)handleStreamEvent:(id)arg1;
- (void)handleBytesAvailable;
- (BOOL)isIdle;
- (BOOL)startIdle;
- (BOOL)executeIdle:(id)arg1;
- (BOOL)executeDone:(id)arg1;
- (BOOL)executeUIDExpunge:(id)arg1;
- (BOOL)executeStatus:(id)arg1;
- (BOOL)executeSubscribeOperation:(id)arg1;
- (BOOL)executeSelectOperation:(id)arg1;
- (BOOL)executeUIDSearch:(id)arg1;
- (BOOL)executeUIDStore:(id)arg1;
- (id)_responseFromSendingOperation:(id)arg1 tryCreate:(char *)arg2;
- (BOOL)executeUIDCopy:(id)arg1;
- (BOOL)executeAppend:(id)arg1;
- (BOOL)executeNamespace:(id)arg1;
- (void)resetTimingHistory;
- (double)updatedRecentAverageWithNewValue:(double)arg1;
- (void)setReadBufferSizeFromElapsedTime:(double)arg1 bytesRead:(unsigned long)arg2;
- (unsigned long)readBufferSize;
- (void)setReadBufferSize:(unsigned long)arg1;
- (BOOL)executeFetch:(id)arg1;
- (id)description;
- (BOOL)canStartIdle;
- (void)setCanStartIdle:(BOOL)arg1;
- (id)validatingLock;
- (void)setValidatingLock:(id)arg1;
- (void)setGateway:(id)arg1;
- (id)account;
- (void)setAccount:(id)arg1;

@end

@interface ConnectionEnumerator : NSEnumerator
{
    NSDictionary *_connectionsByMailboxName;
    NSArray *_allMailboxNames;
    id _lastObjectKey;
    unsigned int _allMailboxNamesCount;
    unsigned int _positionInMailboxNames;
    NSEnumerator *_nullEnumerator;
}

- (void)dealloc;
- (id)initWithConnectionDictionary:(id)arg1;
- (id)init;
- (id)nextObject;
- (id)lastObjectKey;

@end

@interface IMAPConnectionPool : NSObject
{
    NSMutableDictionary *_idleConnectionsByMailbox;
    NSMutableDictionary *_activeConnectionsByMailbox;
    NSMutableArray *_suspendedGateways;
    unsigned int _maximumConnectionCount;
    NSCondition *_availabilityCondition;
    NSRecursiveLock *_connectionPoolLock;
}

+ (void)initialize;
- (void)dealloc;
- (void)_removeAllConnectionsInDictionary:(id)arg1;
- (void)_sealSuspendedGateways;
- (id)init;
- (unsigned int)connectionCount;
- (void)removeInvalidConnections;
- (void)_removeInvalidConnectionsInDictionary:(id)arg1;
- (void)closeAllConnectionsAndCompact:(BOOL)arg1;
- (void)_closeAllConnectionsAndCompact:(BOOL)arg1 inDictionary:(id)arg2;
- (BOOL)checkInConnection:(id)arg1 forGateway:(id)arg2;
- (void)checkInNewConnection:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_removeDisconnectedConnection:(id)arg1 shouldRecover:(BOOL)arg2;
- (id)checkOutNewGatewayWithConnection:(id)arg1;
- (id)_checkOutNewGatewayWithConnection:(id)arg1 forMailbox:(id)arg2;
- (id)checkOutGatewayForMailbox:(id)arg1;
- (id)checkOutGatewayForExistingConnectionToMailbox:(id)arg1;
- (id)checkOutGatewayForMailbox:(id)arg1 newConnection:(id)arg2 highPriority:(BOOL)arg3 waitIndefinitely:(BOOL)arg4;
- (BOOL)tryToResumeGateway:(id)arg1;
- (void)sealGatewayShutIfNoChanceOfResuming:(id)arg1;
- (BOOL)yieldGateway:(id)arg1;
- (BOOL)suspendGateway:(id)arg1 withOperation:(id)arg2;
- (id)_suspendGatewayOfConnection:(id)arg1 mailbox:(id)arg2 forMailbox:(id)arg3 resumingGateway:(id)arg4;
- (id)_suspendFirstIdleConnectionForMailbox:(id)arg1 resumingGateway:(id)arg2 totalSecondsWaited:(double *)arg3 mightBeSuccessful:(char *)arg4;
- (id)_suspendFirstIdleConnectionInIdleConnections:(id)arg1 forMailbox:(id)arg2 resumingGateway:(id)arg3;
- (id)_anyConnectionFromDictionary:(id)arg1 selectedOnly:(BOOL)arg2 mailbox:(id *)arg3;
- (id)_gatewayToCheckOutConnection:(id)arg1 defaultGateway:(id)arg2 mailboxName:(id)arg3 newGateway:(char *)arg4;
- (BOOL)_validateAndCheckOutGateway:(id)arg1 forMailbox:(id)arg2 allowReconnect:(BOOL)arg3 newGateway:(BOOL)arg4;
- (id)_createNewGatewayForConnection:(id)arg1 mailboxName:(id)arg2;
- (void)_makeConnectionAvailable:(id)arg1;
- (id)description;
- (void)updateConnectionsShouldUseIdle:(id)arg1;
- (BOOL)_removeConnection:(id)arg1 fromDictionary:(id)arg2;
- (void)_setConnection:(id)arg1 forMailbox:(id)arg2 clear:(BOOL)arg3 inDictionary:(id)arg4;
- (BOOL)_connectionIsContained:(id)arg1 forMailbox:(id)arg2 inDictionary:(id)arg3;
- (id)_suspendedGatewayForMailbox:(id)arg1;
- (id)_suspendedGatewayWithWorkRequireSelected:(BOOL)arg1;
- (void)_suspendGateway:(id)arg1 allowNetworking:(BOOL)arg2;
- (void)_removeSuspendedGateway:(id)arg1;
- (id)_keyForMailboxName:(id)arg1;
- (id)connections;
- (id)suspendedGateways;
- (void)setSuspendedGateways:(id)arg1;
- (id)activeConnectionsByMailbox;
- (void)setActiveConnectionsByMailbox:(id)arg1;
- (id)idleConnectionsByMailbox;
- (void)setIdleConnectionsByMailbox:(id)arg1;
- (id)availabilityCondition;
- (void)setAvailabilityCondition:(id)arg1;
- (unsigned int)maximumConnectionCount;
- (void)setMaximumConnectionCount:(unsigned int)arg1;

@end

@interface IMAPCompoundDownload : IMAPDownload
{
    NSMutableArray *_subdownloads;
}

- (id)createClone;
- (void)dealloc;
- (id)subdownloads;
- (void)addSubdownload:(id)arg1;
- (void)removeSubdownload:(id)arg1;
- (void)addCommandsToPipeline:(id)arg1 withCache:(id)arg2;
- (void)processResults;
- (BOOL)isComplete;
- (id)error;
- (unsigned long)bytesFetched;
- (unsigned long)expectedLength;

@end

@interface IMAPSimpleDownload : IMAPDownload
{
    NSMutableData *_mdata;
    MFError *_error;
    unsigned int _length:32;
    BOOL _knownLength;
    BOOL _complete;
    unsigned int _bytesFetched;
    NSString *_partSectionSpecifier;
    int _textSectionSpecifier;
}

- (id)initWithUid:(unsigned long)arg1 partSectionSpecifier:(id)arg2 textSectionSpecifier:(int)arg3 estimatedLength:(unsigned long)arg4;
- (id)initWithUid:(unsigned long)arg1 partSectionSpecifier:(id)arg2 textSectionSpecifier:(int)arg3 length:(unsigned long)arg4;
- (id)initWithUid:(unsigned long)arg1;
- (id)createClone;
- (void)dealloc;
- (unsigned long)bytesFetched;
- (unsigned long)expectedLength;
- (void)handleFetchResult:(id)arg1;
- (void)processResults;
- (void)addCommandsToPipeline:(id)arg1 withCache:(id)arg2;
- (BOOL)isComplete;
- (id)data;
- (id)error;
- (void)setError:(id)arg1;
- (int)textSectionSpecifier;
- (void)setTextSectionSpecifier:(int)arg1;
- (id)partSectionSpecifier;
- (void)setPartSectionSpecifier:(id)arg1;

@end

@interface IMAPDownload : NSObject
{
    unsigned int _uid;
    NSMutableArray *_pendingFetchResults;
}

- (void)dealloc;
- (id)initWithUid:(unsigned long)arg1;
- (id)init;
- (id)createClone;
- (unsigned long)uid;
- (unsigned long)expectedLength;
- (BOOL)isComplete;
- (unsigned long)bytesFetched;
- (id)data;
- (id)error;
- (void)setError:(id)arg1;
- (void)handleFetchResult:(id)arg1;
- (void)processResults;
- (void)addCommandsToPipeline:(id)arg1 withCache:(id)arg2;
- (id)description;

@end

@interface IMAPDownloadCache : NSObject <IMAPResponseHandler>
{
    NSMutableArray *_downloads;
}

- (void)dealloc;
- (struct _NSRange)_lockedFindRangeOfDownloadsWithUid:(unsigned long)arg1;
- (id)downloadForMessage:(id)arg1;
- (id)_getDownloadForUid:(unsigned long)arg1 partSectionSpecifier:(id)arg2 textSectionSpecifier:(int)arg3 length:(unsigned long)arg4 estimatedLength:(unsigned long)arg5;
- (id)downloadForUid:(unsigned long)arg1 partSectionSpecifier:(id)arg2 textSectionSpecifier:(int)arg3 length:(unsigned long)arg4;
- (id)downloadForUid:(unsigned long)arg1 partSectionSpecifier:(id)arg2 textSectionSpecifier:(int)arg3 expectedLength:(unsigned long)arg4;
- (void)_lockedUpdateDownloadsInRange:(struct _NSRange)arg1 fetchResults:(id)arg2 error:(id)arg3;
- (BOOL)handleResponse:(id)arg1 forOperation:(id)arg2;
- (void)handleFetchResponse:(id)arg1 forUid:(unsigned long)arg2;
- (void)handleFetchResponses:(id)arg1;
- (void)processResultsForUid:(unsigned long)arg1;
- (void)cleanUpDownloadsForUid:(unsigned long)arg1;
- (void)addDownload:(id)arg1 forUid:(unsigned long)arg2;
- (void)_lockedAddDownload:(id)arg1 atIndex:(unsigned int)arg2 forUid:(unsigned long)arg3;
- (void)addCommandsForDownload:(id)arg1 toPipeline:(id)arg2;

@end

@interface IMAPFetchResult : NSObject
{
    int _itemType;
    union {
        NSArray *envelope;
        NSString *internalDate;
        unsigned int messageSize;
        NSArray *bodyStructure;
        struct {
            NSString *section;
            unsigned int startOffset;
            NSData *sectionData;
        } bodySectionInfo;
        unsigned int uid;
        NSArray *flags;
    } _typeSpecific;
}

- (id)initWithType:(int)arg1;
- (void)dealloc;
- (int)type;
- (BOOL)needsLineEndingConversion;
- (id)envelope;
- (void)setEnvelope:(id)arg1;
- (id)internalDate;
- (void)setInternalDate:(id)arg1;
- (id)fetchData;
- (void)setFetchData:(id)arg1;
- (unsigned long)messageSize;
- (void)setMessageSize:(unsigned long)arg1;
- (id)bodyStructure;
- (void)setBodyStructure:(id)arg1;
- (unsigned long)startOffset;
- (void)setStartOffset:(unsigned long)arg1;
- (id)section;
- (void)setSection:(id)arg1;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (id)flagsArray;
- (void)setFlagsArray:(id)arg1;
- (unsigned long)encoding;
- (unsigned long)messageFlags;
- (id)description;

@end

@interface IMAPGateway : NSObject
{
    IMAPConnectionPool *_connectionPool;
    IMAPConnection *_connection;
    IMAPClientOperationQueue *_operationQueue;
    NSOperationQueue *_checkInQueue;
    NSCondition *_connectionAvailabilityCondition;
    BOOL _primaryClientAllowsYielding;
    unsigned int _clientCount;
    NSLock *_clientCountLock;
    BOOL _canYield;
    BOOL _remainedDeserted;
    BOOL _needsSelect;
    BOOL _isSealedShut;
    BOOL _operationQueueCanCheckInConnection;
}

+ (void)initialize;
+ (unsigned int)IMAPIdleRefreshDelay;
+ (void)_addIdleGateway:(id)arg1;
+ (void)_removeIdleGateway:(id)arg1;
+ (void)_checkIdleGateways;
- (void)dealloc;
- (id)initWithIMAPConnection:(id)arg1 mailbox:(id)arg2 pool:(id)arg3;
- (id)init;
- (void)setConnectionPool:(id)arg1;
- (id)connection;
- (void)setConnection:(id)arg1;
- (void)operationQueueDidIdle;
- (void)checkIn;
- (void)_tryToCheckInConnectionAndTryToIdle:(BOOL)arg1;
- (BOOL)checkOut;
- (BOOL)okToYield;
- (void)yield;
- (void)suspend;
- (void)resumeWithConnection:(id)arg1 reselect:(BOOL)arg2;
- (void)sealShutAndCompact:(BOOL)arg1 allowNetworking:(BOOL)arg2;
- (void)_finishQueueIdlingAndSuspend:(BOOL)arg1;
- (BOOL)isDeserted;
- (void)allowClientOperationThrough:(id)arg1;
- (void)_allowClientOperationThrough:(id)arg1;
- (void)_executeSuspend:(id)arg1;
- (BOOL)addClientOperation:(id)arg1 toQueueAndWaitUntilFinished:(BOOL)arg2;
- (void)waitUntilClientOperationIsFinished:(id)arg1;
- (void)waitUntilAllOperationsAreFinished;
- (id)mailboxName;
- (void)configureForMailboxName:(id)arg1;
- (BOOL)supportsCapability:(int)arg1;
- (id)mailboxNameIfSelected:(BOOL)arg1;
- (void)_setError:(id *)arg1 fromOperation:(id)arg2;
- (void)_setErrorFromOperation:(id)arg1 overwriteExistingError:(BOOL)arg2;
- (void)noop;
- (void)fetchAllFlags;
- (void)setServerPathPrefixOnAccount:(id)arg1 withSeparatorChar:(id)arg2;
- (id)namespacesWithSeparatorChar:(id)arg1;
- (void)listingForMailbox:(id)arg1 options:(int)arg2 listingInfo:(id)arg3;
- (void)subscribedListingForMailbox:(id)arg1 options:(int)arg2 listingInfo:(id)arg3;
- (void)fetchStatusForMailboxes:(id)arg1 dataItems:(unsigned int)arg2;
- (id)statusForMailbox:(id)arg1 dataItems:(unsigned int)arg2;
- (BOOL)examineMailbox:(id)arg1;
- (BOOL)selectMailbox:(id)arg1;
- (BOOL)_addSelectOperationForMailbox:(id)arg1 type:(int)arg2;
- (void)_waitForDelayedSelectOperation:(id)arg1;
- (BOOL)_completeSelectOperation:(id)arg1;
- (BOOL)createMailbox:(id)arg1;
- (BOOL)deleteMailbox:(id)arg1;
- (BOOL)renameMailbox:(id)arg1 toMailbox:(id)arg2;
- (BOOL)subscribeMailbox:(id)arg1;
- (BOOL)unsubscribeMailbox:(id)arg1;
- (void)fetchQuotaRootNamesForMailboxes:(id)arg1;
- (BOOL)getQuotaForRootName:(id)arg1;
- (BOOL)check:(id *)arg1;
- (BOOL)expunge;
- (BOOL)expungeUids:(id)arg1;
- (BOOL)_expungeUids:(id)arg1 mailboxName:(id)arg2;
- (void)close;
- (void)logout;
- (void)closeAndLogout;
- (void)unselect;
- (void)fetchTotalSizeAndMessageCount;
- (BOOL)storeFlags:(id)arg1 state:(BOOL)arg2 forUids:(id)arg3;
- (BOOL)_expunge:(BOOL)arg1 orStoreFlags:(id)arg2 state:(BOOL)arg3 forUids:(id)arg4;
- (BOOL)_storeFlags:(id)arg1 state:(BOOL)arg2 forUids:(id)arg3 mailboxName:(id)arg4;
- (BOOL)deleteMessagesOlderThanNumberOfDays:(int)arg1 settingFlags:(id)arg2;
- (BOOL)copyUids:(id)arg1 toMailboxNamed:(id)arg2 messageInfo:(id)arg3 error:(id *)arg4;
- (BOOL)appendData:(id)arg1 toMailboxNamed:(id)arg2 flags:(id)arg3 dateReceived:(id)arg4 messageInfo:(id)arg5 error:(id *)arg6;
- (id)searchUidRange:(CDStruct_9c9676ea)arg1 forTerms:(id)arg2;
- (id)searchUidRange:(CDStruct_9c9676ea)arg1 forNewMessageIDs:(id)arg2;
- (unsigned long)searchedUidNextForMessageNumber:(unsigned int)arg1;
- (BOOL)synchronouslyExecuteSelect:(id)arg1;
- (BOOL)synchronouslyExecuteDoneWithSequence:(unsigned int)arg1 session:(unsigned int)arg2;
- (void)refreshDone:(BOOL)arg1 withOperation:(id)arg2;
- (BOOL)startIdle;
- (void)refreshIdle;
- (id)description;
- (BOOL)primaryClientAllowsYielding;
- (void)setPrimaryClientAllowsYielding:(BOOL)arg1;
- (BOOL)needsSelect;
- (void)setNeedsSelect:(BOOL)arg1;
- (BOOL)isSealedShut;
- (void)setIsSealedShut:(BOOL)arg1;
- (id)clientCountLock;
- (void)setClientCountLock:(id)arg1;
- (unsigned int)clientCount;
- (void)setClientCount:(unsigned int)arg1;
- (BOOL)remainedDeserted;
- (void)setRemainedDeserted:(BOOL)arg1;
- (BOOL)canYield;
- (void)setCanYield:(BOOL)arg1;
- (id)operationQueue;
- (void)setOperationQueue:(id)arg1;
- (id)connectionPool;

@end

@interface IMAPClientSimulatedSelectOperation : IMAPClientSelectOperation
{
}

+ (void)initialize;
+ (id)createWithMailboxName:(id)arg1;
- (void)main;

@end

@interface IMAPMailbox : NSObject
{
    id <IMAPMailboxDelegate> _delegate;
    MailboxUid *_mailboxUid;
    unsigned int _permanentFlags;
    NSString *_referenceName;
    BOOL _readOnly;
    BOOL _uidNotSticky;
    IMAPGateway *_selectedGateway;
    NSArray *_quotaRoots;
    unsigned int _exists;
    CDStruct_ff11e81d _quotaUsage;
    unsigned int _uidNext;
    unsigned int _uidValidity;
    unsigned int _unseenCount;
    NSMutableArray *_unprocessedResponses;
    BOOL _hasNewResponses;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)dealloc;
- (id)initWithMailboxName:(id)arg1;
- (id)init;
- (void)setDelegate:(id)arg1;
- (void)clearDelegate:(id)arg1;
- (id)selectedGateway;
- (void)setSelectedGateway:(id)arg1;
- (void)setExists:(unsigned int)arg1;
- (void)setUidValidity:(unsigned long)arg1;
- (void)setHasNewResponses:(BOOL)arg1;
- (void)setTotalSize:(unsigned long long)arg1 forQuotaMessageCount:(int)arg2;
- (void)setPermanentFlags:(unsigned int)arg1;
- (void)addResponse:(id)arg1;
- (id)removeResponse;
- (id)description;
- (BOOL)hasNewResponses;
- (id)unprocessedResponses;
- (void)setUnprocessedResponses:(id)arg1;
- (unsigned long)unseenCount;
- (void)setUnseenCount:(unsigned long)arg1;
- (unsigned long)uidValidity;
- (unsigned long)uidNext;
- (void)setUidNext:(unsigned long)arg1;
- (CDStruct_ff11e81d)quotaUsage;
- (void)setQuotaUsage:(CDStruct_ff11e81d)arg1;
- (unsigned int)exists;
- (id)quotaRoots;
- (void)setQuotaRoots:(id)arg1;
- (BOOL)uidNotSticky;
- (void)setUidNotSticky:(BOOL)arg1;
- (BOOL)readOnly;
- (void)setReadOnly:(BOOL)arg1;
- (id)referenceName;
- (void)setReferenceName:(id)arg1;
- (unsigned int)permanentFlags;
- (id)mailboxUid;
- (void)setMailboxUid:(id)arg1;

@end

@interface IMAPMailboxSyncEngine : NSObject <IMAPResponseHandler>
{
    id _syncEngineLock;
    IMAPGateway *_gateway;
    LibraryIMAPStore *_store;
    IMAPMailbox *_IMAPMailbox;
    NSMutableArray *_auxiliaryLists;
    NSMutableIndexSet *_allNewUids;
    NSMutableIndexSet *_UIDsNeedingSkeletons;
    unsigned int _uidNext;
    unsigned int _uidValidity;
    unsigned int _libraryClientUidNext;
    unsigned int _numMessagesOnServer;
    unsigned int _firstMessageNumber;
    NSMutableArray *_messageDetails;
    unsigned int _maxSkeletonsToFetch;
    NSMutableIndexSet *_expungedUids;
    BOOL _automaticallyStartThread;
    BOOL _storeIsInbox;
    BOOL _newMailReceivedInInbox;
    BOOL _checkedForNewUids;
    BOOL _synchronizedOldMessages;
    int _progressType;
    BOOL _connectionSupportsUIDPLUS;
    unsigned int _progressTotal;
    unsigned int _checkNewMailCount;
    InvocationQueue *_syncEngineQueue;
    NSMutableArray *_messagesNeedingAttachmentNames;
    BOOL _messagesNeedAttachmentNames;
    BOOL _isReset;
    BOOL _needToUpdateExists;
    BOOL _newResponsesAvailable;
    unsigned int _newUidValidity;
    NSMutableArray *_messagesAddedToLibrary;
    NSMutableArray *_uidsAddedToServer;
    NSMutableArray *_messagesAddedToServer;
    NSArray *_messagesBeingRouted;
}

- (void)dealloc;
- (id)initWithStore:(id)arg1;
- (id)init;
- (id)_copyIMAPMailbox;
- (id)_copyLibraryIMAPStore;
- (BOOL)isReset;
- (void)reset;
- (void)_resetClearingGateway:(BOOL)arg1 clearingStore:(BOOL)arg2;
- (void)invalidateStore;
- (void)_setupForNewIMAPMailbox:(id)arg1 andGateway:(id)arg2;
- (void)setGatewayFromIMAPMailbox:(id)arg1;
- (void)updateCountOfMessagesOnServerFromIMAPMailbox:(id)arg1;
- (void)_lockedUpdateCountOfMessagesOnServerIfNecessary;
- (void)setUidValidity:(unsigned long)arg1;
- (void)responsesWereAddedToIMAPMailbox:(id)arg1;
- (void)_handleMessagesWereAddedToLibrary:(id)arg1 withMonitor:(id)arg2;
- (void)messagesWereAddedToLibrary:(id)arg1;
- (id)messagesBeingAdded;
- (void)setAutomaticallyStartsBackgroundThread:(BOOL)arg1;
- (void)runSynchronouslyWithMessages:(id)arg1;
- (void)requestCheckingNewMail;
- (void)_handleNewUIDsAddedToServer:(id)arg1 forMessages:(id)arg2;
- (void)newUIDsWereAddedToServer:(id)arg1 forMessages:(id)arg2;
- (void)_pushFlags:(id)arg1 forMessageIDs:(id)arg2 toStore:(id)arg3 updateServer:(BOOL)arg4 usingCriterion:(id)arg5 withMonitor:(id)arg6;
- (void)_pushFlags:(id)arg1 toStore:(id)arg2 updateServer:(BOOL)arg3 withMonitor:(id)arg4;
- (void)_processAttachmentNames;
- (void)_setAttachmentNamesForMessage:(id)arg1;
- (id)_checkOutGateway;
- (BOOL)_setGateway:(id)arg1;
- (void)_notifyBackgroundFetchCompleted;
- (BOOL)_hasPendingChanges;
- (void)_updatePendingChangesWithMonitor:(id)arg1;
- (void)_goWithMessages:(id)arg1;
- (void)_goWithMessagesIfNeeded:(id)arg1;
- (BOOL)_shouldContinueSyncingWithGateway;
- (BOOL)_shouldContinueSyncingWithMonitor:(id)arg1;
- (BOOL)_unlockIfProcessedResponsesWithMonitor:(id)arg1;
- (BOOL)_unlockIfGotNewMessageSkeletonsWithMonitor:(id)arg1;
- (id)_lockedCreateOperationFromUIDsNeedingSkeletons:(unsigned int)arg1;
- (BOOL)_unlockIfHandledRoutedUidsWithMonitor:(id)arg1;
- (BOOL)_unlockIfFetchedUidsAndFlagsWithMonitor:(id)arg1;
- (BOOL)_unlockIfSyncedWithLibraryWithMonitor:(id)arg1 messages:(id)arg2;
- (BOOL)_unlockIfDidCacheMessagesWithMonitor:(id)arg1;
- (BOOL)_unlockIfDidCacheAttachmentsWithMonitor:(id)arg1;
- (BOOL)_recoverFromErrorInDownload:(id)arg1 uid:(unsigned long)arg2 cacheList:(id)arg3 atIndex:(unsigned int)arg4 downloadCache:(id)arg5;
- (BOOL)_unlockIfHandledInvitationMessagesWithMonitor:(id)arg1;
- (int)_cachePolicyForAccount:(id)arg1;
- (id)description;
- (BOOL)handleResponse:(id)arg1 forOperation:(id)arg2;
- (void)_setupFakeResponseToOperation:(id)arg1 messageNumber:(unsigned int)arg2;
- (BOOL)_handleFailedFetchResponse:(id)arg1 forOperation:(id)arg2;
- (BOOL)connectionSupportsUIDPLUS;
- (void)setConnectionSupportsUIDPLUS:(BOOL)arg1;
- (unsigned long)uidNext;
- (void)setUidNext:(unsigned long)arg1;
- (unsigned int)numMessagesOnServer;
- (void)setNumMessagesOnServer:(unsigned int)arg1;
- (BOOL)messageListIsSynchronized;
- (void)setMessageListIsSynchronized:(BOOL)arg1;

@end

@interface IMAPMessage : RemoteMessage <IMAPObject, NSCoding>
{
    unsigned int _uid;
}

+ (void)initialize;
- (id)initWithFlags:(unsigned long)arg1 size:(unsigned int)arg2 uid:(unsigned long)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)messageID;
- (int)compareByNumberWithMessage:(id)arg1;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (BOOL)isMessageContentsLocallyAvailable;
- (void)setPreferredEncoding:(unsigned long)arg1;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)arg1;
- (id)mailboxName;
- (id)remoteID;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;
- (id)subject;

@end

@interface IMAPMessageDownload : IMAPCompoundDownload
{
    id <IMAPObject> _message;
    MimePart *_topLevelPart;
    BOOL _allowsPartialDownloads;
    BOOL _writesCacheFile;
    unsigned int _usingPartialDownloads:1;
    unsigned int _startedFetch:1;
    unsigned int _fetchingBodyText:1;
    unsigned int _doneAddingSubdownloads:1;
}

- (void)dealloc;
- (id)initWithMessage:(id)arg1;
- (id)createClone;
- (id)message;
- (void)setMessage:(id)arg1;
- (id)data;
- (BOOL)isComplete;
- (void)handleFetchResult:(id)arg1;
- (void)processResults;
- (void)_addMimeSubdownloadsToPipeline:(id)arg1 withCache:(id)arg2;
- (void)addCommandsToPipeline:(id)arg1 withCache:(id)arg2;
- (BOOL)writesCacheFile;
- (void)setWritesCacheFile:(BOOL)arg1;
- (BOOL)allowsPartialDownloads;
- (void)setAllowsPartialDownloads:(BOOL)arg1;
- (id)topLevelPart;
- (void)setTopLevelPart:(id)arg1;

@end

@interface IMAPMessageWithCache : IMAPMessage
{
    NSData *_messageData;
    MessageHeaders *_headers;
}

- (void)dealloc;
- (id)messageData;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (void)setMessageData:(id)arg1;
- (BOOL)isMessageContentsLocallyAvailable;
- (id)headers;
- (void)setHeaders:(id)arg1;
- (id)headerData;

@end

@interface IMAPOfflineCopyOnStupidServerOperation : IMAPOperation
{
    struct __CFArray *messageIds;
    struct __CFArray *internalDates;
}

- (void)serializeIntoData:(id)arg1;
- (unsigned char)_magic;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned int *)arg2;
- (void)dealloc;
- (void)finalize;
- (BOOL)getMessageId:(id *)arg1 andInternalDate:(id *)arg2 forDestinationUid:(unsigned long)arg3;
- (void)setMessageId:(id)arg1 andInternalDate:(id)arg2 forMessageWithSourceUid:(unsigned long)arg3;
- (void)expungeTemporaryUid:(unsigned long)arg1;
- (unsigned int)approximateSize;

@end

@interface IMAPOperation : NSObject
{
    unsigned int _type:8;
    unsigned int _temporaryUids:1;
    NSString *_mailboxName;
    union {
        struct {
            NSArray *trueFlags;
            NSArray *falseFlags;
            struct __CFArray *uids;
        } store;
        struct {
            unsigned int uid;
            NSArray *flags;
            int internalDate;
            unsigned int size;
        } append;
        struct {
            struct __CFArray *srcUids;
            struct __CFArray *dstUids;
            NSString *destinationMailbox;
        } copy;
    } _opSpecific;
}

+ (id)deserializeFromData:(id)arg1 cursor:(unsigned int *)arg2;
- (unsigned char)_magic;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned int *)arg2;
- (void)serializeIntoData:(id)arg1;
- (id)initWithMailboxToCreate:(id)arg1;
- (id)initWithMailboxToDelete:(id)arg1;
- (id)initWithFlagsToSet:(id)arg1 flagsToClear:(id)arg2 forUids:(id)arg3 inMailbox:(id)arg4;
- (id)initWithUidsToCopy:(id)arg1 fromMailbox:(id)arg2 toMailbox:(id)arg3 firstNewUid:(unsigned long)arg4;
- (id)initWithAppendedUid:(unsigned long)arg1 approximateSize:(unsigned int)arg2 flags:(id)arg3 internalDate:(id)arg4 mailbox:(id)arg5;
- (void)dealloc;
- (void)finalize;
- (BOOL)isSourceOfTemporaryUid:(unsigned long)arg1;
- (BOOL)actsOnTemporaryUid:(unsigned long)arg1;
- (void)expungeTemporaryUid:(unsigned long)arg1;
- (unsigned long)firstTemporaryUid;
- (unsigned long)lastTemporaryUid;
- (int)operationType;
- (id)mailboxName;
- (unsigned int)approximateSize;
- (BOOL)usesRealUids;
- (void)setUsesRealUids:(BOOL)arg1;
- (id)flagsToSet;
- (id)flagsToClear;
- (id)uids;
- (id)flags;
- (id)internalDate;
- (unsigned long)uid;
- (id)sourceUids;
- (id)destinationUids;
- (id)destinationMailbox;
- (unsigned long)sourceUidForTemporaryUid:(unsigned long)arg1;
- (BOOL)getMessageId:(id *)arg1 andInternalDate:(id *)arg2 forDestinationUid:(unsigned long)arg3;
- (void)setMessageId:(id)arg1 andInternalDate:(id)arg2 forMessageWithSourceUid:(unsigned long)arg3;
- (id)description;

@end

@interface IMAPOperationCache : NSObject
{
    IMAPAccount *_account;
    NSMutableArray *_ops;
    unsigned int _lastUid;
    BOOL _opsChanged;
}

- (id)initWithIMAPAccount:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)createMailbox:(id)arg1;
- (void)deleteMailbox:(id)arg1;
- (void)setFlags:(id)arg1 andClearFlags:(id)arg2 forMessages:(id)arg3;
- (void)setFlags:(id)arg1 andClearFlags:(id)arg2 forUids:(id)arg3 forMailbox:(id)arg4;
- (unsigned long)firstUidForCopyingMessages:(id)arg1 toMailbox:(id)arg2;
- (unsigned long)uidForAppendingMessageData:(id)arg1 withFlags:(id)arg2 andInternalDate:(id)arg3 toMailbox:(id)arg4;
- (void)_expungeMessageWithTemporaryUid:(unsigned long)arg1 orMessageID:(id)arg2 documentID:(id)arg3;
- (void)expungeTemporaryUid:(unsigned long)arg1;
- (void)expungeMessageWithMessageID:(id)arg1 documentID:(id)arg2;
- (void)saveChanges;
- (unsigned int)numberOfPendingChanges;
- (BOOL)hasOperationsForMailbox:(id)arg1;
- (BOOL)_performCreateOperation:(id)arg1 withContext:(CDStruct_3691c9db *)arg2;
- (BOOL)_performDeleteOperation:(id)arg1 withContext:(CDStruct_3691c9db *)arg2;
- (BOOL)_performStoreOperation:(id)arg1 ignoringUids:(id)arg2 withContext:(CDStruct_3691c9db *)arg3;
- (BOOL)_performAppendOperation:(id)arg1 withContext:(CDStruct_3691c9db *)arg2 backupManager:(id)arg3 suggestedOfflineRestoreName:(id)arg4 recoveredMailboxName:(id *)arg5 error:(id *)arg6;
- (BOOL)_performCopyOperation:(id)arg1 withContext:(CDStruct_3691c9db *)arg2 failedSourceUids:(id)arg3 error:(id *)arg4;
- (void)performDeferredOperationsWithGateway:(id)arg1 outDisplayableError:(id *)arg2;
- (id)_deferredOperations;

@end

@interface IMAPQuotaRoot : NSObject
{
    NSString *_name;
    QuotaUsage *_usage;
}

- (void)dealloc;
- (id)initWithName:(id)arg1;
- (id)init;
- (void)setUsageFromResponse:(id)arg1;
- (id)description;
- (id)usage;
- (void)setUsage:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;

@end

@interface IMAPResponse : NSObject
{
    unsigned int _responseType:8;
    NSString *_tag;
    union _IMAPResponseData _data;
    MFError *_error;
    BOOL _wasHandled;
}

- (int)responseType;
- (void)setResponseType:(int)arg1;
- (BOOL)isUntagged;
- (BOOL)isAlertResponse;
- (id)tag;
- (void)setTag:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (int)responseCode;
- (id)responseInfo;
- (id)userData;
- (id)userString;
- (void)setUserData:(id)arg1 responseCode:(int)arg2 responseInfo:(id)arg3;
- (id)capabilities;
- (void)setCapabilities:(id)arg1;
- (unsigned long)number;
- (void)setNumber:(unsigned long)arg1;
- (id)flags;
- (void)setFlags:(id)arg1;
- (id)mailboxName;
- (id)statusEntries;
- (void)setMailboxName:(id)arg1 statusEntries:(id)arg2;
- (id)searchResults;
- (void)setSearchResults:(id)arg1;
- (unsigned long)mailboxAttributes;
- (id)separator;
- (void)setMailboxAttributes:(unsigned long)arg1 separator:(id)arg2 mailboxName:(id)arg3;
- (id)fetchResultWithType:(int)arg1;
- (id)fetchResults;
- (void)setFetchResults:(id)arg1;
- (BOOL)isValid;
- (void)setIsValid:(BOOL)arg1;
- (id)quotaRootNames;
- (void)setMailboxName:(id)arg1 quotaRootNames:(id)arg2;
- (id)quotaRootName;
- (id)quotas;
- (void)setQuotaRootName:(id)arg1 quotas:(id)arg2;
- (int)uidFlagsChange;
- (void)setUidFlagsChange:(int)arg1;
- (id)uids;
- (void)setUids:(id)arg1;
- (id)flagsFetchResult;
- (void)setFlagsFetchResult:(id)arg1;
- (id)responseName;
- (id)parameters;
- (void)setResponseName:(id)arg1 parameters:(id)arg2;
- (id)description;
- (id)initWithConnection:(id)arg1 error:(id *)arg2;
- (void)setError:(id)arg1;
- (id)error;
- (BOOL)wasHandled;
- (void)setWasHandled:(BOOL)arg1;

@end

@interface IMAPSizeEngine : RemoteStoreSizeEngine
{
    unsigned int _workerThreadCount;
    NSMutableDictionary *_mailboxesByQuotaRoot;
    NSMutableSet *_quotasToFetch;
    NSMutableSet *_observedIMAPMailboxes;
    NSMutableSet *_observedIMAPQuotaRoots;
    int _quotaStatus;
}

- (id)initWithAccount:(id)arg1;
- (void)dealloc;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_addUsageInfoFromMailbox:(id)arg1;
- (void)_addQuotaRootsFromMailbox:(id)arg1;
- (BOOL)_changeUsageInfo:(CDStruct_ff11e81d *)arg1 forMailboxUid:(id)arg2 refetchQuotas:(BOOL)arg3;
- (void)_changeQuotaRoots:(id)arg1 forMailboxUid:(id)arg2;
- (void)_mailboxBecameInvalid:(id)arg1;
- (void)_getSizeForMailboxUid:(id)arg1;
- (void)_runWorkerThread;
- (BOOL)_shouldStartWorkerThread;
- (int)quotaStatus;
- (id)quotaNames;
- (id)usageForQuotaName:(id)arg1;
- (id)mutableCopyOfMailboxesForQuotaName:(id)arg1;
- (BOOL)mailbox:(id)arg1 usesQuotaName:(id)arg2;

@end

@interface IMAPToDoStoreReconciliationAgent : ToDoStoreReconciliationAgent
{
    LibraryToDoIMAPStore *_agentStore;
}

- (void)dealloc;
- (void)startAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)finishAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)prepareToReconcileForMailboxID:(long long)arg1;
- (void)startToReconcileForMailboxID:(long long)arg1;
- (void)applyReconcilerChangesForMailboxID:(long long)arg1;
- (void)finishReconciliationForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
- (void)readyToReconcile;
- (void)requestReconciliation;

@end

@interface InvocationQueue : NSOperationQueue
{
    NSPort *_runLoopCancelPort;
}

+ (void)cancelAllMonitoredItems;
- (id)initWithMaxConcurrentOperationCount:(int)arg1;
- (void)dealloc;
- (void)finalize;
- (void)addInvocation:(id)arg1;
- (void)runInvocationOnQueueSynchronously:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface _MFInvocationOperation : ThrowingInvocationOperation
{
}

- (void)main;

@end

@interface ISPOnlineAccountSettingsManager : ISPAccountSettingsManager
{
    NSString *_ispAccountsXQuery;
    NSCache *_fetchedISPPlistsByDomain;
}

- (id)init;
- (void)dealloc;
- (id)_persistanceFolderName;
- (BOOL)_shouldVerifyLoadedISPPlist;
- (id)_ispPlistForDomain:(id)arg1;
- (id)_fetchISPDataForDomain:(id)arg1;
- (id)_ispPlistFromXMLDocument:(id)arg1;
- (void)_finalizeISPAccountsSettings:(id)arg1;
- (id)_receivingAccountSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (id)_deliveryAccountsSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (void)emptyCache;

@end

@interface ISPLocalAccountSettingsManager : ISPAccountSettingsManager
{
}

- (id)_persistanceFolderName;

@end

@interface ISPAccountSettingsManager : NSObject
{
    NSMutableDictionary *_ispAccountsSettings;
    NSMutableDictionary *_ispReceivingAccountsSettingsByDomain;
    NSMutableDictionary *_ispDeliveryAccountsSettingsByDomain;
    NSMutableDictionary *_ispDeliveryAccountsSettingsByIdentifier;
}

+ (void)initialize;
+ (id)locallyInstalledSettings;
+ (id)onlineDatabaseSettings;
+ (id)_alwaysPersistedKeys;
+ (BOOL)ispAccountInformationAvailableForDomain:(id)arg1;
+ (id)ispBrandNameForDomain:(id)arg1;
+ (id)ispSupportURLForDomain:(id)arg1;
+ (id)ispSupportURLLabelForDomain:(id)arg1;
+ (id)ispSubscriptionURLForDomain:(id)arg1;
+ (id)ispSubscriptionURLLabelForDomain:(id)arg1;
+ (id)_accountInformationStringForKey:(id)arg1 localizedKey:(id)arg2 domain:(id)arg3;
- (void)dealloc;
- (id)_persistanceFolderName;
- (void)_loadISPAccountsIfNecessary;
- (void)_unloadISPAccounts;
- (void)_loadISPPlistsAtPath:(id)arg1;
- (void)_loadISPPlist:(id)arg1 bundle:(id)arg2 path:(id)arg3;
- (BOOL)_shouldVerifyLoadedISPPlist;
- (id)_persistantAccountSettings:(id)arg1;
- (id)_persistantISPAccountSettings:(id)arg1;
- (BOOL)_persistISPPlist:(id)arg1;
- (void)_getAccoutClass:(Class *)arg1 isReceivingAccount:(char *)arg2 isDeliveryAccount:(char *)arg3 fromAccountSettings:(id)arg4;
- (id)_receivingAccountSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (id)receivingAccountSettingsForDomain:(id)arg1;
- (id)_deliveryAccountsSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (id)deliveryAccountsSettingsForDomain:(id)arg1;
- (void)emptyCache;

@end

@interface iToolsAccount : IMAPAccount
{
    ISS_MMMemberAccount *_dmAccount;
    ISS_MMTransaction *_primaryAddressesTransaction;
    ISS_MMTransaction *_aliasesTransaction;
    NSDate *_aliasesUpdateRequestDate;
}

+ (void)_initMobileMeAccount;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (id)createAccountWithDictionary:(id)arg1;
+ (BOOL)defaultsToSSL;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (void)_primaryUsernameChanged:(id)arg1;
+ (id)primaryUsername;
+ (BOOL)_primaryUsernameExists;
+ (id)iToolsMailHostname;
+ (id)iToolsSMTPHostname;
- (void)dealloc;
- (void)finalize;
- (BOOL)isActive;
- (id)hostname;
- (void)setHostname:(id)arg1;
- (unsigned long)portNumber;
- (void)setPortNumber:(unsigned long)arg1;
- (id)username;
- (void)setUsername:(id)arg1;
- (id)defaultsDictionary;
- (void)setPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)displayName;
- (id)accountTypeString;
- (BOOL)isSyncable;
- (id)supportURLLabel;
- (id)_URLPersistenceHostname;
- (id)rawEmailAddresses;
- (id)emailAddresses;
- (id)_emailAliasesLastUpdateDate;
- (void)_setEmailAliases:(id)arg1;
- (id)deliveryAccount;
- (void)setDeliveryAccount:(id)arg1;
- (id)_replacementDeliveryAccountForDeliveryAccount:(id)arg1;
- (BOOL)_isReallyPrimaryiToolsAccount;
- (BOOL)isPrimaryiToolsAccount;
- (void)setIsPrimaryiToolsAccount:(BOOL)arg1;
- (void)_updateDMAccountAndUpdateAliases:(BOOL)arg1;
- (void)addPrimaryEmailAddresses;
- (void)updateEmailAliases;
- (void)transactionSuccessful:(id)arg1;
- (id)aliasesUpdateRequestDate;
- (void)setAliasesUpdateRequestDate:(id)arg1;
- (id)aliasesTransaction;
- (void)setAliasesTransaction:(id)arg1;
- (id)primaryAddressesTransaction;
- (void)setPrimaryAddressesTransaction:(id)arg1;
- (id)dmAccount;
- (void)setDmAccount:(id)arg1;

@end

@interface JunkMailFilter : NSObject
{
    struct __LSMMap *_map;
    BOOL _isDirty;
    BOOL _isInTraining;
    BOOL _useCleanMap;
    float _lsmThreshold;
    NSString *_mapFilePath;
    NSURL *_mapFileURL;
    NSURL *_oldMapFileURL;
}

+ (void)initialize;
+ (id)sharedInstance;
+ (id)junkFilterUsageCounterKeys;
+ (int)daysUntilTransition;
+ (BOOL)shouldUpdateTrainingDebt;
+ (void)incrementJunkMailTrainingDebtBy:(int)arg1;
+ (void)incrementJunkMailTrainingCreditBy:(int)arg1;
+ (void)resetJunkMailTrainingBalance;
+ (void)resetJunkMailUsageCounters;
- (struct __LSMMap *)map;
- (void)setMap:(struct __LSMMap *)arg1;
- (void)dealloc;
- (unsigned int)evaluatedMessageCount;
- (unsigned int)evaluatedAsJunkMessageCount;
- (unsigned int)manuallyMarkedAsJunkMessageCount;
- (unsigned int)manuallyMarkedAsNotJunkMessageCount;
- (void)reset;
- (void)saveTraining;
- (int)junkMailTrainingBalance;
- (int)junkMailTrainingDebt;
- (int)junkMailTrainingCredit;
- (BOOL)isEnabled;
- (id)state;
- (BOOL)gatherUsageCounts;
- (id)usageCounter;
- (int)junkMailLevelForMessage:(id)arg1;
- (int)junkMailLevelForMessage:(id)arg1 junkRecorder:(id)arg2;
- (id)trainOnMessages:(id)arg1 junkMailLevel:(int)arg2;
- (void)userDidReplyToMessage:(id)arg1;
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)arg1;
- (void)saveTrainingWithDelay;
- (BOOL)isInTraining;
- (void)setIsInTraining:(BOOL)arg1;
- (float)lsmThreshold;
- (void)setLsmThreshold:(float)arg1;
- (id)mapFilePath;
- (void)setMapFilePath:(id)arg1;
- (id)mapFileURL;
- (void)setMapFileURL:(id)arg1;
- (id)oldMapFileURL;
- (void)setOldMapFileURL:(id)arg1;
- (BOOL)useCleanMap;
- (void)setUseCleanMap:(BOOL)arg1;

@end

@interface JunkRecorder : NSObject
{
    BOOL _isShort;
    BOOL _isSigned;
    int _imageCount;
    int _characterCount;
    float _imageToTextRatio;
    NSMutableDictionary *_imageInfos;
    float _lsmScore;
}

- (id)init;
- (void)dealloc;
- (id)description;
- (float)lsmScore;
- (void)setLsmScore:(float)arg1;
- (BOOL)isShort;
- (void)setIsShort:(BOOL)arg1;
- (BOOL)isSigned;
- (void)setIsSigned:(BOOL)arg1;
- (id)imageInfos;
- (void)setImageInfos:(id)arg1;
- (float)imageToTextRatio;
- (void)setImageToTextRatio:(float)arg1;
- (int)characterCount;
- (void)setCharacterCount:(int)arg1;
- (int)imageCount;
- (void)setImageCount:(int)arg1;

@end

@interface ImageJunkMetadata : NSObject
{
    int _type;
    struct _NSSize _size;
    unsigned int _frameCount;
    unsigned int _pixelCount;
    unsigned int _byteCount;
    float _density;
    BOOL _isAnimated;
}

+ (id)stringForImageType:(int)arg1;
+ (id)lsmMarkerForImageSizeCategory:(int)arg1;
+ (id)lsmMarkerForImageDensityCategory:(int)arg1;
- (id)initWithImage:(id)arg1 name:(id)arg2 type:(int)arg3;
- (void)dealloc;
- (void)computeDensity;
- (void)setByteCount:(unsigned int)arg1;
- (void)setPixelCount:(unsigned int)arg1;
- (int)sizeCategory;
- (int)densityCategory;
- (id)description;
- (unsigned int)frameCount;
- (void)setFrameCount:(unsigned int)arg1;
- (BOOL)isAnimated;
- (void)setIsAnimated:(BOOL)arg1;
- (float)density;
- (void)setDensity:(float)arg1;
- (unsigned int)byteCount;
- (unsigned int)pixelCount;
- (struct _NSSize)size;
- (void)setSize:(struct _NSSize)arg1;
- (int)type;
- (void)setType:(int)arg1;

@end

@interface ProgressHandlerMonitorContext : NSObject
{
    id <QueryProgressMonitor> _progressMonitor;
    ActivityMonitor *_activityMonitor;
}

- (BOOL)shouldCancel;
- (id)activityMonitor;
- (void)setActivityMonitor:(id)arg1;
- (id)progressMonitor;
- (void)setProgressMonitor:(id)arg1;

@end

@interface MessageDetails : NSObject
{
    long long libraryID;
    unsigned int messageFlags;
    unsigned int uid;
    unsigned int encoding;
    BOOL isInvalid;
}

+ (id)searchDetails:(id)arg1 forUid:(unsigned long)arg2 skippingUid:(unsigned long)arg3;
- (id)description;
- (id)init;
- (BOOL)isInvalid;
- (void)setIsInvalid:(BOOL)arg1;
- (unsigned long)encoding;
- (void)setEncoding:(unsigned long)arg1;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (unsigned long)messageFlags;
- (void)setMessageFlags:(unsigned long)arg1;
- (long long)libraryID;
- (void)setLibraryID:(long long)arg1;

@end

@interface DataCollector : NSObject
{
    NSString *_path;
    NSString *_tmpPath;
    LibraryMessage *_message;
    NSString *_part;
    NSFileHandle *_fileHandle;
    unsigned int _length;
    NSDictionary *_plist;
    BOOL _isEmpty;
}

- (id)initWithMessage:(id)arg1 isPartial:(BOOL)arg2 part:(id)arg3;
- (void)appendData:(id)arg1;
- (void)setData:(id)arg1;
- (void)done;
- (void)dealloc;
- (void)finalize;

@end

@interface MatadorResultCollector : NSObject
{
    MessageCriterion *criterion;
    MessageCriterion *resultParent;
    NSString *expression;
    id <MessageConsumer> target;
    struct __MDQuery *query;
    NSMutableSet *seenItems;
    unsigned int options;
}

- (id)initWithCriterion:(id)arg1 resultParentCriterion:(id)arg2 target:(id)arg3 query:(struct __MDQuery *)arg4 expression:(id)arg5;
- (struct __MDQuery *)query;
- (void)setQuery:(struct __MDQuery *)arg1;
- (void)dealloc;
- (void)finalize;
- (unsigned int)options;
- (void)setOptions:(unsigned int)arg1;
- (id)seenItems;
- (void)setSeenItems:(id)arg1;
- (id)target;
- (void)setTarget:(id)arg1;
- (id)expression;
- (void)setExpression:(id)arg1;
- (id)resultParent;
- (void)setResultParent:(id)arg1;
- (id)criterion;
- (void)setCriterion:(id)arg1;

@end

@interface MessageCollector : NSObject <MessageConsumer>
{
    NSMutableArray *messages;
    int accessNumber;
    BOOL didCancel;
}

- (id)init;
- (void)dealloc;
- (id)messages;
- (void)newMessagesAvailable:(id)arg1;
- (void)newMessagesAvailable:(id)arg1 ranks:(id)arg2;
- (BOOL)shouldCancel;
- (BOOL)didCancel;

@end

@interface MFSQLiteException : NSException
{
}

@end

@interface SqliteHandle : NSObject
{
    struct sqlite3 *_db;
    double _busyTimer;
    NSArray *_searchStringArray;
}

+ (id)createHandleIsWriter:(BOOL)arg1;
- (int)close;
- (void)dealloc;
- (id)searchStringArray;
- (void)setSearchStringArray:(id)arg1;
- (double)busyTimer;
- (void)setBusyTimer:(double)arg1;
- (struct sqlite3 *)db;
- (void)setDb:(struct sqlite3 *)arg1;

@end

@interface Library : NSObject <LibraryInterface>
{
}

+ (id)sharedInstance;
+ (void)commitMessage:(id)arg1 immediately:(BOOL)arg2;
+ (id)backingStoreJournalDirectory;
+ (id)backingStoreJournalPath;
+ (BOOL)removeBackingStoreUpdateJournal;
+ (BOOL)updateBackingStoreUpdateJournal;
+ (void)_mergeRestoreMessageLibraryIDsToUpdate:(id)arg1;
+ (void)restoreBackingStoreUpdateJournalIfNeeded;
+ (void)flagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3 newFlagsByMessage:(id)arg4;
+ (void)flagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3 newFlagsByMessage:(id)arg4 updateUnreadCount:(BOOL)arg5;
+ (void)_setCommitTimer:(id)arg1;
+ (void)_setUpdateEmlxTimer:(id)arg1;
+ (void)scheduleCommit;
+ (void)unScheduleCommit;
+ (void)scheduleMessageFileUpdate;
+ (void)unScheduleMessageFileUpdate;
+ (void)synchronouslyUpdateMessageFiles;
+ (void)commitSynchronously;
+ (void)commitMessagesInBackground;
+ (void)updateMessageFilesInBackground;
+ (void)waitForCommitsToFinish;
+ (void)setFlags:(unsigned long)arg1 mask:(unsigned long)arg2 forMessage:(id)arg3;
+ (void)_setFlags:(id)arg1 mask:(id)arg2 forMessage:(id)arg3;
+ (void)_flushChangedFlags;
+ (void)setFlagsForMessages:(id)arg1 mask:(unsigned long)arg2;
+ (void)setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
+ (void)setFlagsAndColorForMessages:(id)arg1;
+ (void)updateEncodingForMessage:(id)arg1;
+ (void)updateSize:(id)arg1 forMessage:(id)arg2;
+ (BOOL)initializeDatabase:(struct sqlite3 *)arg1;
+ (void)initialize;
+ (BOOL)setupLibrary;
+ (void)_mailboxWillBeInvalidated:(id)arg1;
+ (void)_mailboxWasRenamed:(id)arg1;
+ (void)_mailAccountsDidChange:(id)arg1;
+ (id)plistDataForMessage:(id)arg1 subject:(id)arg2 sender:(id)arg3 to:(id)arg4 dateSent:(id)arg5 remoteID:(id)arg6 originalMailbox:(id)arg7 flags:(unsigned long long)arg8 mergeWithDictionary:(id)arg9;
+ (BOOL)_writeEmlxFile:(id)arg1 forMessage:(id)arg2 withEmlxData:(id)arg3 error:(id *)arg4;
+ (BOOL)_writeEmlxFile:(id)arg1 forMessage:(id)arg2 withBodyData:(id)arg3 plistData:(id)arg4 error:(id *)arg5;
+ (void)touchDirectoryForMailbox:(id)arg1;
+ (BOOL)isRemoteStoreAccount:(id)arg1;
+ (BOOL)isLocalAccount:(id)arg1;
+ (BOOL)isLibraryMessage:(id)arg1;
+ (BOOL)canUseEmlxFileWhenCopyingMessage:(id)arg1 fromAccount:(id)arg2 toAccount:(id)arg3;
+ (void)cleanupTablesReferencingMessageID:(long long)arg1 inDatabase:(struct sqlite3 *)arg2;
+ (id)insertOrUpdateMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 newDocumentIDs:(id)arg7 setFlags:(unsigned long long)arg8 clearFlags:(unsigned long long)arg9 messageFlagsForMessages:(id)arg10 copyFiles:(BOOL)arg11 progressDelegate:(id)arg12 updateRowIDs:(id)arg13 error:(id *)arg14;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 setFlags:(unsigned long long)arg7 clearFlags:(unsigned long long)arg8 messageFlagsForMessages:(id)arg9 copyFiles:(BOOL)arg10 error:(id *)arg11;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 error:(id *)arg6;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 oldMessagesByNewMessage:(id)arg4 error:(id *)arg5;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 progressDelegate:(id)arg3 error:(id *)arg4;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 error:(id *)arg3;
+ (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 messageFlagsForMessages:(id)arg7 createNewCacheFiles:(BOOL)arg8 error:(id *)arg9;
+ (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 createNewCacheFiles:(BOOL)arg7 error:(id *)arg8;
+ (void)setAttachmentNames:(id)arg1 forMessage:(id)arg2;
+ (void)setThreadPriority:(int)arg1;
+ (int)threadPriority;
+ (int)updateSequenceNumber;
+ (int)accessSequenceNumber;
+ (void)invalidateActiveMailboxesCaches;
+ (void)_disableActiveMailboxesCacheForTesting;
+ (id)_updatedActiveMailboxes:(id)arg1;
+ (void)_updateActiveMailboxes;
+ (BOOL)_isActiveMailboxID:(long long)arg1;
+ (id)_updatedActiveMailboxesClause:(id)arg1;
+ (void)_updateActiveMailboxesClause;
+ (id)_updatedActiveNoteMailboxesClause:(id)arg1;
+ (void)_updateActiveNoteMailboxesClause;
+ (id)activeNoteMailboxesClause;
+ (void)sendMessagesMatchingQuery:(const char *)arg1 to:(id)arg2 options:(unsigned int)arg3;
+ (id)messagesMatchingQuery:(const char *)arg1 options:(unsigned int)arg2;
+ (id)messagesWhere:(id)arg1 sortedBy:(id)arg2 options:(unsigned int)arg3;
+ (void)sendMessagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 to:(id)arg5 options:(unsigned int)arg6;
+ (id)messagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 options:(unsigned int)arg5;
+ (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(int)arg2;
+ (id)unreadMessagesForMailbox:(id)arg1;
+ (void)gatherCountsForMailbox:(id)arg1 totalCount:(unsigned long *)arg2 unreadCount:(unsigned long *)arg3 deletedCount:(unsigned long *)arg4 totalSize:(unsigned long long *)arg5;
+ (unsigned int)unreadCountForMessageType:(BOOL)arg1;
+ (unsigned int)unreadCountForMailbox:(id)arg1;
+ (unsigned int)deletedCountForMailbox:(id)arg1;
+ (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2 options:(unsigned int)arg3;
+ (long long)libraryIDForRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
+ (unsigned long)maximumRemoteIDForMailbox:(id)arg1;
+ (id)getDetailsForMessagesWithRemoteIDStrings:(id)arg1 fromMailbox:(id)arg2;
+ (id)getDetailsForMessagesWithRemoteIDs:(id)arg1 fromMailbox:(id)arg2;
+ (id)getDetailsForMessagesWithQuery:(char *)arg1 contiguous:(BOOL)arg2 firstRemoteID:(unsigned int)arg3 lastRemoteID:(unsigned int)arg4 fromMailbox:(id)arg5;
+ (void)setStoresForMessages:(id)arg1;
+ (void)setStoreForMessage:(id)arg1 knownStores:(id)arg2;
+ (id)messageWithMessageID:(id)arg1;
+ (id)messagesWithMessageIDHeader:(id)arg1;
+ (id)messageWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
+ (id)messageWithLibraryID:(long long)arg1;
+ (id)messagesInSameThreadAsMessages:(id)arg1 seenMessageIDs:(id)arg2 options:(unsigned int)arg3 db:(struct sqlite3 *)arg4 uniquer:(id)arg5;
+ (id)messagesInSameThreadAsMessages:(id)arg1 options:(unsigned int)arg2;
+ (id)firstReplyToMessage:(id)arg1;
+ (BOOL)messageHasRelatedNonJunkMessages:(id)arg1;
+ (unsigned int)unsignedCountForQuery:(id)arg1 monitor:(id)arg2;
+ (BOOL)boolForQuery:(id)arg1;
+ (id)referencesForLibraryID:(long long)arg1;
+ (BOOL)messageHasToDos:(id)arg1;
+ (id)copyMailboxURLToRowIDMap;
+ (void)mailboxesDidChange;
+ (id)urlForMailboxID:(long long)arg1;
+ (id)mailboxUidForMessage:(id)arg1;
+ (id)remoteStoreForMessage:(id)arg1;
+ (id)accountForMessage:(id)arg1;
+ (id)mailboxNameForMessage:(id)arg1;
+ (BOOL)_loadSecondaryMetadataForMessage:(id)arg1 fromDB:(struct sqlite3 *)arg2;
+ (BOOL)loadSecondaryMetadataForMessage:(id)arg1;
+ (void)reloadMessage:(id)arg1;
+ (void)updateFileForMessage:(id)arg1;
+ (BOOL)shouldCancel;
+ (void)messagesWereCompacted:(id)arg1 mailboxes:(id)arg2;
+ (void)removeMessages:(id)arg1;
+ (void)removeMessages:(id)arg1 cleanUpAfter:(BOOL)arg2;
+ (void)compactMailbox:(id)arg1;
+ (BOOL)renameMailboxes:(id)arg1 to:(id)arg2;
+ (void)deleteMailboxes:(id)arg1;
+ (void)deleteMailboxes:(id)arg1 forRebuild:(BOOL)arg2;
+ (id)messagesWithMessageID:(id)arg1 inMailbox:(id)arg2;
+ (id)lastMessageWithMessageID:(id)arg1 inMailbox:(id)arg2;
+ (void)addFeed:(id)arg1 forMailbox:(id)arg2;
+ (void)deleteFeedForMailbox:(id)arg1;
+ (id)feedURLStringForMailbox:(id)arg1;
+ (id)mailboxURLStringForFeed:(id)arg1;
+ (id)unflaggedArticlesCreatedBeforeDate:(id)arg1;
+ (id)articlesByRemoteIDForRemoteIDs:(id)arg1;
+ (id)noteWithDocumentID:(id)arg1;
+ (void)setLastReceivedArticlesDate:(id)arg1;
+ (id)lastReceivedArticlesDate;
+ (void)removeRemoteIDsFromRSSArticlesInMessages:(id)arg1;
+ (BOOL)_EWSFolderExistsForMailbox:(id)arg1 errorString:(id)arg2;
+ (void)_addEWSProperty:(char *)arg1 value:(id)arg2 forMailbox:(id)arg3 errorString:(id)arg4;
+ (id)_EWSProperty:(char *)arg1 forMailbox:(id)arg2 errorString:(id)arg3;
+ (void)setEWSFolderId:(id)arg1 forMailbox:(id)arg2;
+ (id)EWSFolderIdForMailbox:(id)arg1;
+ (id)EWSFolderIdsByURLForMailboxes:(id)arg1;
+ (void)setEWSSyncState:(id)arg1 forMailbox:(id)arg2;
+ (id)EWSSyncStateForMailbox:(id)arg1;
+ (void)updateEWSOfflineIdsToRealIds:(id)arg1;
+ (id)dataPathForMessage:(id)arg1 type:(int)arg2;
+ (id)dataPathForMessage:(id)arg1;
+ (id)attachmentsDirectoryForLibraryID:(long long)arg1 mailboxID:(long long)arg2;
+ (id)realDataPathForMessage:(id)arg1;
+ (id)messageWithDataPath:(id)arg1;
+ (id)existingDataPathForMessage:(id)arg1;
+ (void)appendData:(id)arg1 forMessage:(id)arg2 part:(id)arg3;
+ (void)setData:(id)arg1 forMessage:(id)arg2 isPartial:(BOOL)arg3;
+ (id)bodyDataAtPath:(id)arg1 headerData:(id *)arg2;
+ (id)headerDataForMessage:(id)arg1;
+ (id)bodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
+ (id)bodyDataForMessage:(id)arg1;
+ (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
+ (id)fullBodyDataForMessage:(id)arg1;
+ (id)dataForMimePart:(id)arg1;
+ (BOOL)isMessageContentsLocallyAvailable:(id)arg1;
+ (id)_messageDataAtPath:(id)arg1;
+ (id)fullMessageDataForMessage:(id)arg1;
+ (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
+ (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
+ (void)markMessageAsViewed:(id)arg1;
+ (id)queryForCriterion:(id)arg1 options:(unsigned int)arg2 baseTable:(unsigned int)arg3 isSubquery:(BOOL)arg4;
+ (id)queryForCriterion:(id)arg1 options:(unsigned int)arg2 baseTable:(unsigned int)arg3;
+ (id)queryForCriterion:(id)arg1 options:(unsigned int)arg2;
+ (void)shouldCancelMDQuery:(struct __MDQuery *)arg1;
+ (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3;
+ (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2;
+ (id)_queryForCountCriterion:(id)arg1;
+ (unsigned int)countForCriterion:(id)arg1 monitor:(id)arg2;
+ (unsigned int)countForCriterion:(id)arg1;
+ (BOOL)boolForCriterion:(id)arg1;
+ (id)criterionExpressionStringForStartLibraryID:(long long)arg1 count:(unsigned int)arg2;
+ (id)filterContiguousMessages:(id)arg1 forCriterion:(id)arg2 options:(unsigned int)arg3;
+ (BOOL)rebuildMailbox:(id)arg1;
+ (BOOL)importMailbox:(id)arg1;
+ (void)setLibraryIsImporting:(BOOL)arg1;
+ (BOOL)libraryIsImporting;
+ (BOOL)importEverythingIncludingDisabledAccounts:(BOOL)arg1;
+ (void)_upgradeMessageDirectoriesSynchronously;
+ (void)upgradeMessageDirectoriesIfNeeded;
+ (void)takeAccountsOnlineAllAccounts:(BOOL)arg1;
+ (BOOL)fileExists;
+ (void)dispose;
+ (int)_libraryStatusCanWrite:(BOOL)arg1;
+ (int)libraryStatus;
+ (BOOL)libraryStatusIsAvailable;
+ (BOOL)isInitialized;
+ (void)setInitialized;
+ (void)setCurrentMailbox:(id)arg1;
+ (id)currentMailbox;
+ (void)incrementRunningIndexOfCurrentMessage;
+ (unsigned int)runningIndexOfCurrentMessage;
+ (void)setTotalNumberOfMessages:(unsigned int)arg1;
+ (unsigned int)totalNumberOfMessages;
+ (void)cleanOldDatabases;
+ (void)prepareToReImportMessages;
+ (id)calendarEventForMessageID:(long long)arg1;
+ (BOOL)addCalendarEvent:(id)arg1 toMessage:(id)arg2;
+ (BOOL)updateCalendarEvent:(id)arg1 forMessage:(id)arg2;
+ (BOOL)deleteEventForMessage:(id)arg1;
+ (id)todosForMessage:(id)arg1;
+ (id)messageForToDo:(id)arg1;
+ (void)todosDidChangeForMessages:(id)arg1 oldToDosByMessage:(id)arg2 newToDosByMessage:(id)arg3;
+ (BOOL)addToDo:(id)arg1;
+ (int)insertToDoAlarms:(id)arg1 withToDoID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
+ (int)insertNotesInToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)todoWithLibraryID:(long long)arg1;
+ (id)todoWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
+ (id)todoWithID:(id)arg1;
+ (id)todoWithID:(id)arg1 remoteID:(id)arg2;
+ (id)todoWithID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
+ (id)libraryToDoWithRemoteID:(id)arg1 inMailbox:(long long)arg2;
+ (id)lastToDoWithID:(id)arg1 inMailbox:(id)arg2;
+ (id)alarmsForToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (BOOL)updateToDo:(id)arg1;
+ (int)setAlarmsForToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (int)updateNotesInToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (BOOL)deleteToDo:(id)arg1;
+ (int)deleteNotesInToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (int)addToDoToDeletedLog:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (int)removeToDoFromDeletedLog:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (BOOL)addToDos:(id)arg1;
+ (BOOL)deleteToDos:(id)arg1;
+ (BOOL)updateToDos:(id)arg1;
+ (id)allToDos;
+ (id)allToDosInMailboxes:(id)arg1;
+ (id)allToDosWithoutMailboxes;
+ (id)todoIDsMatchingCriterion:(id)arg1;
+ (id)listOfToDoIDsInCalendarWithID:(id)arg1;
+ (id)allToDosForMailboxID:(long long)arg1;
+ (id)allToDosForDocumentID:(id)arg1;
+ (BOOL)updateToDo:(id)arg1 toRemoteID:(id)arg2;
+ (id)searchDataForAllToDosInMailboxID:(long long)arg1;
+ (long long)mailboxIDForMailboxUid:(id)arg1 loadIfNotPresent:(BOOL)arg2;
+ (id)mailboxUidForMailboxID:(long long)arg1 forceCreation:(BOOL)arg2;
+ (id)_mailboxUidForMailboxID:(long long)arg1 forceCreation:(BOOL)arg2;
+ (long long)mailboxIDForMailboxUid:(id)arg1;
+ (long long)cachedMailboxIDForMailboxUid:(id)arg1;
+ (void)_setMailboxIDForMailboxUid:(id)arg1 to:(id)arg2;
+ (void)setMailboxIDForMailboxUid:(id)arg1 to:(id)arg2;
+ (long long)toDoMailboxIdForMailAccountURLString:(id)arg1;
+ (long long)toDoMailboxIdForMailAccount:(id)arg1;
+ (long long)toDoMailboxIDForIncompleteMailAccount:(id)arg1;
+ (id)allToDoIDsAndRemoteIDsForMailboxID:(long long)arg1;
+ (BOOL)addCalendars:(id)arg1;
+ (BOOL)updateCalendars:(id)arg1;
+ (BOOL)deleteCalendars:(id)arg1;
+ (id)allToDoCalendars;
+ (BOOL)hasToDoWithIDBeenDeleted:(id)arg1;
+ (id)deletedToDoIDsForDocumentID:(id)arg1;
+ (id)getDetailsForToDosWithRemoteIDInRange:(struct _NSRange)arg1 fromMailbox:(id)arg2;
+ (id)sqlSanitizeNSString:(id)arg1;
+ (void)executeBlock:(id)arg1 isWriter:(void)arg2 useTransaction:(BOOL)arg3 isPrivileged:(BOOL)arg4;
+ (void)executeWriteBlockInDatabase:(id)arg1;
+ (void)executeReadBlockInDatabase:(id)arg1;
+ (id)_checkOutDBHandleForWriting:(BOOL)arg1 isPrivileged:(BOOL)arg2;
+ (void)_checkInDBHandle:(id)arg1 forWriting:(BOOL)arg2;
+ (void)flushCachedDatabases;
+ (id)createUnsignedForQuery:(id)arg1 db:(struct sqlite3 *)arg2;
+ (void)didCommit:(struct sqlite3 *)arg1;

@end

@interface ToDoIDSearchData : NSObject
{
    long long _todoRowID;
    NSString *_todoID;
}

- (void)dealloc;
- (long long)todoRowID;
- (void)setTodoRowID:(long long)arg1;
- (id)todoID;
- (void)setTodoID:(id)arg1;

@end

@interface LibraryCalendarEvent : NSObject
{
    NSString *_originalReceivedAccountURLString;
    NSString *_associatedCalendarItemIdString;
    NSString *_location;
    NSString *_uid;
    NSDate *_startDate;
    NSDate *_endDate;
    BOOL _isAllDayEvent;
    BOOL _isOutOfDate;
    BOOL _hasBeenProcessed;
    int _responseStatus;
}

- (void)dealloc;
- (int)responseStatus;
- (void)setResponseStatus:(int)arg1;
- (BOOL)hasBeenProcessed;
- (void)setHasBeenProcessed:(BOOL)arg1;
- (BOOL)isOutOfDate;
- (void)setIsOutOfDate:(BOOL)arg1;
- (BOOL)isAllDayEvent;
- (void)setIsAllDayEvent:(BOOL)arg1;
- (id)endDate;
- (void)setEndDate:(id)arg1;
- (id)startDate;
- (void)setStartDate:(id)arg1;
- (id)uid;
- (void)setUid:(id)arg1;
- (id)location;
- (void)setLocation:(id)arg1;
- (id)associatedCalendarItemIdString;
- (void)setAssociatedCalendarItemIdString:(id)arg1;
- (id)originalReceivedAccountURLString;
- (void)setOriginalReceivedAccountURLString:(id)arg1;

@end

@interface LibraryIMAPMessage : LibraryMessage
{
    MessageHeaders *_headers;
}

- (void)dealloc;
- (id)headers;
- (void)setHeaders:(id)arg1;

@end

@interface LibraryIMAPStore : RemoteStore <IMAPMailboxDelegate>
{
    BOOL _supportsCustomPermanentFlags;
    BOOL _readyToDealloc;
    BOOL _isOpenedByUser;
    BOOL __aboutToDealloc;
    NSString *_mailboxName;
    IMAPMailbox *_IMAPMailbox;
    id _cachedDirLock;
    NSSet *_cachedDirContents;
    NSDate *_cachedDirModDate;
    double _lastNewMailCheckAllowedTime;
    IMAPDownloadCache *_downloadCache;
    IMAPCommandPipeline *_fetchPipeline;
    IMAPMailboxSyncEngine *_syncEngine;
    NSLock *_copyLock;
    NSMutableArray *_pendingCompacts;
    NSMutableDictionary *_recentFlagChangesByMessageID;
    NSMutableArray *_recentlyDeletedMessageIDs;
    unsigned int _totalCount;
}

+ (id)_createDataFromMimePart:(id)arg1 threshold:(unsigned int)arg2;
- (id)_IMAPMailbox;
- (id)_copyMailboxSyncEngineCreateIfNecessary:(BOOL)arg1;
- (id)_copyMailboxSyncEngineCreateIfNecessary:(BOOL)arg1 setupGatewayIfNecessary:(BOOL)arg2;
- (BOOL)_isRebuildingOrSynchronizing;
- (BOOL)_isSynchronized;
- (unsigned int)_permanentFlags;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;
- (void)dealloc;
- (void)finalize;
- (id)messagesForImporter;
- (void)openAsynchronously;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1 withOptions:(unsigned int)arg2;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (void)openSynchronouslyWithoutUserInteraction;
- (id)willDealloc;
- (BOOL)setStoreState:(int)arg1 fromState:(int)arg2;
- (void)_invalidate;
- (BOOL)_shouldCallCompactWhenClosing;
- (void)_fetchForCheckingNewMail:(BOOL)arg1;
- (void)checkNewMail;
- (void)fetchSynchronously;
- (void)fetchSynchronouslyForKnownChanges;
- (void)cleanupSynchronously;
- (void)doRoutineCleanup;
- (BOOL)canRebuild;
- (void)removeAllLocalMessages;
- (id)mailboxName;
- (BOOL)canCompact;
- (void)doCompact;
- (void)_processPendingCompacts;
- (void)compactMessages:(id)arg1;
- (void)compactMessagesFromSyncEngine:(id)arg1;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(BOOL)arg2;
- (void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(BOOL)arg2;
- (void)undeleteMessagesWithRemoteIDs:(id)arg1;
- (BOOL)allowsAppend;
- (BOOL)allowsOverwrite;
- (id)_createFlagsByMessageFromFlags:(id)arg1 messages:(id)arg2;
- (void)_copyFlagsFromMessages:(id)arg1 flagsByMessage:(id)arg2 toMessagesWithUids:(id)arg3 withGateway:(id)arg4 usedFlags:(id)arg5;
- (BOOL)_copyMessagesByID:(id)arg1 toStore:(id)arg2 settingFlags:(id)arg3 newMessages:(id)arg4 error:(id *)arg5;
- (int)_appendToServerWithContext:(CDStruct_5f9072cd *)arg1 error:(id *)arg2;
- (id)_uidSearchForMessageIds:(id)arg1 destinationUidNext:(unsigned long)arg2 withGateway:(id)arg3;
- (int)undoAppendOfMessageIDs:(id)arg1;
- (id)createDictionaryForLocalFlags:(unsigned long)arg1 serverFlags:(unsigned long)arg2 existingDictionary:(id)arg3;
- (void)_synchronouslyStoreFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)recentFlagChangesForMessageID:(id)arg1;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2 updatingServer:(BOOL)arg3;
- (id)setFlagsFromDictionary:(id)arg1 forToDos:(id)arg2;
- (void)_internalSetFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (BOOL)setPreferredEncoding:(unsigned long)arg1 forMessage:(id)arg2;
- (id)_dataForMessage:(id)arg1 readHeadersOnly:(BOOL)arg2;
- (id)_fetchDataForMimePart:(id)arg1 keepInMemory:(BOOL)arg2 writeToDisk:(BOOL)arg3;
- (id)dataForMimePart:(id)arg1;
- (id)_lockedGetCacheDirectoryContents;
- (id)cacheDirectoryContents;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)colorForMessage:(id)arg1;
- (id)messageForMessageID:(id)arg1;
- (unsigned long)maximumRemoteIDForMailbox:(id)arg1;
- (id)getDetailsForMessagesWithRemoteIDs:(id)arg1 fromMailbox:(id)arg2;
- (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
- (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
- (void)compactMailbox:(id)arg1;
- (id)messagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 options:(unsigned int)arg5;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 messageFlagsForMessages:(id)arg7 createNewCacheFiles:(BOOL)arg8;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 createNewCacheFiles:(BOOL)arg7;
- (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
- (unsigned int)unreadCountForMailbox:(id)arg1;
- (unsigned int)deletedCountForMailbox:(id)arg1;
- (void)setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (void)setFlagsForMessages:(id)arg1 mask:(unsigned long)arg2;
- (BOOL)canSetMessageColors;
- (BOOL)messageHasBeenDeleted:(id)arg1;
- (id)libraryToDoWithRemoteID:(long long)arg1 inMailbox:(long long)arg2;
- (BOOL)supportsReconciliation;
- (void)reconcile;
- (void)abandonProcessingStore;
- (void)setStoreFree;
- (BOOL)isReconciling;
- (void)waitUntilStoreIsFree;
- (void)willRemoveMessages;
- (void)didRemoveMessages;
- (id)_gatewayCreateIfNeeded:(BOOL)arg1 options:(int)arg2;
- (id)_gateway;
- (void)startSynchronization;
- (id)_uidIndexSetForMessages:(id)arg1;
- (BOOL)_timeSinceLastNewMailCheckExceedsMinWaitTimeBeforeManualIdleRefresh;
- (void)_updateLastNewMailCheckAllowedTime;
- (void)_retrieveNewMessagesForCheckingNewMail:(BOOL)arg1;
- (void)forceResync;
- (id)_preferredOrderForFetchingMessageBodies:(id)arg1;
- (BOOL)hasValidCacheFileForMessage:(id)arg1;
- (BOOL)hasValidCacheFileForUid:(unsigned long)arg1;
- (id)copyOfOldCachedMessagesContentsForUid:(unsigned long)arg1;
- (void)setUid:(unsigned long)arg1 forMessageWithTemporaryUid:(unsigned long)arg2;
- (id)copyOfAllMessagesSortedByUidWithOptions:(unsigned int)arg1;
- (id)deletedMessages;
- (void)writeUpdatedMessageDataToDisk;
- (void)_countUnreadAndDeletedInMessages:(id)arg1;
- (unsigned int)totalCount;
- (unsigned int)indexOfMessage:(id)arg1;
- (id)sortOrder;
- (BOOL)isSortedAscending;
- (void)propagateMessagesWereAdded:(id)arg1 forIncrementalLoading:(BOOL)arg2;
- (void)messagesWereAdded:(id)arg1 forIncrementalLoading:(BOOL)arg2;
- (void)updateUserInfoToLatestValues;
- (void)_setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (void)_setFlagsForMessages:(id)arg1 mask:(unsigned long)arg2;
- (id)fetchPipeline;
- (id)downloadCache;
- (id)messagesBeingRouted;
- (id)imapAccount;
- (id)offlineCache;
- (id)offlineCacheIfOffline;
- (void)updateCountFromMailbox:(id)arg1;
- (void)processResponsesFromMailbox:(id)arg1;
- (void)updateUidValidityFromMailbox:(id)arg1;
- (void)_updateCountFromMailbox:(id)arg1;
- (void)_processResponsesFromMailbox:(id)arg1;
- (void)_updateUidValidityFromMailbox:(id)arg1;
- (void)updateSelectedGatewayFromMailbox:(id)arg1;
- (BOOL)isOpenedByUser;
- (void)setIsOpenedByUser:(BOOL)arg1;

@end

@interface LibraryMessageAssociations : NSObject
{
    NSArray *_todos;
    Message *_note;
    MFUUID *_noteDocumentID;
    LibraryCalendarEvent *_calendarEvent;
}

- (void)dealloc;
- (id)calendarEvent;
- (void)setCalendarEvent:(id)arg1;
- (id)todos;
- (void)setTodos:(id)arg1;
- (id)noteDocumentID;
- (void)setNoteDocumentID:(id)arg1;
- (id)note;
- (void)setNote:(id)arg1;

@end

@interface LibraryMessage : Message <LibraryObject>
{
    long long _libraryID;
    long long _mailboxID;
    long long _originalMailboxID;
    NSString *_remoteID;
    NSArray *_references;
    unsigned int _size;
    NSString *_messageID;
    LibraryMessageAssociations *_associations;
    unsigned int _options;
    unsigned int _uid;
    CDStruct_3292de3e _remoteFlags;
    BOOL _isBeingChanged;
    BOOL _hasSetTodos;
    BOOL _hasSetCalendarEvent;
}

+ (void)initialize;
+ (id)residentMessages;
+ (id)_addMessageToResidentMessages:(id)arg1;
+ (void)_removeMessageFromResidentMessagesWithLibraryID:(long long)arg1;
+ (id)_residentMessageForLibraryID:(long long)arg1;
+ (id)messageWithLibraryID:(long long)arg1;
- (id)initWithLibraryID:(long long)arg1;
- (void)release;
- (id)messageID;
- (id)persistentID;
- (long long)_mf_LibraryMessageLibraryID;
- (id)documentID;
- (void)_createAssociationsIfNeeded;
- (id)noteDocumentID;
- (void)setNoteDocumentID:(id)arg1;
- (id)originalMailboxURL;
- (BOOL)type;
- (id)references;
- (BOOL)setReferences:(id)arg1;
- (id)note;
- (void)setNote:(id)arg1;
- (id)todos;
- (void)setTodos:(id)arg1;
- (void)invalidateTodos;
- (id)calendarEvent;
- (void)setCalendarEvent:(id)arg1;
- (id)subject;
- (id)sender;
- (id)to;
- (id)messageIDHeaderDigest;
- (id)inReplyToHeaderDigest;
- (unsigned int)messageSize;
- (void)setMessageSize:(unsigned int)arg1;
- (id)_unlockedMessageStore;
- (id)messageStore;
- (void)setMessageStore:(id)arg1;
- (id)mailbox;
- (void)_updateUID;
- (void)_setRemoteID:(id)arg1;
- (void)setRemoteID:(id)arg1;
- (id)remoteID;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (void)setIMAPFlags:(CDStruct_3292de3e)arg1;
- (CDStruct_3292de3e)remoteFlags;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)arg1;
- (BOOL)isMessageContentsLocallyAvailable;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)arg1;
- (void)setPreferredEncoding:(unsigned long)arg1;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)arg1;
- (id)mailboxName;
- (void)setMessageFlagsWithoutCommitting:(unsigned long)arg1 mask:(unsigned long)arg2;
- (void)setMessageFlags:(unsigned long)arg1 mask:(unsigned long)arg2;
- (void)setFlags:(unsigned long long)arg1;
- (void)setColorHasBeenEvaluated:(BOOL)arg1;
- (void)setColorWithoutCommitting:(id)arg1;
- (void)setColor:(id)arg1;
- (void)setLibraryColor:(char *)arg1;
- (void)setColor:(id)arg1 hasBeenEvaluated:(BOOL)arg2 flags:(unsigned long)arg3 mask:(unsigned long)arg4;
- (void)setColor:(id)arg1 hasBeenEvaluated:(BOOL)arg2 flags:(unsigned long)arg3 mask:(unsigned long)arg4 commit:(BOOL)arg5;
- (void)commit;
- (void)commitLater;
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)arg1;
- (BOOL)endChanging:(BOOL)arg1 immediately:(BOOL)arg2;
- (void)reload;
- (void)setMutableInfoFromMessage:(id)arg1;
- (id)description;
- (void)dealloc;
- (void)finalize;
- (id)path;
- (id)account;
- (void)markAsViewed;
- (id)preferredEmailAddressToReplyWith;
- (void)setRemoteID:(const char *)arg1 documentID:(id)arg2 flags:(unsigned long long)arg3 size:(unsigned int)arg4 mailboxID:(long long)arg5 originalMailboxID:(long long)arg6 color:(char *)arg7 noteDocumentID:(id)arg8;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (void)_calculateAttachmentInfoFromBody:(id)arg1;
- (unsigned int)options;
- (void)setOptions:(unsigned int)arg1;
- (BOOL)isBeingChanged;
- (void)setIsBeingChanged:(BOOL)arg1;
- (unsigned int)size;
- (void)setSize:(unsigned int)arg1;
- (long long)originalMailboxID;
- (void)setOriginalMailboxID:(long long)arg1;
- (long long)mailboxID;
- (void)setMailboxID:(long long)arg1;
- (long long)libraryID;

@end

@interface LibraryQueries : NSObject
{
}

+ (char *)queryForUniquingDataForMessageNumber:(long long)arg1;
+ (char *)queryToFindCopiesOfMessage:(char *)arg1 sentOn:(unsigned int)arg2 receivedOn:(unsigned int)arg3 withSize:(unsigned int)arg4;
+ (id)checkOutStatementToInsertMessage:(struct sqlite3 *)arg1;
+ (id)checkOutStatementToCompletelyUpdateMessage:(struct sqlite3 *)arg1;
+ (id)checkOutStatementToInsertToDo:(struct sqlite3 *)arg1;
+ (int)bindFullToDoStatement:(id)arg1 withLibraryToDo:(id)arg2;
+ (id)checkOutStatementToUpdateToDo:(struct sqlite3 *)arg1;
+ (int)bindUpdateToDoStatement:(id)arg1 withLibraryToDo:(id)arg2;
+ (id)checkOutStatementToInsertAlarm:(struct sqlite3 *)arg1;
+ (int)bindInsertAlarmStatement:(id)arg1 withLibraryToDoAlarm:(id)arg2;
+ (char *)queryToDeleteToDoByLibraryID:(long long)arg1;
+ (char *)queryToDeleteToDoAlarmsByToDoLibraryID:(long long)arg1;
+ (char *)queryForAllToDosInMailboxes:(id)arg1;
+ (id)checkOutStatementForMaximumRemoteIDForMailbox:(struct sqlite3 *)arg1;
+ (id)checkOutStatementForToDosDetailInRange:(struct _NSRange)arg1 fromMailbox:(id)arg2 usingDB:(struct sqlite3 *)arg3;
+ (char *)queryToUpdateToDo:(id)arg1 toNewRemoteID:(id)arg2;
+ (id)checkOutStatementForToDoUsingLibraryID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForToDoWithID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForToDoWithID:(id)arg1 remoteID:(id)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForToDoWithID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3 usingDB:(struct sqlite3 *)arg4;
+ (id)checkOutStatementForToDoWithRemoteID:(id)arg1 inMailbox:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForAllToDosInLibrary:(struct sqlite3 *)arg1;
+ (id)checkOutStatementForAllToDosInMailboxes:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForAllToDosWithMailboxID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForLastToDoWithID:(id)arg1 inMailbox:(id)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForSearchDataForAllToDosInMailboxID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForAllToDosForDocumentID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForAllToDosForMessage:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForAlarmsWithToDoLibraryID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForToDoIDForAlarmID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForToDoIDsInCalendarWithID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForToDoIDsSearchDataWithWhereClause:(id)arg1 andFromClause:(id)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForToDosMatchingSearchDataArray:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)queryForToDoCountWithWhereClause:(id)arg1 andFromClause:(id)arg2;
+ (id)checkOutStatementToInsertNotes:(struct sqlite3 *)arg1;
+ (int)bindInsertNotesStatement:(id)arg1 withNotes:(id)arg2 todoLibraryID:(long long)arg3;
+ (char *)queryToDeleteToDoNotesByToDoLibraryID:(long long)arg1;
+ (id)checkOutStatementForAllToDoCalendarsInLibrary:(struct sqlite3 *)arg1;
+ (id)checkOutStatementForAllUniqueToDoCalendarsInLibrary:(struct sqlite3 *)arg1;
+ (id)checkOutStatementToInsertToDoCalendar:(struct sqlite3 *)arg1;
+ (id)checkOutStatementToUpdateToDoCalendar:(struct sqlite3 *)arg1;
+ (char *)queryToDeleteToDoCalendars:(id)arg1;
+ (int)bindFullToDoCalendarStatement:(id)arg1 withLibraryToDoCalendar:(id)arg2;
+ (int)bindUpdateToDoCalendarStatement:(id)arg1 withLibraryToDoCalendar:(id)arg2;
+ (id)fromClauseForTables:(unsigned int)arg1 startingFromTableExpression:(id)arg2;
+ (id)checkOutStatementForSnapshotToDoUIDForRemoteID:(id)arg1 withMailboxID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForSnapshotRemoteIDForToDoUID:(id)arg1 withMailboxID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForSnapshotAddToDoID:(id)arg1 withRemoteID:(id)arg2 withMailboxID:(long long)arg3 usingDB:(struct sqlite3 *)arg4;
+ (id)checkOutStatementForSnapshotRemoveToDoID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForSnapshotRemoveToDoID:(id)arg1 withMailboxID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
+ (id)checkOutStatementForRetrievingSnapshotWithMailboxID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementToDeleteAllSnapshotRowsWithMailboxID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForAllToDoIDsAndRemoteIDsForMailboxID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForMailboxURLFromMailboxID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForToDoMailboxIDForIncompleteMailAccount:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementToInsertDeletedToDo:(struct sqlite3 *)arg1;
+ (int)bindFullToDosDeletedLogStatement:(id)arg1 withToDoID:(id)arg2 documentID:(id)arg3;
+ (id)checkOutStatementForDeletedToDoWithID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementForDeletedToDoIDsForDocumentID:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (char *)queryToRemoveDeletedToDoWithID:(id)arg1;
+ (id)checkOutStatementForEventWithMessageID:(long long)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)checkOutStatementToInsertEvent:(struct sqlite3 *)arg1;
+ (int)bindInsertEventStatement:(id)arg1 withEvent:(id)arg2 messageID:(long long)arg3;
+ (id)checkOutStatementToUpdateEvent:(struct sqlite3 *)arg1;
+ (int)bindUpdateEventStatement:(id)arg1 withEvent:(id)arg2 messageID:(long long)arg3;
+ (char *)queryToDeleteEventByMessageID:(id)arg1;

@end

@interface LibraryStore : MessageStore
{
    MessageCriterion *_criterion;
    NSString *_url;
    id _openOptionsLock;
    unsigned int _openOptions;
    NSMutableSet *_memberMessageIDs;
    NSMutableArray *_allMessagesDuringOpening;
}

+ (void)initialize;
+ (id)_storeCacheMapTable;
+ (unsigned int)defaultLoadOptions;
+ (id)storeWithMailbox:(id)arg1;
+ (id)sharedInstance;
+ (BOOL)createEmptyStoreForPath:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (id)initWithCriterion:(id)arg1;
- (id)initWithMailbox:(id)arg1;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)mailbox;
- (long long)mailboxID;
- (void)updateCriterionFromMailbox;
- (void)addCountsForMessages:(id)arg1;
- (void)newMessagesAvailable:(id)arg1 fromLibraryStoreMessageConsumer:(id)arg2;
- (void)libraryFinishedSendingMessagesToLibraryStoreMessageConsumer:(id)arg1;
- (void)openAsynchronouslyWithOptions:(unsigned int)arg1;
- (BOOL)_shouldUpdateColorsAndAttachmentsAfterOpening;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (id)openSynchronouslyUpdatingMetadata:(BOOL)arg1 returnRetainedMessages:(BOOL)arg2;
- (unsigned int)_openOptions;
- (unsigned int)totalCount;
- (id)copyOfAllMessages;
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;
- (void)asynchronousCopyOfAllMessagesWithOptions:(id)arg1;
- (id)mutableCopyOfAllMessages;
- (void)recalculateUnreadCountAsychronously;
- (void)_recalculateUnreadCountSynchronously;
- (id)filterMessagesByMembership:(id)arg1;
- (void)setFlagsAndColorForMessages:(id)arg1;
- (void)_setFlagsAndColorForMessages:(id)arg1;
- (void)messagesAdded:(id)arg1;
- (void)messagesWereAdded:(id)arg1 forIncrementalLoading:(BOOL)arg2;
- (void)messageFlagsChanged:(id)arg1;
- (void)todosDidChangeForMessages:(id)arg1 oldToDosByMessage:(id)arg2 newToDosByMessage:(id)arg3;
- (void)messageToDosChanged:(id)arg1;
- (void)messagesCompacted:(id)arg1;
- (void)messagesUpdated:(id)arg1;
- (void)_invalidate;
- (void)dealloc;
- (void)finalize;
- (id)messageForMessageID:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (unsigned int)indexOfMessage:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(BOOL)arg2;
- (BOOL)allowsAppend;
- (BOOL)allowsOverwrite;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;
- (int)undoAppendOfMessageIDs:(id)arg1;
- (void)finishCopyOfMessages:(id)arg1 fromStore:(id)arg2 originalsWereDeleted:(BOOL)arg3;
- (BOOL)canCompact;
- (BOOL)_shouldCallCompactWhenClosing;
- (void)doCompact;
- (id)duplicateCopiesOfMessages:(id)arg1;
- (id)duplicateCopiesOfMessages:(id)arg1 withDocumentIDs:(id)arg2 excludingMessageIDs:(id)arg3;
- (id)lastMessageWithHeaders:(id)arg1 inMailbox:(id)arg2;
- (void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(BOOL)arg2;
- (id)messageWithValue:(id)arg1 forHeader:(id)arg2 options:(unsigned int)arg3;
- (id)dataForMimePart:(id)arg1;
- (void)writeUpdatedMessageDataToDisk;
- (void)updateMetadata;
- (void)updateUserInfoToLatestValues;
- (void)_setNeedsAutosave;
- (void)_cancelAutosave;
- (void)_invalidateColorForAllMessages;
- (id)criterion;
- (unsigned int)unreadCount;
- (void)_flushAllMessageData;
- (void)rebuildTableOfContentsAsynchronously;
- (void)_rebuildTableOfContentsSynchronously;
- (unsigned int)_numberOfMessagesToCache;
- (void)_invalidateObjectCachesForKey:(id)arg1;
- (id)_setOrGetValue:(id)arg1 forKey:(id)arg2 inCache:(id *)arg3;
- (BOOL)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(BOOL)arg3;
- (BOOL)setPreferredEncoding:(unsigned long)arg1 forMessage:(id)arg2;
- (int)setToDo:(id)arg1 forMessage:(id)arg2 oldToDo:(id)arg3;
- (id)url;
- (void)setUrl:(id)arg1;

@end

@interface _LibraryStoreMessageConsumer : NSObject <MessageConsumer>
{
    id _libraryStore;
    InvocationQueue *_callbackQueue;
    BOOL _addCountsForMessages;
}

- (id)initWithLibraryStore:(id)arg1 useCallbackQueue:(BOOL)arg2;
- (void)dealloc;
- (void)newMessagesAvailable:(id)arg1;
- (void)newMessagesAvailable:(id)arg1 ranks:(id)arg2;
- (BOOL)shouldCancel;
- (void)libraryFinishedSendingMessages;
- (BOOL)addCountsForMessages;
- (void)setAddCountsForMessages:(BOOL)arg1;

@end

@interface _LibraryThreadRequest : NSObject
{
    NSMutableArray *messages;
    RemoteStore *store;
    BOOL isFollowOnToProgressTask;
}

- (id)initWithStore:(id)arg1 andMessages:(id)arg2;
- (void)dealloc;
- (BOOL)isFollowOnToProgressTask;
- (void)setIsFollowOnToProgressTask:(BOOL)arg1;
- (id)store;
- (id)messages;
- (void)setMessages:(id)arg1;

@end

@interface LibraryThread : NSObject
{
    NSMutableArray *_requests;
    ActivityMonitor *_monitor;
    struct __CFDictionary *_storeReqCounts;
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)dealloc;
- (void)_runThread;
- (void)_routeMessagesRemovingThoseRouted:(id)arg1 fromStore:(id)arg2;
- (void)addMessages:(id)arg1 toStore:(id)arg2;
- (id)messagesBeingAddedToStore:(id)arg1;
- (BOOL)isAddingMessagesToStore:(id)arg1;

@end

@interface LibraryToDo : ToDo <LibraryObject, NSCopying>
{
    MailboxUid *_mailboxUid;
    int _changedLibraryProperties;
    long long _libraryID;
    long long _mailboxID;
    NSString *_remoteID;
    unsigned int _uid;
    unsigned int _size;
    CDStruct_3292de3e _remoteFlags;
    BOOL _imapUpdateInProgress;
    BOOL _isObservingKeyPaths;
    BOOL _isBeingChanged;
    NSConditionLock *_mailboxIDLock;
}

- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)initWithTitle:(id)arg1 inAccount:(id)arg2;
- (id)initWithCalTask:(id)arg1 inAccount:(id)arg2;
- (id)initWithData:(id)arg1 inAccount:(id)arg2;
- (void)_libraryToDoCommonInitWithAccount:(id)arg1;
- (id)initWithTitle:(id)arg1;
- (id)initWithCalTask:(id)arg1;
- (id)initWithData:(id)arg1;
- (unsigned int)hash;
- (id)messageReference;
- (void)updateWithCalTask:(id)arg1;
- (id)calTaskFromToDo;
- (void)updateNonCalTaskInformationFrom:(id)arg1;
- (void)dealloc;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (unsigned long)libraryFlags;
- (void)setLibraryFlags:(unsigned long)arg1;
- (void)setLibraryID:(long long)arg1;
- (id)account;
- (id)todoStore;
- (long long)mailboxID;
- (id)mailboxUid;
- (void)setMailboxUid:(id)arg1;
- (void)setMailboxUid:(id)arg1 mailboxID:(long long)arg2;
- (void)lockedSetMailboxID:(long long)arg1;
- (void)setCalendarID:(id)arg1;
- (id)description;
- (id)debugDescription;
- (id)richDescription;
- (id)shortDescriptionWithRemoteID;
- (unsigned int)messageSize;
- (id)messageID;
- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)arg1;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)arg1;
- (BOOL)hasTemporaryUid;
- (void)setHasTemporaryUid:(BOOL)arg1;
- (BOOL)imapUpdateInProgress;
- (void)setIMAPUpdateInProgress:(BOOL)arg1;
- (void)mergeFromToDo:(id)arg1 overwriteDirtyProperties:(BOOL)arg2 usingCondition:(void *)arg3;
- (CDStruct_3292de3e)remoteFlags;
- (id)subject;
- (void)postToDoInfoChangedNotification:(unsigned int)arg1;
- (long long)libraryID;
- (unsigned long)uid;
- (void)setUid:(unsigned long)arg1;
- (id)remoteID;
- (void)setRemoteID:(id)arg1;
- (void)setRemoteIDFromUTF8String:(const char *)arg1;
- (int)changedLibraryProperties;
- (id)initForCopy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)arg1;
- (BOOL)endChanging:(BOOL)arg1 immediately:(BOOL)arg2;
- (id)mailboxName;
- (id)initForUnitTest;

@end

@interface LibraryToDoAlarm : ToDoAlarm <NSCopying>
{
    long long _alarmLibraryID;
    long long _todoLibraryID;
}

- (id)initWithAlarm:(id)arg1 todoLibraryID:(long long)arg2;
- (id)initWithCalAlarm:(id)arg1 todoLibraryID:(long long)arg2;
- (id)calAlarmFromToDoAlarm;
- (long long)libraryID;
- (void)setLibraryID:(long long)arg1;
- (long long)todoLibraryID;
- (void)setToDoLibraryID:(long long)arg1;
- (id)argument;
- (void)setArgument:(id)arg1;
- (unsigned long)libraryFlags;
- (void)setLibraryFlags:(unsigned long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface LibraryToDoCalendar : ToDoCalendar <NSCopying>
{
    long long _libraryID;
}

- (long long)libraryID;
- (void)setLibraryID:(long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long)libraryFlags;
- (void)setLibraryFlags:(unsigned long)arg1;

@end

@interface LibraryToDoIMAPStore : LibraryIMAPStore
{
    Class _libraryClass;
    IMAPToDoStoreReconciliationAgent *_reconciliationAgent;
    BOOL _isReconciling;
    NSCondition *_libraryIsUpToDateCondition;
    int _pendingLibraryOperations;
    NSRecursiveLock *_storeIsBusy;
}

- (id)initWithCriterion:(id)arg1 mailboxUid:(id)arg2 readOnly:(BOOL)arg3 libraryClass:(Class)arg4;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2 libraryClass:(Class)arg3;
- (void)dealloc;
- (id)mailboxUid;
- (id)messageForMessageID:(id)arg1;
- (id)messageWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
- (id)lastMessageWithMessageID:(id)arg1 inMailbox:(id)arg2;
- (void)compactMessages:(id)arg1;
- (void)compactMessagesFromSyncEngine:(id)arg1;
- (unsigned long)maximumRemoteIDForMailbox:(id)arg1;
- (id)getDetailsForMessagesWithRemoteIDs:(id)arg1 fromMailbox:(id)arg2;
- (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
- (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
- (void)compactMailbox:(id)arg1;
- (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(int)arg2;
- (id)messagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 options:(unsigned int)arg5;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 messageFlagsForMessages:(id)arg7 createNewCacheFiles:(BOOL)arg8;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 createNewCacheFiles:(BOOL)arg7;
- (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 oldMessagesByNewMessage:(id)arg4;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 setFlags:(unsigned long long)arg7 clearFlags:(unsigned long long)arg8 messageFlagsForMessages:(id)arg9 copyFiles:(BOOL)arg10;
- (unsigned int)unreadCountForMailbox:(id)arg1;
- (unsigned int)deletedCountForMailbox:(id)arg1;
- (void)setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (void)setFlagsForMessages:(id)arg1 mask:(unsigned long)arg2;
- (void)setFlagsAndColorForMessages:(id)arg1;
- (void)propagateMessagesWereAdded:(id)arg1 forIncrementalLoading:(BOOL)arg2;
- (BOOL)canSetMessageColors;
- (BOOL)messageHasBeenDeleted:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)addToDos:(id)arg1;
- (void)updateToDos:(id)arg1;
- (void)deleteToDos:(id)arg1;
- (void)waitForLibraryOperationsToFinish;
- (void)signalCanAcceptNewOperations;
- (void)signalEndOfLibraryOperation;
- (void)willAddMessages;
- (void)didAddMessages;
- (void)willRemoveMessages;
- (void)didRemoveMessages;
- (void)enqueuedMessageChangesInExistingRequest;
- (void)waitUntilStoreIsFree;
- (void)setStoreFree;
- (void)abandonProcessingStore;
- (void)downloadChangesFromIMAP;
- (BOOL)supportsReconciliation;
- (void)reconcile;
- (void)reconciliationFinished;
- (BOOL)isReconciling;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
- (id)libraryToDoWithRemoteID:(long long)arg1 inMailbox:(long long)arg2;
- (void)updateServerSnapshotForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;

@end

@interface LibraryToDoStore : NSObject
{
    Class _libraryClass;
    MailboxUid *_mailboxUid;
    long long _mailboxID;
}

- (id)initWithLibraryClass:(Class)arg1 mailboxUid:(id)arg2 mailboxID:(long long)arg3;
- (id)initWithMailboxUid:(id)arg1 mailboxID:(long long)arg2;
- (void)dealloc;
- (id)mailboxUid;
- (void)updateServerSnapshotForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
- (void)addToDos:(id)arg1;
- (void)updateToDos:(id)arg1;
- (void)deleteToDos:(id)arg1;

@end

@interface LibraryUpgrader : NSObject
{
    Library *_library;
    unsigned int _majorVersion;
    unsigned int _minorVersion;
    ActivityMonitor *_monitor;
    ActivityAggregate *_activity;
    id _delegate;
    struct sqlite3 *_upgraderDB;
    BOOL _readOnly;
}

+ (void)initialize;
+ (BOOL)sqliteObjectExists:(struct sqlite3 *)arg1 name:(const char *)arg2 type:(const char *)arg3 tableName:(const char *)arg4;
- (id)initWithLibrary:(id)arg1;
- (id)init;
- (void)dealloc;
- (id)monitor;
- (void)setMonitor:(id)arg1;
- (id)activity;
- (void)setActivity:(id)arg1;
- (id)status;
- (void)setStatus:(id)arg1;
- (void)setStatusOnMainThread:(id)arg1;
- (void)getVersionInfo;
- (void)executeSQL:(id)arg1;
- (BOOL)updateMinorVersion:(unsigned int)arg1 usingDB:(struct sqlite3 *)arg2;
- (void)executeSQL:(id)arg1 updateMinorVersion:(unsigned int)arg2;
- (void)bootstrapVersioningEngine;
- (void)vacuum;
- (void)dropTriggers;
- (void)createTriggers;
- (void)setDB:(struct sqlite3 *)arg1;
- (int)libraryStatus;
- (BOOL)canRun:(id *)arg1;
- (BOOL)needsRun;
- (void)upgradeSchema;
- (void)postUpgradeDataMigration;
- (void)incrementProgressIndicator;
- (void)run;
- (void)addMessageType:(int)arg1;
- (void)addDocumentID:(int)arg1;
- (void)addPositionToRecipients:(int)arg1;
- (void)populateRecipientPosition:(int)arg1;
- (void)giveDraftsUniqueIDs:(int)arg1;
- (int)replaceRecipientsAddressRowID:(long long)arg1 withRowID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
- (int)replaceMessagesSenderRowID:(long long)arg1 withRowID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
- (int)replaceAddressRowID:(long long)arg1 withRowID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
- (long long)getSurvivingRowIDForDuplicatedRowID:(long long)arg1 dupAddress:(char *)arg2 dupComment:(char *)arg3 usingDB:(struct sqlite3 *)arg4;
- (void)upgradeEmailAddressROWIDsToCaseInsensitive:(struct sqlite3 *)arg1;
- (void)createCaseInsensitiveTemporaryAddressTable;
- (void)replaceAddressesTableWithAddressesTemp:(int)arg1 usingDB:(struct sqlite3 *)arg2;
- (void)upgradeFrom4_10To4_11:(int)arg1;
- (void)_moveUnreadCountsOutOfAttributes;
- (void)moveUnreadCountsOutOfAttributes:(int)arg1;
- (void)upgradeColumnWidthPrefs:(int)arg1;
- (void)addDateCreatedColumnOnMessages:(int)arg1;
- (void)removeToDoIDUniqueRestriction:(int)arg1;
- (void)removeAddressIndexAndAddTypeIndex:(int)arg1;
- (void)clearAnalyzeTable:(int)arg1;
- (void)addUIDToEventsTable:(int)arg1;
- (void)normalizeRSSMailboxEncodings:(int)arg1;
- (void)stampCurrentMinorVersion;
- (struct sqlite3 *)getReaderDB;
- (void)unlockReaderDB:(struct sqlite3 *)arg1;
- (struct sqlite3 *)getWriterDB;
- (void)unlockWriterDB:(struct sqlite3 *)arg1;
- (BOOL)readOnly;
- (void)setReadOnly:(BOOL)arg1;
- (id)delegate;
- (void)setDelegate:(id)arg1;

@end

@interface _RootlessMailboxUid : MailboxUid
{
}

- (id)displayName;
- (id)fullPath;
- (id)tildeAbbreviatedPath;
- (id)storeForMailboxUid:(id)arg1 createIfNeeded:(BOOL)arg2;

@end

@interface LocalAccount : MailAccount
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)localAccount;
+ (id)defaultPathNameForAccount;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)_accountWithPath:(id)arg1;
+ (id)accountTypeString;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)rootMailboxUid;
- (BOOL)isSyncable;
- (id)uniqueId;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (id)primaryMailboxUid;
- (id)displayName;
- (void)setHostname:(id)arg1;
- (void)setUsername:(id)arg1;
- (id)password;
- (void)setPassword:(id)arg1;
- (BOOL)canFetch;
- (BOOL)shouldAutoFetch;
- (BOOL)shouldShowNotesInInbox;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)isWillingToGoOnline;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (int)emptyTrashFrequency;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4;
- (BOOL)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2 displayName:(id)arg3;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2 error:(id *)arg3;
- (BOOL)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned int)arg2;
- (id)mailboxUidForFileSystemPath:(id)arg1;
- (id)_URLPersistenceScheme;
- (id)_infoForMatchingURL:(id)arg1;
- (BOOL)synchronizesDataWithServer;
- (id)_specialMailboxNameForType:(int)arg1;
- (id)todosMailboxUidCreateIfNeeded:(BOOL)arg1;
- (BOOL)isEditableByUser;
- (BOOL)canParticipateInRules;
- (BOOL)providesAccountInformation;
- (BOOL)isZeroConfiguration;
- (BOOL)isRemoteAccount;
- (BOOL)hasTrashMailbox;
- (BOOL)supportsAppleScript;

@end

@interface LocalToDoStoreReconciliationAgent : ToDoStoreReconciliationAgent
{
    LibraryToDoStore *_agentStore;
}

- (id)initWithMailboxUid:(id)arg1 mailboxID:(long long)arg2;
- (void)dealloc;
- (void)startAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)finishAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)prepareToReconcileForMailboxID:(long long)arg1;
- (void)startToReconcileForMailboxID:(long long)arg1;
- (void)applyReconcilerChangesForMailboxID:(long long)arg1;
- (void)finishReconciliationForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;

@end

@interface NetworkLocation : NSObject
{
    NSMutableDictionary *_accountDefaults;
    NSMutableDictionary *_domainsBySubnet;
}

- (id)init;
- (id)initWithDomains:(id)arg1 IPAddresses:(id)arg2;
- (id)initWithArchive:(id)arg1;
- (void)dealloc;
- (id)archive;
- (void)addDomains:(id)arg1 IPAddresses:(id)arg2;
- (id)domains;
- (id)subnets;
- (BOOL)isForIPAddress:(id)arg1;
- (BOOL)isForDomain:(id)arg1;
- (id)deliveryAccountForAccount:(id)arg1;
- (void)setAccount:(id)arg1 deliveryAccount:(id)arg2;
- (id)bestDeliveryAccountForAccount:(id)arg1;
- (void)_postChanged;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToLocation:(id)arg1;

@end

@interface LocationManager : NSObject
{
    NSMutableArray *_locations;
    NetworkLocation *_current;
    InvocationQueue *_invocationQueue;
    BOOL supressNotifications;
}

+ (id)sharedManager;
+ (id)currentLocation;
- (id)init;
- (id)initWithUserDefaultsArray:(id)arg1;
- (void)dealloc;
- (void)setCurrentLocation:(id)arg1;
- (id)currentLocation;
- (void)addLocation:(id)arg1;
- (id)locationForDomain:(id)arg1;
- (id)locationForIPAddress:(id)arg1;
- (void)_networkChanged:(id)arg1;
- (void)_determineCurrentLocation;
- (void)_managedLocationChanged:(id)arg1;
- (void)_unarchiveLocations:(id)arg1;
- (id)_archivedLocations;

@end

@interface MailAccount : Account
{
    id _mailAccountLock;
    id _backgroundActivityFlagsLock;
    id _mailboxUidLock;
    NSString *_path;
    MailboxUid *_rootMailboxUid;
    MailboxUid *_inboxMailboxUid;
    MailboxUid *_draftsMailboxUid;
    MailboxUid *_sentMessagesMailboxUid;
    MailboxUid *_trashMailboxUid;
    MailboxUid *_junkMailboxUid;
    MailboxUid *_notesMailboxUid;
    MailboxUid *_notesSmartMailboxUid;
    MailboxUid *_todosMailboxUid;
    MailboxUid *_outboxMailboxUid;
    MFError *_lastConnectionError;
    id _cacheChangeLock;
    NSTimer *_cacheWriteTimer;
    BOOL _cacheHasBeenRead;
    BOOL _backgroundFetchInProgress;
    BOOL _synchronizationThreadIsRunning;
    BOOL _mailboxListInitializationInProgress;
}

+ (void)initialize;
+ (BOOL)haveAccountsBeenConfigured;
+ (void)_addAccountToSortedPaths:(id)arg1;
+ (id)defaultToDoAccount;
+ (id)defaultNoteAccount;
+ (BOOL)isValidAccount:(id)arg1 messageType:(BOOL)arg2;
+ (id)singleRemoteNoteAccount;
+ (id)noteAccountForMailboxUid:(id)arg1;
+ (id)accountForNote:(id)arg1 referringMessage:(id)arg2 messageType:(BOOL)arg3;
+ (id)todoAccountFromNoteAccount:(id)arg1;
+ (id)noteAccountForNote:(id)arg1 referringMessage:(id)arg2;
+ (id)todoAccountForNote:(id)arg1 referringMessage:(id)arg2;
+ (id)_mailAccountsIncludingUnknownTypes;
+ (id)mailAccounts;
+ (id)syncableMailAccounts;
+ (id)allCalDAVAccounts;
+ (void)setMailAccounts:(id)arg1;
+ (void)setMailAccounts:(id)arg1 calledFromSync:(BOOL)arg2;
+ (void)addMailAccountToMail:(id)arg1;
+ (void)accountsWereSynced;
+ (BOOL)newMailBeenReceived;
+ (void)setNewMailBeenReceived:(BOOL)arg1;
+ (id)syncManagedAccountWithMCXCreateIfAbsent:(BOOL)arg1;
+ (void)_removeAccountFromSortedPaths:(id)arg1;
+ (id)_activeAccountsFromArray:(id)arg1;
+ (id)activeAccounts;
+ (id)mailAccountsExcludingCalDAVAccounts;
+ (id)activeAccountsExcludingCalDAVAccounts;
+ (id)remoteAccounts;
+ (void)saveAccountInfoToDefaults;
+ (void)clearIsSyncableForHTTPMailAccounts;
+ (id)accountWithUniqueId:(id)arg1;
+ (id)existingAccountWithType:(id)arg1 hostname:(id)arg2 username:(id)arg3;
+ (id)existingAccountFromMailWithType:(id)arg1 hostname:(id)arg2 username:(id)arg3;
+ (id)_accountFromArray:(id)arg1 withType:(id)arg2 hostname:(id)arg3 username:(id)arg4;
+ (id)allEmailAddressesIncludingFullUserName:(BOOL)arg1;
+ (void)_updateAccountExistsForSigning;
+ (BOOL)accountExistsForSigning;
+ (id)_accountContainingEmailAddress:(id)arg1 matchingAddress:(id *)arg2 fullUserName:(id *)arg3;
+ (id)accountContainingEmailAddress:(id)arg1;
+ (id)accountForHeaders:(id)arg1 message:(id)arg2;
+ (id)accountUsingHeadersFromMessage:(id)arg1;
+ (id)accountThatMessageIsFrom:(id)arg1;
+ (id)addressesThatReceivedMessage:(id)arg1;
+ (id)accountThatReceivedMessage:(id)arg1 matchingEmailAddress:(id *)arg2 fullUserName:(id *)arg3;
+ (id)outboxMessageStore:(BOOL)arg1;
+ (id)specialMailboxUids;
+ (id)_specialMailboxUidsUsingSelector:(SEL)arg1;
+ (id)inboxMailboxUids;
+ (id)trashMailboxUids;
+ (id)outboxMailboxUids;
+ (id)sentMessagesMailboxUids;
+ (id)draftMailboxUids;
+ (id)junkMailboxUids;
+ (id)noteMailboxUids;
+ (id)todosMailboxUids;
+ (id)allMailboxUids;
+ (id)accountWithPath:(id)arg1;
+ (id)newAccountWithPath:(id)arg1;
+ (id)createAccountWithDictionary:(id)arg1;
+ (id)defaultPathForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)defaultAccountDirectory;
+ (id)defaultPathNameForAccount;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)defaultDeliveryAccount;
+ (BOOL)isAnyAccountOffline;
+ (BOOL)isAnyAccountOnline;
+ (void)_setOnlineStateOfAllAccountsTo:(BOOL)arg1;
+ (void)disconnectAllAccounts;
+ (void)connectAllAccounts;
+ (id)accountsInitializingMailboxList;
+ (void)_clearAllAccountBackgroundFetchInProgress;
+ (int)numberOfDaysToKeepLocalTrash;
+ (BOOL)allAccountsDeleteInPlace;
+ (void)synchronouslyEmptyMailboxUidType:(int)arg1 inAccounts:(id)arg2;
+ (void)resetAllSpecialMailboxes;
+ (id)mailboxUidForFileSystemPath:(id)arg1 create:(BOOL)arg2;
+ (void)deleteMailboxUidIfEmpty:(id)arg1;
+ (id)_accountForURL:(id)arg1 includeInactiveAccounts:(BOOL)arg2;
+ (id)_accountForURL:(id)arg1;
+ (id)infoForURL:(id)arg1;
+ (id)URLForInfo:(id)arg1;
+ (id)accountWithURLString:(id)arg1;
+ (id)accountWithURLString:(id)arg1 includeInactiveAccounts:(BOOL)arg2;
+ (id)mailboxUidForURL:(id)arg1 forceCreation:(BOOL)arg2;
+ (id)mailboxUidForURL:(id)arg1;
+ (id)mailboxUidForMailboxID:(unsigned int)arg1;
- (BOOL)isValidAccountWithError:(id)arg1 accountBeingEdited:(id)arg2 userCanOverride:(char *)arg3;
- (BOOL)cheapStoreAtPathIsEmpty:(id)arg1;
- (id)init;
- (id)initWithPath:(id)arg1;
- (void)dealloc;
- (void)heal;
- (BOOL)isValid;
- (void)finalize;
- (void)_updateSpecialMailboxForType:(int)arg1 fromSyncedDictionary:(id)arg2;
- (void)updateFromSyncedDictionary:(id)arg1;
- (id)path;
- (void)setPath:(id)arg1;
- (id)tildeAbbreviatedPath;
- (id)applescriptFullUserName;
- (void)setApplescriptFullUserName:(id)arg1;
- (id)fullUserName;
- (void)setFullUserName:(id)arg1;
- (id)localizedDeliveryAccount;
- (id)smtpIdentifier;
- (void)setSMTPIdentifier:(id)arg1;
- (id)deliveryAccount;
- (void)setDeliveryAccount:(id)arg1;
- (id)dynamicDeliveryAccount;
- (void)deliveryAccountWillBeRemoved:(id)arg1;
- (BOOL)deliveryAccountIsLocked;
- (void)setDeliveryAccountIsLocked:(BOOL)arg1;
- (BOOL)isDotMacAccount;
- (id)firstEmailAddress;
- (id)rawEmailAddresses;
- (id)emailAddresses;
- (id)applescriptEmailAddresses;
- (void)setApplescriptEmailAddresses:(id)arg1;
- (void)setEmailAddresses:(id)arg1;
- (id)emailAliases;
- (BOOL)shouldAutoFetch;
- (void)setShouldAutoFetch:(BOOL)arg1;
- (BOOL)supportsRichTextNotes;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtURL:(id)arg3;
- (void)_synchronouslyInvalidateAndDelete:(BOOL)arg1;
- (void)deleteAccount;
- (void)_setCacheWriteTimer:(id)arg1;
- (void)saveCacheInBackground;
- (void)saveCache;
- (void)doRoutineCleanup;
- (void)setCacheIsDirty:(BOOL)arg1;
- (void)releaseAllConnections;
- (void)setIsOffline:(BOOL)arg1;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (BOOL)canFetch;
- (id)defaultsDictionary;
- (void)nowWouldBeAGoodTimeToStartBackgroundSynchronization;
- (BOOL)canAppendMessages;
- (BOOL)canBeSynchronized;
- (void)synchronizeAllMailboxes;
- (BOOL)_supportsMailboxListInitialization;
- (BOOL)isInitializingMailboxList;
- (void)willInitializeMailboxList;
- (void)didInitializeMailboxList;
- (void)fetchAsynchronouslyIsAuto:(BOOL)arg1;
- (void)fetchAsynchronously;
- (void)fetchSynchronously;
- (void)fetchSynchronouslyIsAuto:(id)arg1;
- (BOOL)isFetching;
- (void)newMailHasBeenReceived;
- (id)primaryMailboxUid;
- (id)rootMailboxUid;
- (BOOL)rootChildrenCanBePromoted;
- (id)draftsMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)junkMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)sentMessagesMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)trashMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)outboxMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)notesMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)notesMailboxUidCreateIfNeeded:(BOOL)arg1 useLocalIfNeeded:(BOOL)arg2;
- (id)todosMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)todosMailboxUidUnlessUsingLocal;
- (id)allMailboxUids;
- (void)setDraftsMailboxUid:(id)arg1;
- (void)setTrashMailboxUid:(id)arg1;
- (void)setJunkMailboxUid:(id)arg1;
- (void)setSentMessagesMailboxUid:(id)arg1;
- (void)setNotesMailboxUid:(id)arg1;
- (void)setToDosMailboxUid:(id)arg1;
- (void)deleteMessagesFromMailboxUid:(id)arg1 olderThanNumberOfDays:(unsigned int)arg2;
- (void)_setEmptyFrequency:(int)arg1 forKey:(id)arg2;
- (int)_emptyFrequencyForKey:(id)arg1 defaultValue:(int)arg2;
- (int)emptySentMessagesFrequency;
- (void)setEmptySentMessagesFrequency:(int)arg1;
- (int)emptyJunkFrequency;
- (void)setEmptyJunkFrequency:(int)arg1;
- (id)lastToDoCalendar;
- (void)setLastToDoCalendar:(id)arg1;
- (void)todoCalendarGroupTitle:(id *)arg1 groupID:(id *)arg2;
- (void)setToDoCalendarGroupTitle:(id)arg1 groupID:(id)arg2;
- (void)deleteToDoCalendarGroup;
- (int)emptyTrashFrequency;
- (void)setEmptyTrashFrequency:(int)arg1;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)setShouldMoveDeletedMessagesToTrash:(BOOL)arg1;
- (BOOL)canMoveDeletedMessagesToTrash;
- (BOOL)defaultShouldShowNotesInInbox;
- (BOOL)shouldShowNotesInInbox;
- (void)setShouldShowNotesInInbox:(BOOL)arg1;
- (void)emptySpecialMailboxesThatNeedToBeEmptiedAtQuit;
- (id)displayName;
- (id)displayNameForMailboxUid:(id)arg1;
- (BOOL)containsMailboxes;
- (BOOL)_resetSpecialMailboxes;
- (void)resetSpecialMailboxes;
- (id)mailboxPathExtension;
- (BOOL)canCreateNewMailboxes;
- (BOOL)canMoveMailboxes;
- (BOOL)supportsSlashesInMailboxName;
- (id)validNameForMailbox:(id)arg1 fromDisplayName:(id)arg2 error:(id *)arg3;
- (BOOL)canMailboxBeRenamed:(id)arg1;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (BOOL)deleteConvertsStoreToFolder;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2 displayName:(id)arg3;
- (BOOL)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (BOOL)deleteMailbox:(id)arg1;
- (void)invalidateChildrenOfMailbox:(id)arg1;
- (void)_resetAllMailboxURLs;
- (void)setUsername:(id)arg1;
- (void)setHostname:(id)arg1;
- (void)setPortNumber:(unsigned long)arg1;
- (void)accountInfoDidChange;
- (void)postUserInfoHasChangedForMailboxUid:(id)arg1 userInfo:(id)arg2;
- (void)setConnectionError:(id)arg1;
- (id)connectionError;
- (id)_ispDomain;
- (id)storeForMailboxUid:(id)arg1;
- (id)storeForMailboxUid:(id)arg1 createIfNeeded:(BOOL)arg2;
- (Class)storeClass;
- (Class)todoStoreClass;
- (void)_unreadCountChangedForMailbox:(id)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3;
- (void)setUnreadCount:(unsigned int)arg1 forMailbox:(id)arg2;
- (void)increaseUnreadCountBy:(int)arg1 forMailbox:(id)arg2;
- (void)setUnseenCount:(unsigned int)arg1 forMailbox:(id)arg2;
- (void)increaseUnseenCountBy:(int)arg1 forMailbox:(id)arg2;
- (BOOL)hasUnreadMail;
- (id)mailboxUidForRelativePath:(id)arg1 create:(BOOL)arg2;
- (id)valueInMailboxesWithName:(id)arg1;
- (id)objectSpecifierForMessageStore:(id)arg1;
- (id)objectSpecifierForMailboxUid:(id)arg1;
- (id)objectSpecifier;
- (id)URLString;
- (BOOL)synchronizesDataWithServer;
- (Class)reconciliationAgentClass;
- (BOOL)supportsNotes;
- (BOOL)supportsToDos;
- (id)todoCalendarsAccount;
- (BOOL)allowsCalendarCreation;
- (BOOL)allowsToDoCreation;
- (BOOL)allowsToDoCalendarCreation;
- (BOOL)isEditableByUser;
- (BOOL)canParticipateInRules;
- (BOOL)providesAccountInformation;
- (BOOL)isZeroConfiguration;
- (BOOL)isRemoteAccount;
- (BOOL)hasTrashMailbox;
- (BOOL)supportsAppleScript;
- (BOOL)isSourceOfToDosTruth;
- (BOOL)storesUnseenCount;
- (id)currentToDosMailboxName;
- (void)setCurrentToDosMailboxName:(id)arg1;

@end

@interface MailAddressManager : NSObject <ABImageClient>
{
    NSCache *_imageCache;
    NSMutableDictionary *emailsAwaitingImage;
    NSMutableDictionary *recordsCache;
    NSMutableSet *addressesWithNoRecords;
    BOOL needToTrimRecordCaches;
    BOOL singleThreaded;
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)addressManager;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (void)setOperatesInSingleThread:(BOOL)arg1;
- (BOOL)operatesInSingleThread;
- (id)loadAddressBookAsynchronously;
- (void)loadAddressBookSynchronously;
- (id)bestRecordMatchingFormattedAddress:(id)arg1;
- (void)trimRecordCachesAfterDelay;
- (void)trimRecordCaches;
- (void)addressBookDidChange:(id)arg1;
- (void)postPhotoChangedNotification;
- (id)recordForUniqueId:(id)arg1;
- (id)groupsMatchingString:(id)arg1;
- (void)updateDatesForRecentRecord:(id)arg1;
- (void)_addAddresses:(id)arg1 asRecent:(BOOL)arg2;
- (void)addRecentAddresses:(id)arg1;
- (void)addAddresses:(id)arg1;
- (id)addRecentToAddressBook:(id)arg1;
- (id)addAddressToAddressBook:(id)arg1;
- (void)removeRecordFromAddressBook:(id)arg1 forRecent:(id)arg2;
- (void)removeRecentAddresses:(id)arg1;
- (void)removeRecentRecord:(id)arg1;
- (id)addEmailAddressToCardMatchingFirstAndLastNameFromFormattedAddress:(id)arg1;
- (id)addressBookRecordForRecentRecord:(id)arg1 orEmail:(id)arg2;
- (id)addressBookPersonForEmail:(id)arg1;
- (id)addressBookRecordsForFirstName:(id)arg1 lastName:(id)arg2;
- (id)_emailAddressLabelForAddressBook:(id)arg1;
- (id)imageForMailAddress:(id)arg1;
- (void)fetchImageForAddress:(id)arg1;
- (void)consumeImageData:(id)arg1 forTag:(int)arg2;
- (void)cacheImage:(id)arg1 forAddress:(id)arg2;
- (id)groups;
- (void)_addEmailsFromGroup:(id)arg1 toDictionary:(id)arg2;
- (id)emailAddressesFromGroup:(id)arg1;
- (id)expandPrivateAliases:(id)arg1;
- (id)replaceOccurrencesOfPrivateGroupAliasesWithPublicName:(id)arg1;

@end

@interface _MailboxUidChildrenEnumerator : NSEnumerator
{
    struct __CFTree *_root;
    struct __CFTree *_currentTree;
    BOOL _includeHidden;
}

- (id)initWithTree:(struct __CFTree *)arg1 includeHiddenChildren:(BOOL)arg2;
- (id)init;
- (void)dealloc;
- (id)nextObject;

@end

@interface _SmartMailboxesEnumerator : NSEnumerator
{
    NSArray *_smartMailboxes;
    int _currentMailboxIndex;
    _MailboxUidEnumerator *_currentMailboxEnumerator;
}

- (id)initWithSmartMailboxUids:(id)arg1;
- (id)init;
- (void)dealloc;
- (id)nextObject;

@end

@interface _MailboxUidEnumerator : NSEnumerator
{
    struct __CFTree *_startTree;
    struct __CFTree *_lastTree;
}

- (id)initWithTree:(struct __CFTree *)arg1;
- (id)init;
- (void)dealloc;
- (id)nextObject;

@end

@interface MailboxUid : NSObject
{
    NSString *uniqueId;
    NSString *_pathComponent;
    MailAccount *_account;
    unsigned int _attributes;
    id _countsLock;
    unsigned int _unreadCount;
    struct __CFTree *_tree;
    NSString *pendingNameChange;
    BOOL isSmartMailbox;
    int _smartMailboxVersion;
    SafeValueCache *_criteriaCache;
    BOOL allCriteriaMustBeSatisfied;
    NSString *_realFullPath;
    unsigned int _numberOfVisibleChildren;
    NSMutableIndexSet *_visibleChildrenIndexes;
    NSArray *_sortedChildren;
    BOOL _sortedChildrenAreUpToDate;
    BOOL failedToOpen;
    BOOL _storeIsReadOnly;
    MFError *openFailureError;
    id _displayIndexLock;
    unsigned int _displayIndex;
    BOOL _isPublicOrShared;
    NSString *syncId;
    unsigned int _unseenCount;
    BOOL _unseenCountLoaded;
    BOOL _unseenCountIsKnown;
    BOOL _storesUnseenCount;
    id _dontIndexFlagLock;
    BOOL _dontIndexFlagWritten;
    id _typeAndRepresentedAccountLock;
    int _type;
    MailAccount *_representedAccount;
}

+ (void)initialize;
+ (id)smartMailboxUids;
+ (void)setSmartMailboxUids:(id)arg1;
+ (id)smartMailboxPlaceholders;
+ (void)addSmartMailboxPlaceholder:(id)arg1;
+ (void)removeAllSmartMailboxPlaceholders;
+ (id)specialSmartMailboxUids;
+ (void)addSpecialSmartMailboxUid:(id)arg1;
+ (void)removeSpecialSmartMailboxUid:(id)arg1;
+ (void)setSpecialSmartMailboxUids:(id)arg1;
+ (id)_smartMailboxWithIdentifier:(id)arg1 inArray:(id)arg2;
+ (id)smartMailboxWithIdentifier:(id)arg1;
+ (id)smartMailboxesEnumerator;
+ (BOOL)isSmartMailboxDictionaryCompatible:(id)arg1;
+ (BOOL)allMailboxesAreNoteType:(id)arg1;
+ (BOOL)typeIsGeneric:(int)arg1;
+ (id)descriptionForMailboxType:(int)arg1 plural:(BOOL)arg2;
+ (void)setShouldIndexTrash:(BOOL)arg1;
+ (void)reimportJunk;
+ (void)setShouldIndexJunk:(BOOL)arg1;
- (BOOL)isSmartMailbox;
- (void)setIsSmartMailbox:(BOOL)arg1;
- (BOOL)isSmartMailboxExpressibleInTigerSchema;
- (void)dealloc;
- (id)init;
- (id)initWithAccount:(id)arg1;
- (id)initWithName:(id)arg1 attributes:(unsigned int)arg2 forAccount:(id)arg3;
- (id)initWithMailboxUid:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)dictionaryRepresentation;
- (id)representedMailbox;
- (id)extendedDisplayName;
- (id)displayNameUsingAccountNameIfSpecial:(BOOL)arg1;
- (id)displayName;
- (void)setPendingNameChange:(id)arg1;
- (BOOL)canBeRenamed;
- (id)name;
- (void)setName:(id)arg1;
- (BOOL)isPublicOrShared;
- (void)setIsPublicOrShared:(BOOL)arg1;
- (void)notifyForUnreadCount:(unsigned int)arg1 andOldUnreadCount:(unsigned int)arg2;
- (unsigned int)unreadCount;
- (void)setUnreadCount:(unsigned int)arg1;
- (void)restoreUnreadCountFromUserInfo;
- (BOOL)changeUnreadCountTo:(unsigned int)arg1 previousUnreadCount:(unsigned int *)arg2;
- (unsigned int)increaseUnreadCountBy:(int)arg1;
- (unsigned int)increaseUnreadCountBy:(int)arg1 previousUnreadCount:(unsigned int *)arg2;
- (void)_loadUnseenCountsIfNeeded;
- (BOOL)unseenCountIsKnown;
- (unsigned int)unseenCount;
- (void)setUnseenCount:(unsigned int)arg1;
- (BOOL)changeUnseenCountTo:(unsigned int)arg1;
- (BOOL)increaseUnseenCountBy:(int)arg1;
- (BOOL)hasMessages;
- (id)children;
- (BOOL)hasChildren;
- (void)_invalidateVisibleChildrenCaches;
- (unsigned int)displayIndex;
- (void)setDisplayIndex:(unsigned int)arg1;
- (BOOL)displayIndexCanBeModified;
- (unsigned int)suggestedDisplayIndexForChildMailbox:(id)arg1;
- (void)_updateSortedChildrenIfNeeded;
- (unsigned int)numberOfVisibleChildren;
- (unsigned int)numberOfSortedChildren;
- (id)childEnumerator;
- (id)childEnumeratorIncludingHiddenChildren:(BOOL)arg1;
- (id)depthFirstEnumerator;
- (unsigned int)numberOfChildren;
- (id)childAtIndex:(unsigned int)arg1;
- (id)visibleChildAtIndex:(unsigned int)arg1;
- (id)sortedChildAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfChild:(id)arg1;
- (id)childWithName:(id)arg1;
- (id)mutableCopyOfChildren;
- (id)mutableCopyOfChildrenIncludingHiddenChildren:(BOOL)arg1;
- (void)_deleteChildrenWithURLsIfInvalid:(id)arg1 fullPaths:(id)arg2;
- (BOOL)setChildren:(id)arg1;
- (void)invalidateChildren;
- (void)sortChildren;
- (id)parent;
- (void)setParent:(id)arg1;
- (BOOL)hasAlternateParent;
- (void)flushCriteria;
- (id)deepCopy;
- (void)setRepresentedAccount:(id)arg1;
- (id)representedAccount;
- (id)account;
- (id)applescriptAccount;
- (BOOL)isValid;
- (void)invalidate;
- (BOOL)isContainer;
- (BOOL)isStore;
- (BOOL)isSpecialMailboxUid;
- (BOOL)isPlainSmartMailbox;
- (BOOL)isSpecialSmartMailbox;
- (id)_stringByAppendingPathComponentsForAccount:(id)arg1 root:(struct __CFTree *)arg2 prefix:(id)arg3 separator:(id)arg4 pathExtension:(id)arg5;
- (id)accountRelativePath;
- (id)fullPathNonNil;
- (id)fullPath;
- (id)realFullPath;
- (id)tildeAbbreviatedPath;
- (id)pathRelativeToMailbox:(id)arg1;
- (id)URL;
- (id)URLStringWithAccount:(id)arg1;
- (id)URLString;
- (int)compareWithMailboxUid:(id)arg1;
- (int)indexToInsertChildMailboxUid:(id)arg1;
- (BOOL)isDescendantOfMailbox:(id)arg1;
- (BOOL)isDescendantOfMailboxWithType:(int)arg1;
- (BOOL)isStoreConvertibleToFolder;
- (id)description;
- (int)type;
- (void)setType:(int)arg1;
- (BOOL)isRSSMailboxOrFolder;
- (BOOL)shouldMaintainMessageTypeUnity;
- (BOOL)preferredMessageType;
- (BOOL)isVisible;
- (BOOL)isIndexable;
- (void)_updateDontIndexFlagFile;
- (id)_loadUserInfo;
- (void)_userInfoDidLoad:(id)arg1;
- (id)userInfoObjectForKey:(id)arg1;
- (BOOL)parentStoresUserInfo;
- (void)setUserInfoObject:(id)arg1 forKey:(id)arg2;
- (BOOL)userInfoBoolForKey:(id)arg1;
- (void)setUserInfoBool:(BOOL)arg1 forKey:(id)arg2;
- (void)saveUserInfo;
- (id)userInfoDictionary;
- (void)setUserInfoWithDictionary:(id)arg1;
- (id)userInfo;
- (void)_saveMailboxesWithDirtyUserInfo;
- (void)_saveMailboxesWithDirtyUserInfoWithDelay;
- (BOOL)_userInfoIsDirty;
- (void)_setUserInfoIsDirty:(BOOL)arg1;
- (id)ancestralAccount;
- (id)criteria;
- (id)updatedCriteria:(id)arg1;
- (id)criterion;
- (void)setCriteria:(id)arg1;
- (id)abGroupsUsedInCriteria;
- (BOOL)criteriaAreValid:(id *)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (void)addressBookDidChange:(id)arg1;
- (id)store;
- (id)storeCreateIfNeeded:(BOOL)arg1;
- (BOOL)isStoreReadOnlyCreateIfNeeded:(BOOL)arg1;
- (id)toDoStore;
- (BOOL)failedToOpen;
- (id)openFailureError;
- (void)setFailedToOpen:(BOOL)arg1 error:(id)arg2;
- (id)copyWithZone:(id)arg1;
- (BOOL)allowsMoveDeletedMessagesToTrash;
- (BOOL)storeIsReadOnly;
- (void)setStoreIsReadOnly:(BOOL)arg1;
- (id)syncId;
- (void)setSyncId:(id)arg1;
- (id)uniqueId;
- (void)setUniqueId:(id)arg1;
- (int)smartMailboxVersion;
- (void)setSmartMailboxVersion:(int)arg1;
- (unsigned int)attributes;
- (void)setAttributes:(unsigned int)arg1;

@end

@interface MailboxUidWrapper : NSProxy
{
    MailboxUid *_wrappedMailbox;
    BOOL _hasAlternateParent;
}

- (id)initWithMailboxUid:(id)arg1;
- (void)dealloc;
- (void)setRepresentedMailbox:(id)arg1;
- (id)representedMailbox;
- (BOOL)hasAlternateParent;
- (void)setHasAlternateParent:(BOOL)arg1;
- (void)_unreadCountChanged:(id)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (id)tildeAbbreviatedPath;

@end

@interface MailCalDAVAccount : MailAccount
{
    NSString *_title;
    BOOL _isBeingDeleted;
}

+ (id)defaultPathNameForAccount;
+ (id)accountTypeString;
- (void)cleanupCalDAVAccountTitleForURLAndPath:(id)arg1;
- (id)initWithTitle:(id)arg1 groupID:(id)arg2;
- (void)dealloc;
- (BOOL)isActive;
- (BOOL)isSyncable;
- (id)uniqueId;
- (Class)storeClass;
- (Class)todoStoreClass;
- (BOOL)supportsNotes;
- (BOOL)supportsToDos;
- (BOOL)shouldShowNotesInInbox;
- (id)mailboxPathExtension;
- (BOOL)synchronizesDataWithServer;
- (BOOL)allowsCalendarCreation;
- (BOOL)isEditableByUser;
- (BOOL)canParticipateInRules;
- (BOOL)providesAccountInformation;
- (BOOL)isZeroConfiguration;
- (BOOL)isRemoteAccount;
- (BOOL)hasTrashMailbox;
- (BOOL)supportsAppleScript;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (BOOL)canCreateNewMailboxes;
- (id)hostname;
- (BOOL)canFetch;
- (BOOL)shouldAutoFetch;
- (BOOL)isOffline;
- (BOOL)canGoOffline;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (BOOL)canMoveDeletedMessagesToTrash;
- (id)path;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)rootChildrenCanBePromoted;
- (id)trashMailboxUidCreateIfNeeded:(BOOL)arg1;
- (id)_URLPersistenceScheme;
- (id)_specialMailboxNameForType:(int)arg1;
- (BOOL)deleteMailbox:(id)arg1;
- (id)_infoForMatchingURL:(id)arg1;
- (void)deleteAccount;
- (BOOL)isBeingDeleted;

@end

@interface MailDelivery : NSObject
{
    id _delegate;
    Message *_message;
    MessageStore *_messageStore;
    MailAccount *_archiveAccount;
    DeliveryAccount *_account;
    int _status;
    BOOL _askForReadReceipt;
}

+ (id)newWithMessage:(id)arg1;
+ (BOOL)deliverMessage:(id)arg1 askForReadReceipt:(BOOL)arg2;
+ (BOOL)deliverMessage:(id)arg1;
+ (BOOL)returnMessageToSender:(id)arg1;
- (id)initWithMessage:(id)arg1;
- (void)dealloc;
- (id)message;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)archiveAccount;
- (void)setArchiveAccount:(id)arg1;
- (id)account;
- (void)setAccount:(id)arg1;
- (BOOL)askForReadReceipt;
- (void)setAskForReadReceipt:(BOOL)arg1;
- (int)deliveryStatus;
- (id)headersForDelivery;
- (void)deliverAsynchronously;
- (int)deliverSynchronously;
- (int)deliverMessageHeaderData:(id)arg1 bodyData:(id)arg2 toRecipients:(id)arg3;

@end

@interface MailFileWrapper : NSFileWrapper
{
    unsigned int _attachmentSize;
    NSString *_pathToCopy;
}

+ (id)createWithPath:(id)arg1 andContentID:(id)arg2 makingLocalCopy:(BOOL)arg3;
+ (id)localAttachmentFilesDirectory;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (void)dealloc;
- (id)archivedDataWithPartNumber:(id)arg1;
- (id)symbolicLinkDestination;
- (id)pathToAttachment;
- (BOOL)isALargeAttachment;
- (void)setPreferredFilename:(id)arg1;
- (id)pathToCopy;
- (void)setPathToCopy:(id)arg1;
- (unsigned int)approximateSize;
- (void)setApproximateSize:(unsigned int)arg1;

@end

@interface MainThreadInvocationOperation : ThrowingInvocationOperation
{
    BOOL _isExecuting;
    BOOL _isFinished;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)start;
- (void)main;
- (BOOL)isConcurrent;
- (BOOL)isExecuting;
- (void)_setIsExecuting:(BOOL)arg1;
- (BOOL)isFinished;
- (void)_finish;

@end

@interface Matador : NSObject
{
    NSConditionLock *_attachmentIndexingLock;
    NSMutableSet *_messsagesScheduledForAttachmentIndexing;
}

+ (void)initialize;
+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)_setAttributeForFileAtPath:(id)arg1 name:(id)arg2 value:(id)arg3;
- (void)setAttributeForFileAtPath:(id)arg1 name:(id)arg2 value:(id)arg3;
- (BOOL)_shouldIndexAttachmentsForMessage:(id)arg1;
- (void)_synchronouslyIndexAttachmentsForMessage:(id)arg1;
- (void)_synchronouslyIndexAttachmentsForMessages:(id)arg1;
- (void)_scheduleAttachmentIndexingForMessages:(id)arg1;
- (void)_triggerDelayedAttachmentIndexing;
- (void)_triggerNowAttachmentIndexing;
- (void)_indexAttachmentsForScheduledMessages;
- (void)indexAttachmentsForMessages:(id)arg1;
- (void)indexAttachmentsForMessage:(id)arg1;
- (void)immediatelyIndexAttachmentsForMessages:(id)arg1;
- (void)immediatelyIndexAttachmentsForMessage:(id)arg1;

@end

@interface Message : NSObject
{
    int _mf_retainCount;
    double _dateSentInterval;
    double _dateReceivedInterval;
    double _dateLastViewedInterval;
    MessageStore *_store;
    NSString *_senderAddressComment;
    NSString *_subject;
    NSString *_to;
    NSString *_sender;
    NSString *_author;
    NSData *_messageIDHeaderDigest;
    NSData *_inReplyToHeaderDigest;
    MFUUID *_documentID;
    unsigned int _messageFlags;
    CDStruct_accefccd _flags;
    unsigned int _preferredEncoding;
    BOOL _type;
    unsigned char _subjectPrefixLength;
}

+ (void)initialize;
+ (id)verboseVersion;
+ (id)frameworkVersion;
+ (void)setUserAgent:(id)arg1;
+ (id)userAgent;
+ (id)messageWithRFC822Data:(id)arg1;
+ (id)forwardedMessagePrefixWithSpacer:(BOOL)arg1;
+ (id)replyPrefixWithSpacer:(BOOL)arg1;
+ (id)descriptionForType:(BOOL)arg1 plural:(BOOL)arg2;
+ (id)messageTypeKeyForMessageType:(BOOL)arg1;
+ (BOOL)_messageTypeForMessageTypeKey:(id)arg1;
+ (id)unreadMessagesFromMessages:(id)arg1;
+ (BOOL)allMessages:(id)arg1 areSameType:(BOOL)arg2;
+ (BOOL)colorIsSetInMoreFlags:(CDStruct_accefccd)arg1;
+ (unsigned long)validatePriority:(unsigned long)arg1;
+ (unsigned int)displayablePriorityForPriority:(unsigned long)arg1;
+ (BOOL)isMessageURL:(id)arg1;
+ (id)messageWithURL:(id)arg1;
+ (id)messagesWithURL:(id)arg1;
+ (id)messageWithPersistentID:(id)arg1;
+ (id)availableMatadorAttributeNames;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)retain;
- (void)release;
- (unsigned int)retainCount;
- (id)messageStore;
- (void)setMessageStore:(id)arg1;
- (BOOL)messageStoreShouldBeSet;
- (id)mailbox;
- (id)headers;
- (id)headersIfAvailable;
- (BOOL)isKnownToBeNote;
- (BOOL)type;
- (void)setType:(BOOL)arg1;
- (BOOL)isEditable;
- (BOOL)isAnnotatable;
- (BOOL)isMessageMeeting;
- (id)documentID;
- (void)setDocumentID:(id)arg1;
- (unsigned long)messageFlags;
- (void)setMessageFlags:(unsigned long)arg1 mask:(unsigned long)arg2;
- (id)attachmentNamesIfAvailable;
- (id)messageBody;
- (id)messageBodyIfAvailable;
- (id)messageBodyUpdatingFlags:(BOOL)arg1;
- (id)messageBodyForIndexingAttachments;
- (id)messageBodyIfAvailableUpdatingFlags:(BOOL)arg1;
- (id)messageDataIncludingFromSpace:(BOOL)arg1;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (BOOL)colorHasBeenEvaluated;
- (id)color;
- (int)colorIntValue;
- (BOOL)isMarkedForOverwrite;
- (void)setMarkedForOverwrite:(BOOL)arg1;
- (void)setColor:(id)arg1;
- (void)setColorHasBeenEvaluated:(BOOL)arg1;
- (void)setColor:(id)arg1 hasBeenEvaluated:(BOOL)arg2 flags:(unsigned long)arg3 mask:(unsigned long)arg4;
- (void)dealloc;
- (void)finalize;
- (unsigned int)messageSize;
- (id)attributedString;
- (id)preferredEmailAddressToReplyWith;
- (id)messageID;
- (id)messageIDHeaderDigest;
- (void)unlockedSetMessageIDHeaderDigest:(id)arg1;
- (void)setMessageIDHeaderDigest:(id)arg1;
- (id)_messageIDHeaderDigestIvar;
- (id)inReplyToHeaderDigest;
- (void)unlockedSetInReplyToHeaderDigest:(id)arg1;
- (void)setInReplyToHeaderDigest:(id)arg1;
- (id)_inReplyToHeaderDigestIvar;
- (int)compareByNumberWithMessage:(id)arg1;
- (BOOL)isMessageContentsLocallyAvailable;
- (id)stringValueRenderMode:(int)arg1 updateBodyFlags:(BOOL)arg2 junkRecorder:(id)arg3;
- (id)stringForIndexing;
- (id)stringForIndexingUpdatingBodyFlags:(BOOL)arg1;
- (id)stringForJunk;
- (id)stringForJunk:(id)arg1;
- (BOOL)hasCalculatedNumberOfAttachments;
- (unsigned int)numberOfAttachments;
- (int)junkMailLevel;
- (void)setPriorityFromHeaders:(id)arg1;
- (int)priority;
- (unsigned long)preferredEncoding;
- (void)setPreferredEncoding:(unsigned long)arg1;
- (id)rawSourceFromHeaders:(id)arg1 body:(id)arg2;
- (BOOL)_doesDateAppearToBeSane:(id)arg1;
- (id)_createDateFromReceivedHeadersInHeaders:(id)arg1;
- (id)_createDateFromHeader:(id)arg1 inHeaders:(id)arg2;
- (id)_createDateFromDateHeaderInHeaders:(id)arg1;
- (id)_createDateFromCreatedDateHeaderInHeaders:(id)arg1;
- (void)_setDateReceivedFromHeaders:(id)arg1;
- (void)_setDateSentFromHeaders:(id)arg1;
- (void)loadCachedHeaderValuesFromHeaders:(id)arg1 type:(BOOL)arg2;
- (id)subjectAndPrefixLength:(unsigned int *)arg1;
- (id)subjectNotIncludingReAndFwdPrefix;
- (id)subjectAddition;
- (id)subject;
- (void)setSubject:(id)arg1;
- (id)dateReceived;
- (id)dateSent;
- (void)setDateReceivedTimeIntervalSince1970:(double)arg1;
- (double)dateReceivedAsTimeIntervalSince1970;
- (double)dateSentAsTimeIntervalSince1970;
- (void)setDateSentTimeIntervalSince1970:(double)arg1;
- (id)dateLastViewed;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (id)sender;
- (void)setSender:(id)arg1;
- (id)senderAddressComment;
- (id)to;
- (void)setTo:(id)arg1;
- (id)author;
- (void)setAuthor:(id)arg1;
- (void)setMessageInfo:(id)arg1 to:(id)arg2 sender:(id)arg3 type:(BOOL)arg4 dateReceivedTimeIntervalSince1970:(double)arg5 dateSentTimeIntervalSince1970:(double)arg6 messageIDHeaderDigest:(id)arg7 inReplyToHeaderDigest:(id)arg8;
- (void)setMessageInfo:(id)arg1 to:(id)arg2 sender:(id)arg3 type:(BOOL)arg4 dateReceivedTimeIntervalSince1970:(double)arg5 dateSentTimeIntervalSince1970:(double)arg6 messageIDHeaderDigest:(id)arg7 inReplyToHeaderDigest:(id)arg8 dateLastViewedTimeIntervalSince1970:(double)arg9;
- (void)setMessageInfoFromMessage:(id)arg1;
- (id)references;
- (id)note;
- (void)setNote:(id)arg1;
- (id)todos;
- (void)setTodos:(id)arg1;
- (void)invalidateTodos;
- (id)remoteID;
- (unsigned long)uid;
- (CDStruct_accefccd)moreMessageFlags;
- (id)path;
- (id)account;
- (void)markAsViewed;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;
- (id)_URLFetchIfNotAvailable:(BOOL)arg1;
- (id)URL;
- (id)URLIfAvailable;
- (id)persistentID;
- (id)bodyData;
- (id)headerData;
- (id)dataForMimePart:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)matadorAttributes;
- (void)_calculateAttachmentInfoFromBody:(id)arg1;
- (void)forceSetAttachmentInfoFromBody:(id)arg1;
- (void)setAttachmentInfoFromBody:(id)arg1;
- (void)setAttachmentInfoFromBody:(id)arg1 forced:(BOOL)arg2;
- (BOOL)calculateAttachmentInfoFromBody:(id)arg1 numberOfAttachments:(unsigned int *)arg2 isSigned:(char *)arg3 isEncrypted:(char *)arg4;
- (BOOL)calculateAttachmentInfoFromBody:(id)arg1 numberOfAttachments:(unsigned int *)arg2 isSigned:(char *)arg3 isEncrypted:(char *)arg4 force:(BOOL)arg5;
- (void)setNumberOfAttachments:(unsigned long)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3;
- (BOOL)messageTypeInternal;
- (void)setMessageTypeInternal:(BOOL)arg1;

@end

@interface AppleScriptHeaderRecord : NSObject
{
    NSString *_name;
    id _content;
    Message *_message;
}

- (void)dealloc;
- (void)finalize;
- (id)name;
- (void)setName:(id)arg1;
- (id)content;
- (void)setContent:(id)arg1;
- (id)message;
- (void)setMessage:(id)arg1;
- (id)objectSpecifier;

@end

@interface MessageAddressee : NSObject
{
    NSString *_displayName;
    NSString *_address;
    NSString *_type;
    id _message;
}

- (id)initWithDisplayName:(id)arg1 address:(id)arg2 type:(id)arg3 message:(id)arg4;
- (void)dealloc;
- (BOOL)isEqual:(id)arg1;
- (id)formattedAddress;
- (id)displayName;
- (void)setDisplayName:(id)arg1;
- (id)address;
- (void)setAddress:(id)arg1;
- (id)_keyForType;
- (id)objectSpecifier;
- (void)setMessage:(id)arg1;

@end

@interface TextAttachmentWrappingMessageAttachment : NSTextAttachment
{
    MessageAttachment *_messageAttachment;
}

- (id)initWithMessageAttachment:(id)arg1;
- (id)initWithFileWrapper:(id)arg1;
- (void)dealloc;
- (id)messageAttachment;

@end

@interface MessageAttachment : NSObject
{
    NSData *_currentData;
    NSFileWrapper *_fileWrapper;
    NSURL *_externalBodyURL;
    id _stationeryCompositeImage;
    NSData *_originalData;
    NSString *_originalFilename;
    BOOL _hasResourceForkData;
    struct _NSSize _imageSizeFromHeaders;
    NSImage *_iconImage;
    int _imageByteCountFromHeaders;
    NSString *_filename;
    NSNumber *_filePermissions;
    NSNumber *_fileSize;
    NSString *_mimeType;
    unsigned int _creator;
    unsigned int _type;
    NSString *_extension;
    BOOL _shouldHideExtension;
    unsigned short _finderFlags;
    NSArray *_whereFroms;
    NSDictionary *_quarantineProperties;
    NSString *_contentID;
    MimeBody *_mimeBody;
    MimePart *_mimePart;
    NSString *_messageID;
    BOOL _isCalendarInvitation;
    NSString *_mailSpecialHandlingType;
    NSString *_filenameForSaving;
    NSString *_savedPath;
    unsigned int _approximateSize;
}

- (id)initWithData:(id)arg1;
- (id)initWithMailInternalData:(id)arg1;
- (id)initWithFileWrapper:(id)arg1;
- (id)initWithExternalBodyURL:(id)arg1;
- (id)initWithStationeryCompositeImage:(id)arg1;
- (void)dealloc;
- (id)attachmentWithCurrentData;
- (id)originalData;
- (void)setOriginalData:(id)arg1;
- (void)setCurrentData:(id)arg1;
- (BOOL)isScalable;
- (void)setDataForResizedImage:(id)arg1;
- (void)revertToOriginalData;
- (BOOL)isFullSize;
- (void)setFileNameForResizedImage:(id)arg1;
- (void)setMimePart:(id)arg1;
- (id)mimePart;
- (void)_configureWithMimePart;
- (void)takeInfoFromMessageAttachment:(id)arg1 saveOriginalData:(BOOL)arg2;
- (id)dataForFetchLevel:(unsigned int)arg1;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned int)arg2;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)setFromHeadersImageSize:(struct _NSSize)arg1 byteCount:(int)arg2;
- (struct _NSSize)imageSizeFromHeaders;
- (int)imageByteCountFromHeaders;
- (BOOL)isDataDownloaded;
- (unsigned int)approximateSizeOfWrapper;
- (unsigned int)approximateSize;
- (id)filenameWithoutHiddenExtension;
- (id)iconImage;
- (void)setIconImage:(id)arg1;
- (void)discardIconImage;
- (id)toolTip;
- (BOOL)isVideoOrAudio;
- (BOOL)isStationeryCompositeImage;
- (BOOL)isImage;
- (BOOL)isPDF;
- (void)isImage:(char *)arg1 isPDF:(char *)arg2;
- (void)isImage:(char *)arg1 isPDF:(char *)arg2 bestMimeType:(id *)arg3;
- (BOOL)isCalendarInvitation;
- (BOOL)isRemotelyAccessed;
- (id)remoteAccessMimeType;
- (BOOL)isDirectory;
- (BOOL)isPartOfStationery;
- (void)setIsPartOfStationery:(BOOL)arg1;
- (void)takeNewDataFromPath:(id)arg1;
- (BOOL)couldConfuseWindowsClients;
- (id)appleSingleDataWithFilename:(const char *)arg1 length:(unsigned int)arg2;
- (id)appleDoubleDataWithFilename:(const char *)arg1 length:(unsigned int)arg2;
- (id)_fileWrapperIncludeData:(BOOL)arg1;
- (id)fileWrapperIncludeData:(BOOL)arg1 fetchLevel:(unsigned int)arg2;
- (id)fileWrapper;
- (void)setFileWrapper:(id)arg1;
- (id)fileWrapperIfAvailable;
- (void)setFilenameForSaving:(id)arg1;
- (BOOL)createEmptyAttachmentAtPath:(id)arg1;
- (id)createTemporaryFile;
- (id)symbolicLinkDestinationForFileWrapper;
- (id)description;
- (id)quarantineProperties;
- (void)setQuarantineProperties:(id)arg1;
- (id)whereFroms;
- (void)setWhereFroms:(id)arg1;
- (id)savedPath;
- (void)setSavedPath:(id)arg1;
- (id)stationeryCompositeImage;
- (id)mailSpecialHandlingType;
- (void)setMailSpecialHandlingType:(id)arg1;
- (void)setIsCalendarInvitation:(BOOL)arg1;
- (id)messageID;
- (void)setMessageID:(id)arg1;
- (id)mimeType;
- (void)setMimeType:(id)arg1;
- (id)filePermissions;
- (void)setFilePermissions:(id)arg1;
- (BOOL)shouldHideExtension;
- (void)setShouldHideExtension:(BOOL)arg1;
- (id)extension;
- (void)setExtension:(id)arg1;
- (unsigned long)creator;
- (void)setCreator:(unsigned long)arg1;
- (unsigned long)type;
- (void)setType:(unsigned long)arg1;
- (id)contentID;
- (void)setContentID:(id)arg1;
- (id)fileSize;
- (void)setFileSize:(id)arg1;
- (id)originalFilename;
- (id)filename;
- (void)setFilename:(id)arg1;
- (id)externalBodyURL;
- (void)setExternalBodyURL:(id)arg1;
- (id)currentData;

@end

@interface MessageAttachmentViewController : NSObject
{
    MessageAttachment *_attachment;
    NSMutableArray *_attachmentViews;
    BOOL _canBeDisplayedInline;
    BOOL _canBeDisplayedInRegisteredViewer;
    struct _NSSize _originalImageSize;
    BOOL _originalImageSizeHasBeenComputed;
    NSImage *_inlineImage;
    BOOL _isBeingDisplayedInline;
    int _domNodeWidth;
    int _domNodeHeight;
    struct _NSSize _targetImageSize;
    struct _NSSize _previousTargetImageSize;
    BOOL _isImageBeingResized;
}

+ (void)initialize;
+ (void)registerViewingClass:(Class)arg1 forMimeTypes:(id)arg2;
+ (Class)_viewProviderClassForMimeType:(id)arg1;
- (id)init;
- (id)initWithMessageAttachment:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)attachmentViews;
- (void)addAttachmentView:(id)arg1;
- (BOOL)isBeingDisplayedInline;
- (void)setIsBeingDisplayedInline:(BOOL)arg1;
- (void)setCanBeDisplayedInline:(BOOL)arg1;
- (BOOL)canBeDisplayedInline;
- (BOOL)shouldBeDisplayedInlineByDefault;
- (BOOL)shouldDownloadAttachmentOnDisplay;
- (struct _NSSize)originalImageSizeWithOriginalImage:(id)arg1;
- (struct _NSSize)targetImageSize;
- (void)resizingStarted:(struct _NSSize)arg1;
- (void)resizingFinished:(id)arg1 imageSize:(struct _NSSize)arg2 fileExtension:(id)arg3 fileType:(unsigned long)arg4 maxImageSize:(struct _NSSize)arg5;
- (id)inlineImage;
- (id)iconImage;
- (void)imageDataDidChange:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)description;
- (int)domNodeHeight;
- (void)setDomNodeHeight:(int)arg1;
- (int)domNodeWidth;
- (void)setDomNodeWidth:(int)arg1;
- (id)attachment;

@end

@interface MessageBody : NSObject
{
    BOOL _hideCalendarMimePart;
    Message *_message;
    long long _messageID;
}

- (id)init;
- (void)setMessage:(id)arg1;
- (id)message;
- (id)attributedString;
- (BOOL)isHTML;
- (BOOL)isRich;
- (BOOL)isSignedByMe;
- (void)calculateNumberOfAttachmentsIfNeeded;
- (void)calculateNumberOfAttachmentsDecodeIfNeeded;
- (unsigned long)numberOfAttachmentsSigned:(char *)arg1 encrypted:(char *)arg2;
- (id)attachments;
- (id)attachmentViewControllers;
- (id)attachmentFilenames;
- (id)textHtmlPart;
- (id)webArchive;
- (void)dealloc;
- (BOOL)hideCalendarMimePart;
- (void)setHideCalendarMimePart:(BOOL)arg1;
- (id)actualMessage;
- (void)setActualMessage:(id)arg1;
- (long long)messageID;
- (void)setMessageID:(long long)arg1;

@end

@interface MessageCriterion : Criterion
{
    int _specialMailboxType;
    NSString *_groupUniqueID;
}

+ (void)initialize;
+ (id)noteCriteriaForAccount:(id)arg1;
+ (void)_updateAddressComments:(id)arg1;
+ (int)criterionTypeForString:(id)arg1;
+ (id)stringForCriterionType:(int)arg1;
- (id)initWithDictionary:(id)arg1 andRemoveRecognizedKeysIfMutable:(BOOL)arg2;
- (void)dealloc;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEquivalent:(id)arg1;
- (id)dictionaryRepresentation;
- (void)setCriterionIdentifier:(id)arg1;
- (id)recursiveGroupUniqueIDs;
- (id)_headersRequiredForEvaluation;
- (void)addHeadersRequiredForRoutingToArray:(id)arg1;
- (BOOL)_evaluateDateCriterion:(id)arg1;
- (BOOL)_evaluateHeaderCriterion:(id)arg1;
- (BOOL)_evaluateBodyCriterion:(id)arg1;
- (BOOL)_evaluateAddressBookCriterion:(id)arg1;
- (BOOL)_doesGroup:(id)arg1 containSender:(id)arg2;
- (BOOL)_evaluateMemberOfGroupCriterion:(id)arg1;
- (BOOL)_evaluateAccountCriterion:(id)arg1;
- (BOOL)_evaluateAddressHistoryCriterion:(id)arg1;
- (BOOL)_evaluateFullNameCriterion:(id)arg1;
- (BOOL)_evaluateIsDigitallySignedCriterion:(id)arg1;
- (BOOL)_evaluateIsEncryptedCriterion:(id)arg1;
- (BOOL)_evaluateMessageTypeCriterion:(id)arg1;
- (BOOL)_evaluatePriorityIsNormalCriterion:(id)arg1;
- (BOOL)_evaluatePriorityIsHighCriterion:(id)arg1;
- (BOOL)_evaluatePriorityIsLowCriterion:(id)arg1;
- (BOOL)_evaluateJunkMailHeaders:(id)arg1;
- (BOOL)_evaluateJunkMailCriterion:(id)arg1;
- (BOOL)_evaluateAttachmentCriterion:(id)arg1;
- (BOOL)_evaluateCompoundCriterion:(id)arg1;
- (BOOL)_evaluateFlagCriterion:(id)arg1;
- (BOOL)_evaluateMailboxCriterion:(id)arg1;
- (BOOL)_evaluateSpecialMailboxCriterion:(id)arg1;
- (BOOL)doesMessageSatisfyRuleEvaluationCriterion:(id)arg1;
- (BOOL)_evaluateMessage:(id)arg1;
- (BOOL)evaluateMessage:(id)arg1;
- (BOOL)hasExpression;
- (BOOL)allowsEmptyExpression;
- (BOOL)hasQualifier;
- (BOOL)isValid:(id *)arg1 options:(unsigned long)arg2;
- (BOOL)containsBodyCriterion;
- (id)emailAddressesForGroupCriterion;
- (id)criterionByExpandingGroup;
- (id)criterionByExpandingSpecialMailboxCriterion;
- (BOOL)containsLastViewedDateCriterion;
- (id)groupUniqueID;
- (void)setGroupUniqueID:(id)arg1;
- (int)specialMailboxType;
- (void)setSpecialMailboxType:(int)arg1;

@end

@interface MessageFlags : NSObject <NSCoding>
{
    unsigned int realFlags;
}

- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long)realFlags;
- (void)setRealFlags:(unsigned long)arg1;

@end

@interface NSPrivateMessageClassForFindingBundle : NSObject
{
}

@end

@interface MessageHeaders : NSObject <NSCopying>
{
    NSData *_data;
    unsigned int _preferredEncoding;
}

+ (void)initialize;
+ (BOOL)isStructuredHeaderKey:(id)arg1;
+ (BOOL)_isImageHeaderKey:(id)arg1;
+ (const char *)cstringForKey:(id)arg1;
+ (id)localizedHeaders;
+ (id)localizedHeadersFromEnglishHeaders:(id)arg1;
+ (id)englishHeadersFromLocalizedHeaders:(id)arg1;
- (id)initWithHeaderData:(id)arg1 encoding:(unsigned long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
- (id)mutableCopy;
- (id)headerData;
- (unsigned long)preferredEncoding;
- (void)setPreferredEncoding:(unsigned long)arg1;
- (id)htmlHeaderKey:(id)arg1 useBold:(BOOL)arg2 useGray:(BOOL)arg3;
- (id)htmlValueWithKey:(id)arg1 value:(id)arg2 useBold:(BOOL)arg3;
- (id)htmlStringShowingHeaderDetailLevel:(int)arg1;
- (id)htmlStringShowingHeaderDetailLevel:(int)arg1 useBold:(BOOL)arg2 useGray:(BOOL)arg3;
- (id)attributedStringShowingHeaderDetailLevel:(int)arg1;
- (id)attributedStringShowingHeaderDetailLevel:(int)arg1 useHeadIndents:(BOOL)arg2 useBold:(BOOL)arg3 includeBCC:(BOOL)arg4;
- (id)headersDictionaryWithHeaderDetailLevel:(int)arg1;
- (id)headersDictionaryWithHeaderDetailLevel:(int)arg1 forMessageType:(BOOL)arg2;
- (id)allHeaderKeys;
- (void)_setCapitalizedKey:(id)arg1 forKey:(id)arg2;
- (id)_capitalizedKeyForKey:(id)arg1;
- (id)_createHeaderValueForKey:(id)arg1 offset:(unsigned int *)arg2;
- (id)_createHeaderValueForKey:(id)arg1;
- (BOOL)hasHeaderForKey:(id)arg1;
- (id)headersForKey:(id)arg1;
- (id)firstHeaderForKey:(id)arg1;
- (id)_decodeHeaderKeysFromData:(id)arg1;
- (id)isoLatin1CharsetHint;
- (id)mailVersion;
- (BOOL)messageIsFromMicrosoft;
- (void)_appendAddressList:(id)arg1 toData:(id)arg2;
- (id)encodedHeaders;
- (id)encodedHeadersIncludingFromSpace:(BOOL)arg1;
- (void)appendHeaderData:(id)arg1 andRecipients:(id)arg2 recipientsByHeaderKey:(id)arg3 expandPrivate:(BOOL)arg4 includeComment:(BOOL)arg5;
- (void)appendHeaderData:(id)arg1 andRecipients:(id)arg2 recipientsByHeaderKey:(id)arg3;
- (id)allRecipientsExpandPrivate:(BOOL)arg1 includeComment:(BOOL)arg2;
- (id)_encodedHeadersIncludingFromSpace:(BOOL)arg1;

@end

@interface MessageHTMLConverter : NSObject <NSPortDelegate>
{
    WebView *_webView;
    NSPort *_replyPort;
    unsigned int _sequenceNumber:31;
    NSData *_resultData;
    SEL _mainThreadSelector;
    BOOL _didHandlePortMessage;
}

+ (void)initialize;
+ (id)sharedInstance;
- (id)attributedStringFromWebArchive:(id)arg1;
- (id)junkStringFromHTMLData:(id)arg1 textEncodingName:(id)arg2 context:(id)arg3;
- (id)htmlStringWithInlinedStyleFromHTMLData:(id)arg1 textEncodingName:(id)arg2;
- (void)handlePortMessage:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)_setMainThreadSelector:(SEL)arg1;
- (void)_stopLoadingWebView;
- (void)_setUpWebView;
- (void)_loadWebViewOnMainThreadFromData:(id)arg1 withTextEncodingName:(id)arg2 orFromWebArchive:(id)arg3;
- (id)_archivedAttributedStringFromLoadedDocument;
- (id)_archivedDataFromLoadedDocument;
- (id)_archivedHTMLStringWithInlinedStyleFromLoadedDocument;
- (void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 locationChangeDone:(id)arg2 forDataSource:(id)arg3;
- (void)webView:(id)arg1 didFailProvisionalLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (id)webView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (id)resultData;
- (void)setResultData:(id)arg1;

@end

@interface MessageRouter : NSObject <SyncableDataOwner>
{
    MessageStore *_store;
    NSMutableArray *_queuedMessages;
    NSConditionLock *_queuedMessagesFull;
    NSConditionLock *_queuedMessagesEmpty;
    NSLock *_queuedMessagesRouting;
    unsigned int _bytesInQueue;
    unsigned int _queueSize;
    BOOL _routingThreadShouldQuit;
    unsigned int _numMessagesRoutedSoFar;
    unsigned int _numMessagesToBeRouted;
    BOOL _isUserAction;
}

+ (void)initialize;
+ (id)writeRulesTimer;
+ (void)setWriteRulesTimer:(id)arg1;
+ (void)scheduleWriteRules;
+ (void)unScheduleWriteRules;
+ (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
+ (void)_updateICalRule:(BOOL)arg1;
+ (void)_setupAddInvitationDefault;
+ (void)_iCalSettingChangedFromICal:(id)arg1;
+ (BOOL)_hasColorRules;
+ (int)colorChangeCounter;
+ (void)setColorChangeCounter:(int)arg1;
+ (void)enqueueColorRulesDidChange;
+ (BOOL)_colorRuleExistsAfterRule:(id)arg1;
+ (BOOL)colorsUpdateDynamically;
+ (void)ruleAffectingColorsDidChange:(id)arg1;
+ (void)ruleDidChange:(id)arg1;
+ (void)mailboxWillBeRenamedOrInvalidated;
+ (void)_mailboxBecameInvalid:(id)arg1;
+ (void)_mailboxWasRenamed:(id)arg1;
+ (id)defaultAppleEmailAddresses;
+ (id)_defaultSortRules;
+ (id)sortRulesPath;
+ (id)oldSortRulesPath;
+ (id)iCalRule;
+ (BOOL)_setICalRule:(id)arg1;
+ (id)_sortRulesFromDictionaryRepresentations:(id)arg1 junkRule:(id *)arg2 iCalRule:(id *)arg3;
+ (id)_sortRuleDictionaryRepresentations;
+ (void)_setupSortRules;
+ (id)_readRulesFromDiskOldStyle;
+ (id)_readRulesFromDisk;
+ (void)writeRulesToDiskInBackground;
+ (void)synchronouslyWriteRulesToDisk;
+ (id)rules;
+ (unsigned int)numberOfRules;
+ (id)ruleAtIndex:(unsigned int)arg1;
+ (void)removeRuleAtIndex:(unsigned int)arg1;
+ (void)insertRule:(id)arg1 atIndex:(unsigned int)arg2;
+ (void)addRule:(id)arg1;
+ (void)removeRule:(id)arg1;
+ (void)tryToReconnectAutoDeactivatedRules;
+ (void)loadDestinationMailboxes;
+ (void)_mailboxListingChanged:(id)arg1;
+ (id)headersRequiredForRouting;
+ (void)headersRequiredForRoutingDidChange;
+ (void)putRulesThatWantsToHandleMessage:(id)arg1 intoArray:(id)arg2 colorRulesOnly:(BOOL)arg3;
+ (id)colorForMessage:(id)arg1 highlightTextUsingColor:(char *)arg2;
+ (int)junkMailBehavior;
+ (void)setJunkMailBehavior:(int)arg1;
+ (void)evaluateJunkMailBehaviorFromRules;
+ (void)_ensureJunkRuleBehaviorMatchesPreference;
+ (void)reevaluateJunkMessagesInMailboxes:(id)arg1;
+ (id)junkMailRuleForBehavior:(int)arg1 abCriterion:(BOOL)arg2 ahCriterion:(BOOL)arg3 fnCriterion:(BOOL)arg4;
+ (id)junkMailRule;
+ (void)setJunkMailRule:(id)arg1;
+ (id)userJunkMailRule;
+ (id)defaultJunkMailRule;
+ (BOOL)junkMailEvaluationAfterRules;
+ (void)setJunkMailEvaluationAfterRules:(BOOL)arg1;
+ (BOOL)junkMailTrustHeaders;
+ (void)setJunkMailTrustHeaders:(BOOL)arg1;
+ (id)junkMailHeaderFlags;
+ (void)_applyRulesToMailboxUids:(id)arg1;
+ (void)applyRulesAsynchronouslyToMailboxUids:(id)arg1;
+ (BOOL)addInvitationsToICalAutomatically;
+ (BOOL)_addICalRule;
+ (void)setAddInvitationsToICalAutomatically:(BOOL)arg1;
+ (void)addInvitationsToICalFromMessages:(id)arg1;
+ (void)installNewRulesFromPlist:(id)arg1;
- (BOOL)_routeMessagesIndividually;
- (id)routeMessages:(id)arg1 fromStores:(id)arg2;
- (void)asynchronouslyRouteMessages:(id)arg1;
- (void)routeQueuedMessages;
- (void)waitForRoutingToFinish;
- (void)setStore:(id)arg1;
- (void)setEstimatedNumberOfMessagesToRoute:(unsigned int)arg1;
- (void)dealloc;
- (void)finalize;
- (void)setIsUserAction:(BOOL)arg1;
- (BOOL)dataWillBeSyncedVersion:(id *)arg1 data:(id *)arg2 type:(id)arg3;
- (BOOL)dataWasSyncedVersion:(id)arg1 newData:(id)arg2 acceptedChanges:(id)arg3;
- (id)newRulesArrayWithJunkAndICalRules:(id)arg1;

@end

@interface MessageRule : NSObject <NSCopying, MFChanging>
{
    NSString *_ruleName;
    BOOL _didChange;
    BOOL _isChanging;
    NSMutableArray *_criteria;
    MailboxUid *_destinationMailbox;
    NSString *_destinationMailboxURL;
    NSString *_soundPath;
    NSArray *_recipients;
    int _autoResponseType;
    NSString *_responseMessage;
    NSColor *_color;
    NSString *_appleScriptPath;
    unsigned int _flags;
    unsigned int _isActive:1;
    unsigned int _shouldTransferMessage:1;
    unsigned int _shouldCopyMessage:1;
    unsigned int _allCriteriaMustBeSatisfied:1;
    unsigned int _shouldStopEvaluatingRules:1;
    unsigned int _highlightTextUsingColor:1;
    unsigned int _shouldNotifyUser:1;
    unsigned int _addInvitationAttachmentToICal:1;
    unsigned int _ruleWasAutoDeactivated:1;
    NSNumber *_isActiveSyncState;
    NSDictionary *_otherInfo;
    MailboxUid *_copyDestinationMailbox;
    NSString *_copyDestinationMailboxURL;
    unsigned short _version;
    BOOL _isJunkMailRule;
    BOOL _isICalRule;
    NSString *_uniqueId;
}

+ (void)initialize;
+ (id)appleScriptLock;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEquivalentExceptForTitleAndIDs:(id)arg1;
- (id)uniqueId;
- (void)setUniqueId:(id)arg1;
- (id)init;
- (id)initWithRule:(id)arg1;
- (id)mailboxURLForMailboxUid:(id)arg1;
- (id)mailboxPathForMailboxURL:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)dictionaryRepresentation;
- (void)beginChanging;
- (BOOL)endChanging:(BOOL)arg1;
- (BOOL)endChanging:(BOOL)arg1 immediately:(BOOL)arg2;
- (void)_updateDefaultAppleEmailAddressRule;
- (void)_appendMessages:(id)arg1 fromSourceMailbox:(id)arg2 toDestinationMailbox:(id)arg3 destinationStores:(id)arg4 rejectedMessages:(id)arg5 messagesToBeDeleted:(id)arg6;
- (void)performActionsOnMessages:(id)arg1 destinationStores:(id)arg2 rejectedMessages:(id)arg3 messagesToBeDeleted:(id)arg4;
- (id)_performAutoResponseActionOnMessage:(id)arg1 encrypt:(BOOL)arg2 includeOrignalMessageText:(BOOL)arg3;
- (void)_performAutoResponseActionOnMessages:(id)arg1;
- (void)_performAppleScriptActionWithMessages:(id)arg1;
- (void)_performAddInvitationAttachmentToICalActionOnMessages:(id)arg1;
- (void)addHeadersRequiredForRoutingToArray:(id)arg1;
- (BOOL)doesMessageSatisfyCriteria:(id)arg1;
- (BOOL)isValid:(id *)arg1 options:(unsigned long)arg2;
- (void)performPostSyncingValidation;
- (id)ruleName;
- (void)setRuleName:(id)arg1;
- (unsigned short)version;
- (void)setVersion;
- (void)clearVersion;
- (BOOL)isTerminalAction;
- (BOOL)isJunkMailRule;
- (void)setIsJunkMailRule:(BOOL)arg1;
- (BOOL)hasJunkMailCriterion;
- (BOOL)isActive;
- (void)setIsActive:(BOOL)arg1;
- (BOOL)isActiveSyncState;
- (void)setIsActiveSyncState:(BOOL)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (id)criteria;
- (void)setCriteria:(id)arg1;
- (BOOL)shouldTransferMessage;
- (void)setShouldTransferMessage:(BOOL)arg1;
- (BOOL)shouldCopyMessage;
- (void)setShouldCopyMessage:(BOOL)arg1;
- (id)_destinationMailbox:(id)arg1 withURL:(id)arg2 setUsingSelector:(SEL)arg3 createIfNeeded:(BOOL)arg4;
- (void)_setDestinationIvar:(id *)arg1 toDestinationMailbox:(id)arg2 destinationURLIvar:(id *)arg3;
- (id)_destinationMailboxCreateIfNeeded:(BOOL)arg1;
- (id)destinationMailbox;
- (void)setDestinationMailbox:(id)arg1;
- (id)_copyDestinationMailboxCreateIfNeeded:(BOOL)arg1;
- (id)copyDestinationMailbox;
- (void)setCopyDestinationMailbox:(id)arg1;
- (id)_tryToGetMailboxUidForURL:(id)arg1;
- (void)tryToReconnectDestinationIfNeeded;
- (BOOL)invalidateDestinationMailboxesForURLString:(id)arg1;
- (id)appleScriptDestinationMailbox;
- (id)appleScriptCopyDestinationMailbox;
- (void)_evaluateIfNeeded:(id)arg1 andSetUsingSelector:(SEL)arg2;
- (void)setAppleScriptCopyDestinationMailbox:(id)arg1;
- (void)setAppleScriptDestinationMailbox:(id)arg1;
- (unsigned long)flagsToApply;
- (void)setFlagsToApply:(unsigned long)arg1;
- (id)appleScriptPath;
- (void)setAppleScriptPath:(id)arg1;
- (id)color;
- (void)setColor:(id)arg1;
- (BOOL)highlightTextUsingColor;
- (void)setHighlightTextUsingColor:(BOOL)arg1;
- (BOOL)affectsColorEvaluation;
- (int)autoResponseType;
- (void)setAutoResponseType:(int)arg1;
- (id)autoResponseRecipients;
- (void)setAutoResponseRecipients:(id)arg1;
- (id)responseMessage;
- (void)handleDidChange;
- (void)setResponseMessage:(id)arg1;
- (id)soundPath;
- (void)setSoundPath:(id)arg1;
- (BOOL)shouldStopEvaluatingRules;
- (void)setShouldStopEvaluatingRules:(BOOL)arg1;
- (BOOL)shouldNotifyUser;
- (void)setShouldNotifyUser:(BOOL)arg1;
- (BOOL)addInvitationAttachmentToICal;
- (void)setAddInvitationAttachmentToICal:(BOOL)arg1;
- (void)setIsICalRule:(BOOL)arg1;
- (BOOL)isICalRule;
- (void)updateToNewestVersion;
- (id)objectSpecifier;

@end

@interface MessageRuleCriterion : MessageCriterion
{
    MessageRule *_rule;
}

+ (id)noJunkCriterion;
+ (id)noTrashCriterion;
+ (id)noSentCriterion;
- (void)dealloc;
- (void)setRuleType:(int)arg1;
- (void)setRuleQualifier:(int)arg1;
- (void)setRuleExpression:(id)arg1;
- (void)setMessageRule:(id)arg1;
- (void)setCriterionIdentifier:(id)arg1;
- (id)objectSpecifier;
- (BOOL)performPostSyncingValidation;

@end

@interface MessageSigner : NSObject
{
    int _verificationStatus;
    NSArray *_certificates;
    struct OpaqueSecTrustRef *_trust;
    unsigned int _trustResult;
}

- (void)dealloc;
- (id)initWithCmsSignerInfo:(struct SecCmsSignerInfoStr *)arg1 trust:(struct OpaqueSecTrustRef *)arg2;
- (id)description;
- (id)label;
- (id)commonName;
- (id)emailAddress;
- (struct OpaqueSecTrustRef *)trust;
- (struct OpaqueSecCertificateRef *)signingCertificate;
- (id)certificates;
- (id)signingError;

@end

@interface MessageStore : SafeObserver
{
    BOOL _isReadOnly;
    BOOL _hasUnsavedChangesToMessageData;
    BOOL _haveOpenLockFile;
    BOOL _forceInvalidation;
    BOOL _isWritingChangesToDisk;
    BOOL _isTryingToClose;
    BOOL _compactOnClose;
    MailboxUid *_mailboxUid;
    MailAccount *_account;
    NSMutableArray *_allMessages;
    id _messageCountsAndSizesLock;
    struct {
        unsigned int unreadCount;
        unsigned int unseenCount;
        unsigned int deletedCount;
        unsigned int totalSize;
        unsigned int deletedSize;
    } _messageCountsAndSizes;
    id _cacheLock;
    NSCache *_headerDataCache;
    NSCache *_headerCache;
    NSCache *_bodyDataCache;
    NSCache *_bodyCache;
    NSMutableSet *_uniqueStrings;
    int _storeState;
    NSTimer *_timer;
    ActivityMonitor *_openMonitor;
    NSMutableDictionary *_fetchLockMap;
}

+ (void)initialize;
+ (id)_storeCacheMapTable;
+ (unsigned int)numberOfCurrentlyOpenStores;
+ (id)descriptionOfOpenStores;
+ (id)_storeCreationMarker;
+ (id)_copyRawAvailableStoreForUid:(id)arg1 wantsCreate:(BOOL)arg2 shouldCreate:(char *)arg3;
+ (id)currentlyAvailableStoreForUid:(id)arg1;
+ (id)currentlyAvailableStoresForAccount:(id)arg1;
+ (void)registerAvailableStore:(id)arg1 forUid:(id)arg2;
+ (void)removeStoreFromCache:(id)arg1;
+ (BOOL)createEmptyStoreIfNeededForPath:(id)arg1 notIndexable:(BOOL)arg2;
+ (BOOL)createEmptyStoreForPath:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)cheapStoreAtPathIsEmpty:(id)arg1;
+ (id)succesfulMessagesFromMessages:(id)arg1 unsuccessfulOnes:(id)arg2;
+ (int)copyMessages:(id)arg1 toMailboxUid:(id)arg2 shouldDelete:(BOOL)arg3;
- (void)queueSaveChangesInvocation;
- (id)willDealloc;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (void)_messageStoreCommonInit;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)openAsynchronously;
- (void)openAsynchronouslyWithOptions:(unsigned int)arg1;
- (void)openSynchronously;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (void)updateMetadataAsynchronously;
- (void)updateMetadata;
- (void)cleanupAsynchronously;
- (void)cleanupSynchronously;
- (void)willOpen;
- (void)didOpenWithMessages:(id)arg1;
- (void)cancelOpen;
- (void)writeUpdatedMessageDataToDisk;
- (void)invalidateSavingChanges:(BOOL)arg1;
- (id)account;
- (id)mailboxUid;
- (id)allMailboxUidRepresentations;
- (BOOL)isOpened;
- (id)displayName;
- (const char *)displayNameForLogging;
- (id)description;
- (BOOL)isTrash;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (void)structureDidChange;
- (void)messagesWereAdded:(id)arg1;
- (void)messagesWereCompacted:(id)arg1;
- (void)messagesWereUpdated:(id)arg1;
- (void)updateUserInfoToLatestValues;
- (unsigned int)totalMessageSize;
- (void)deletedCount:(unsigned int *)arg1 andSize:(unsigned int *)arg2;
- (unsigned int)totalCount;
- (unsigned int)_totalNonDeletedCount;
- (unsigned int)unreadCount;
- (unsigned int)unseenCount;
- (unsigned int)indexOfMessage:(id)arg1;
- (id)copyOfAllMessages;
- (id)mutableCopyOfAllMessages;
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;
- (void)addMessagesToAllMessages:(id)arg1;
- (id)_defaultRouterDestination;
- (id)routeMessages:(id)arg1;
- (id)finishRoutingMessages:(id)arg1 routed:(id)arg2;
- (id)routeMessages:(id)arg1 isUserAction:(BOOL)arg2;
- (BOOL)canRebuild;
- (void)rebuildTableOfContentsAsynchronously;
- (BOOL)canCompact;
- (void)doCompact;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(BOOL)arg2;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (void)undeleteMessages:(id)arg1;
- (void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(BOOL)arg2;
- (BOOL)allowsAppend;
- (BOOL)allowsOverwrite;
- (BOOL)allowsDeleteInPlace;
- (int)undoAppendOfMessageIDs:(id)arg1;
- (void)finishCopyOfMessages:(id)arg1 fromStore:(id)arg2 originalsWereDeleted:(BOOL)arg3;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5 forMove:(BOOL)arg6 error:(id *)arg7;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5 forMove:(BOOL)arg6;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 forMove:(BOOL)arg5;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2;
- (id)messageWithValue:(id)arg1 forHeader:(id)arg2 options:(unsigned int)arg3;
- (id)messageForMessageID:(id)arg1;
- (unsigned int)_numberOfMessagesToCache;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)bodyDataForMessage:(id)arg1;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)fullBodyDataForMessage:(id)arg1;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3;
- (id)headersForMessage:(id)arg1;
- (id)headersForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)dataForMimePart:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)uniquedString:(id)arg1;
- (id)colorForMessage:(id)arg1;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forToDos:(id)arg2;
- (void)setFlag:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;
- (void)setColor:(id)arg1 highlightTextOnly:(BOOL)arg2 forMessages:(id)arg3;
- (void)messageColorsNeedToBeReevaluated;
- (void)startSynchronization;
- (id)_getSerialNumberString;
- (void)setNumberOfAttachments:(unsigned long)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3 forMessage:(id)arg4;
- (void)updateNumberOfAttachmentsForMessages:(id)arg1;
- (void)updateNumberOfAttachmentsAndColorsForMessages:(id)arg1;
- (void)updateMessageColorsSynchronouslyForMessages:(id)arg1;
- (void)updateMessageColorsAsynchronouslyForMessages:(id)arg1;
- (void)setJunkMailLevel:(int)arg1 forMessages:(id)arg2;
- (void)setJunkMailLevel:(int)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3;
- (void)setJunkMailLevel:(int)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3 userRecorded:(BOOL)arg4;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (id)status;
- (void)fetchSynchronously;
- (void)fetchSynchronouslyForKnownChanges;
- (BOOL)setPreferredEncoding:(unsigned long)arg1 forMessage:(id)arg2;
- (void)suggestSortOrder:(id)arg1 ascending:(BOOL)arg2;
- (id)sortOrder;
- (BOOL)isSortedAscending;
- (void)todosDidChangeForMessages:(id)arg1 oldToDosByMessage:(id)arg2 newToDosByMessage:(id)arg3;
- (int)setToDo:(id)arg1 forMessage:(id)arg2 oldToDo:(id)arg3;
- (void)invalidateMessage:(id)arg1;
- (void)invalidateMessages:(id)arg1;
- (id)_aquireFetchLockForMessage:(id)arg1;
- (void)_releaseFetchLock:(id)arg1 forMessage:(id)arg2;
- (BOOL)forceInvalidation;
- (void)setForceInvalidation:(BOOL)arg1;
- (BOOL)hasUnsavedChangesToMessageData;
- (void)setHasUnsavedChangesToMessageData:(BOOL)arg1;
- (id)openMonitor;
- (void)setOpenMonitor:(id)arg1;
- (BOOL)isReadOnly;
- (void)setIsReadOnly:(BOOL)arg1;

@end

@interface MessageStringRenderContext : NSObject
{
    NSSet *_URLs;
    NSSet *_imageURLs;
    JunkRecorder *_junkRecorder;
    int _mode;
    NSMutableString *_buffer;
    BOOL _updateBodyFlags;
    int _imageCount;
    int _characterCount;
}

- (id)initForMode:(int)arg1;
- (id)renderString;
- (void)dealloc;
- (id)buffer;
- (void)setBuffer:(id)arg1;
- (BOOL)updateBodyFlags;
- (void)setUpdateBodyFlags:(BOOL)arg1;
- (int)mode;
- (id)imageURLs;
- (void)setImageURLs:(id)arg1;
- (id)URLs;
- (void)setURLs:(id)arg1;
- (int)characterCount;
- (void)setCharacterCount:(int)arg1;
- (int)imageCount;
- (void)setImageCount:(int)arg1;
- (id)junkRecorder;
- (void)setJunkRecorder:(id)arg1;

@end

@interface MessageStringUniquer : NSObject
{
    NSMapTable *_stringsTable;
}

- (id)init;
- (id)copyUniquedStringForIndex:(long long)arg1;
- (void)setUniquedString:(id)arg1 forIndex:(long long)arg2;
- (id)description;
- (void)dealloc;

@end

@interface MessageThread : Message
{
    NSMutableArray *_filteredMessages;
    NSString *_formattedUnreadMessageCount;
    NSMutableDictionary *_pendingChanges;
    Message *_newestMessage;
    Message *_oldestMessage;
    Message *_realNewestMessage;
    Message *_oldestUnreadMessage;
    Message *_messageWithHighestLibraryID;
    Message *_messageWithHighestRemoteID;
    Message *_messageWithHighestNumberWithinStores;
    unsigned int _unreadMessageCount;
    unsigned int _flaggedMessageCount;
    unsigned int _junkMessageCount;
    unsigned int _attachmentCount;
    BOOL _updateSubjectEtcUponClosing;
    BOOL _isThreadOpen;
    BOOL _showDateInSubject;
    BOOL _containsOnlyNotes;
}

+ (id)messagesByExpandingThreads:(id)arg1;
+ (id)_storeForMailbox:(id)arg1 fromStores:(id)arg2 cache:(id)arg3;
+ (id)findNewestMessageInMessages:(id)arg1;
+ (id)findOldestUnreadMessageInMessages:(id)arg1;
+ (id)findMessageWithHighestLibraryIDInMessages:(id)arg1;
+ (id)findMessageWithHighestRemoteIDInMessages:(id)arg1;
- (id)initWithMessages:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)filteredMessages;
- (void)addMessages:(id)arg1 usingSortFunction:(void *)arg2 context:(struct _MessageSortingInformation *)arg3 makePending:(BOOL)arg4;
- (void)deleteMessage:(id)arg1 makePending:(BOOL)arg2;
- (BOOL)commitPendingChangesForSeriesID:(id)arg1;
- (void)discardPendingChangesForSeriesID:(id)arg1;
- (BOOL)flagsHaveChanged;
- (void)updateSubjectEtc:(BOOL)arg1;
- (id)formattedUnreadMessageCount;
- (unsigned int)numberOfFilteredMessages;
- (unsigned int)numberOfPendingFilteredMessages;
- (id)pendingFilteredMessages;
- (unsigned int)numberOfUnreadMessages;
- (void)setNewestMessage:(id)arg1;
- (void)setOldestMessage:(id)arg1;
- (id)to;
- (id)subject;
- (double)dateReceivedAsTimeIntervalSince1970;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (id)sender;
- (id)senderAddressComment;
- (id)messageID;
- (id)messageStore;
- (id)messageBody;
- (unsigned int)messageSize;
- (unsigned int)numberOfAttachments;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isThread;
- (BOOL)isOpen;
- (void)setIsOpen:(BOOL)arg1;
- (BOOL)willBeDeletedIfMessagesAreDeleted:(id)arg1;
- (void)sortMessagesUsingFunction:(void *)arg1 context:(struct _MessageSortingInformation *)arg2 makePending:(BOOL)arg3;
- (void)invertOrderOfMessagesMakePending:(BOOL)arg1;
- (id)oldestMessage;
- (id)newestMessage;
- (id)oldestUnreadMessage;
- (void)_setJunkFlags;
- (id)_unlockedMessageWithHighestLibraryID;
- (id)messageWithHighestLibraryID;
- (id)_unlockedMessageWithHighestRemoteID;
- (id)messageWithHighestRemoteID;
- (id)messageWithHighestNumberWithinStores:(id)arg1;
- (id)mailbox;
- (id)preferredEmailAddressToReplyWith;
- (BOOL)containsOnlyNotes;
- (void)setContainsOnlyNotes:(BOOL)arg1;
- (BOOL)showDateInSubject;
- (void)setShowDateInSubject:(BOOL)arg1;
- (BOOL)isThreadOpen;
- (void)setIsThreadOpen:(BOOL)arg1;

@end

@interface MessageTracer : NSObject
{
}

+ (void)messageTraceOperationError:(id)arg1 domainPrefix:(id)arg2 domainSuffix:(id)arg3 uuid:(id)arg4 duration:(double)arg5 count:(unsigned int)arg6 size:(unsigned int)arg7;
+ (void)messageTraceResult:(char *)arg1 resultCount:(unsigned int)arg2 domainPrefix:(id)arg3 domainSuffix:(id)arg4 resultSignature:(id)arg5 extraStatus:(id)arg6;
+ (void)messageTraceResult:(char *)arg1 domain:(id)arg2 signature:(id)arg3;

@end

@interface MessageURLProtocol : NSURLProtocol
{
}

+ (void)initialize;
+ (BOOL)canInitWithRequest:(id)arg1;
+ (id)canonicalRequestForRequest:(id)arg1;
+ (BOOL)requestIsCacheEquivalent:(id)arg1 toRequest:(id)arg2;
- (void)startLoading;
- (void)stopLoading;

@end

@interface OutgoingMessage : Message
{
    NSData *rawData;
    NSString *remoteID;
    NSString *existingRemoteID;
    unsigned int bodyOffset;
    unsigned int localAttachmentsSize;
    MessageBody *messageBody;
    MutableMessageHeaders *messageHeaders;
}

- (void)dealloc;
- (id)bodyData;
- (id)messageStore;
- (id)messageBodyIfAvailable;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (id)messageDataIncludingFromSpace:(BOOL)arg1;
- (id)mutableHeaders;
- (void)setMutableHeaders:(id)arg1;
- (id)headers;
- (id)headersIfAvailable;
- (unsigned int)messageSize;
- (void)setRawData:(id)arg1 offsetOfBody:(unsigned int)arg2;
- (void)setLocalAttachmentsSize:(unsigned int)arg1;
- (void)setRemoteID:(id)arg1;
- (id)remoteID;
- (id)existingRemoteID;
- (void)setExistingRemoteID:(id)arg1;
- (id)messageBody;
- (void)setMessageBody:(id)arg1;

@end

@interface _OutgoingMessageBody : MessageBody
{
    NSMutableData *rawData;
}

- (void)setMessage:(id)arg1;
- (void)clearMessageWithoutReleasing;
- (void)dealloc;
- (id)rawData;
- (void)setRawData:(id)arg1;
- (id)mutableData;

@end

@interface MessageWriter : NSObject
{
    unsigned int _createsMimeAlternatives:1;
    unsigned int _createsRichText:1;
    unsigned int _createsPlainTextOnly:1;
    unsigned int _allows8BitMimeParts:1;
    unsigned int _allowsBinaryMimeParts:1;
    unsigned int _allowsAppleDoubleAttachments:1;
    unsigned int _signsOutput:1;
    unsigned int _encryptsOutput:1;
    unsigned int _shouldConvertCompositeImages:1;
    BOOL _shouldMarkNonresizableAttachmentData;
    unsigned int _preferredEncoding;
    unsigned int _encodingHint;
}

+ (id)domainHintForResentIDFromHeaders:(id)arg1 hasResentFromHeaders:(char *)arg2;
- (id)init;
- (id)createDataForAttributedString:(id)arg1;
- (void)appendDataForMimePart:(id)arg1 toData:(id)arg2 withPartData:(id)arg3;
- (id)createBounceMessageForMessage:(id)arg1;
- (id)createMessageByRemovingAttachmentsFromMessage:(id)arg1;
- (id)createMessageWithAttributedString:(id)arg1 headers:(id)arg2;
- (id)createMessageWithHtmlString:(id)arg1 plainTextAlternative:(id)arg2 otherHtmlStringsAndAttachments:(id)arg3 headers:(id)arg4;
- (id)createMessageWithHtmlString:(id)arg1 attachments:(id)arg2 headers:(id)arg3;
- (id)createMessageWithBodyData:(id)arg1 headers:(id)arg2;
- (BOOL)createsMimeAlternatives;
- (void)setCreatesMimeAlternatives:(BOOL)arg1;
- (BOOL)createsPlainTextOnly;
- (void)setCreatesPlainTextOnly:(BOOL)arg1;
- (BOOL)createsRichText;
- (void)setCreatesRichText:(BOOL)arg1;
- (BOOL)allows8BitMimeParts;
- (void)setAllows8BitMimeParts:(BOOL)arg1;
- (BOOL)allowsBinaryMimeParts;
- (void)setAllowsBinaryMimeParts:(BOOL)arg1;
- (BOOL)allowsAppleDoubleAttachments;
- (void)setAllowsAppleDoubleAttachments:(BOOL)arg1;
- (unsigned long)preferredEncoding;
- (void)setPreferredEncoding:(unsigned long)arg1;
- (unsigned long)encodingHint;
- (void)setEncodingHint:(unsigned long)arg1;
- (unsigned long)_preferredEncodingUsingHintIfNecessary;
- (BOOL)signsOutput;
- (void)setSignsOutput:(BOOL)arg1;
- (BOOL)encryptsOutput;
- (void)setEncryptsOutput:(BOOL)arg1;
- (void)setShouldConvertCompositeImages:(BOOL)arg1;
- (void)setShouldMarkNonresizableAttachmentData:(BOOL)arg1;

@end

@interface MetadataLogger : NSObject
{
    BOOL _logiCalToDoSync;
    BOOL _logStoresToDoSync;
    BOOL _logInternal;
    BOOL _logCommits;
    BOOL _logReconciler;
    NSArray *_logToDoActivityOnHost;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (void)logToDos:(id)arg1;
- (void)logCalendars:(id)arg1;
- (void)addingToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)deletingToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)updatingToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)commitAddingToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)commitDeletingToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)commitUpdatingToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)toDosFromIMAP:(id)arg1;
- (void)toDosFromiCal:(id)arg1;
- (void)messageNotToDo:(id)arg1;
- (void)updatingToDoWithID:(id)arg1 newRemoteID:(id)arg2;
- (void)imapToDosToInsert:(id)arg1 imapToDosToUpdate:(id)arg2;
- (void)libraryToDoStore:(id)arg1 isAddingToDos:(id)arg2;
- (void)libraryToDoStore:(id)arg1 isUpdatingToDos:(id)arg2;
- (void)libraryToDoStore:(id)arg1 isDeletingToDos:(id)arg2;
- (void)libraryToDoIMAPStore:(id)arg1 isAddingToDos:(id)arg2;
- (void)libraryToDoIMAPStore:(id)arg1 isUpdatingToDos:(id)arg2;
- (void)libraryToDoIMAPStore:(id)arg1 isDeletingToDos:(id)arg2;
- (void)startingReconciliationForMailbox:(long long)arg1 requester:(id)arg2;
- (void)finishedReconciliationForMailbox:(long long)arg1 requester:(id)arg2;
- (void)storeWithMailboxID:(long long)arg1 hasAdds:(id)arg2 updates:(id)arg3 deletes:(id)arg4;
- (void)cacheWithMailboxID:(long long)arg1 hasAdds:(id)arg2 updates:(id)arg3 deletes:(id)arg4;
- (void)analyzerWorkingWithStoreSnapshot:(id)arg1 referenceSnapshot:(id)arg2 cacheSnapshot:(id)arg3;
- (void)aboutToAnalyzeDifferenceTable:(id)arg1;
- (void)processedDifferenceTableExpression:(id)arg1 result:(id)arg2;
- (void)calendarsFromiCal:(id)arg1;
- (void)addingCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)updatingCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)deletingCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (unsigned int)nextCommandNumber;

@end

@interface MetadataManager : NSObject <ToDosCacheListener, ReconciliationAgent>
{
    id <CalendarStoreConduit> _calendarStore;
    Class _libraryClass;
    NSMutableArray *_searchStores;
    NSMutableArray *_reconcilingIDs;
    NSRecursiveLock *_lock;
    ToDoChangesQueue *_localChangesQueue;
    ToDoChangesQueue *_calendarStoreChangesQueue;
    NSTimer *_changesTimer;
    ToDosCache *_todosCache;
    ToDoCalendars *_todoCalendars;
    NSMutableDictionary *_reconciliationAddsByMailboxID;
    NSMutableDictionary *_reconciliationUpdatesByMailboxID;
    NSMutableDictionary *_reconciliationDeletesByMailboxID;
    NSMutableSet *_updatedToDoIDSForReconciler;
    NSMutableSet *_todosToNotUpdate;
}

+ (void)initialize;
+ (id)sharedInstance;
+ (BOOL)isReady;
- (id)metadataInvocationQueue;
- (void)_addInvocationToQueue:(id)arg1;
- (id)initWithCalendarStoreConduitClass:(Class)arg1 libraryClass:(Class)arg2 todoCalendars:(id)arg3;
- (void)dealloc;
- (void)finalize;
- (BOOL)canSyncWithIMAP;
- (BOOL)canSyncWithCalendarStore;
- (void)todoAddedToCache:(id)arg1;
- (void)todoRemovedFromCache:(id)arg1;
- (BOOL)isReconcilingMailboxID:(long long)arg1;
- (BOOL)setReconcilingFlag:(BOOL)arg1 forMailboxID:(long long)arg2;
- (void)startAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)finishAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)prepareToReconcileForMailboxID:(long long)arg1;
- (void)startToReconcileForMailboxID:(long long)arg1;
- (void)applyReconcilerChangesForMailboxID:(long long)arg1;
- (void)finishReconciliationForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
- (void)processAdds:(id)arg1 updates:(id)arg2 deletes:(id)arg3 mailboxID:(long long)arg4;

@end

@interface MetadataManagerInvocationQueue : InvocationQueue
{
}

@end

@interface MFAssertionHandler : NSAssertionHandler
{
}

+ (void)installDefaultAssertionHandler;
+ (id)_Message_currentHandler;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 file:(id)arg3 lineNumber:(int)arg4 description:(id)arg5;
- (void)handleFailureInFunction:(id)arg1 file:(id)arg2 lineNumber:(int)arg3 description:(id)arg4;
- (void)_handleFailureWithPreamble:(id)arg1 description:(id)arg2 arguments:(char *)arg3;

@end

@interface MFError : NSError <NSAlertDelegate>
{
    NSMutableDictionary *_moreUserInfo;
}

+ (id)errorWithDomain:(id)arg1 code:(int)arg2 localizedDescription:(id)arg3;
+ (id)errorWithDomain:(id)arg1 code:(int)arg2 localizedDescription:(id)arg3 title:(id)arg4 helpTag:(id)arg5 userInfo:(id)arg6;
+ (id)errorWithException:(id)arg1;
- (id)initWithError:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setUserInfoObject:(id)arg1 forKey:(id)arg2;
- (id)userInfo;
- (id)localizedDescription;
- (id)moreInfo;
- (id)helpAnchor;
- (id)shortDescription;
- (void)setLocalizedDescription:(id)arg1;
- (void)setMoreInfo:(id)arg1;
- (void)setHelpTag:(id)arg1;
- (void)setShortDescription:(id)arg1;
- (void)useGenericDescription:(id)arg1;
- (BOOL)alertShowHelp:(id)arg1;
- (void)dealloc;

@end

@interface MFInstantOff : NSObject
{
}

+ (void)initialize;
+ (void)enableSuddenTermination;
+ (void)disableSuddenTermination;

@end

@interface MFUUID : NSObject <NSCopying>
{
    struct __CFUUID *_uuidRef;
}

+ (id)uuid;
+ (id)uuidWithString:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithString:(id)arg1;
- (id)initWithBytes:(CDStruct_bd2f613f *)arg1;
- (id)initWithUUIDRef:(struct __CFUUID *)arg1;
- (struct __CFUUID *)getCFUUID;
- (CDStruct_bd2f613f)bytes;
- (unsigned int)length;
- (id)dataValue;
- (id)stringValue;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToString:(id)arg1;
- (unsigned int)hash;
- (void)dealloc;

@end

@interface MimePartEnumerator : NSEnumerator
{
    BOOL _onlyAttachments;
    BOOL _isFirstIteration;
    MimePart *_currentPart;
}

- (void)_setCurrentPart:(id)arg1;
- (id)initWithMimeBody:(id)arg1 onlyAttachments:(BOOL)arg2;
- (void)dealloc;
- (id)nextObject;

@end

@interface MimeBody : MessageBody
{
    MimePart *_topLevelPart;
    unsigned int _preferredTextEncoding;
    NSData *_bodyData;
    unsigned int _preferredAlternative:16;
    unsigned int _numAlternatives:16;
}

+ (void)initialize;
+ (id)versionString;
+ (id)createMimeBoundary;
- (id)attributedString;
- (id)init;
- (void)dealloc;
- (id)topLevelPart;
- (void)setTopLevelPart:(id)arg1;
- (id)allPartsEnumerator;
- (id)attachmentPartsEnumerator;
- (unsigned long)preferredTextEncoding;
- (void)setPreferredTextEncoding:(unsigned long)arg1;
- (BOOL)isSignedByMe;
- (id)mimeType;
- (id)mimeSubtype;
- (id)partWithNumber:(id)arg1;
- (void)calculateNumberOfAttachmentsIfNeeded;
- (BOOL)_isPossiblySignedOrEncrypted;
- (void)decodeIfNecessary;
- (BOOL)hasAttachments;
- (unsigned long)numberOfAttachmentsSigned:(char *)arg1 encrypted:(char *)arg2;
- (id)attachments;
- (id)attachmentViewControllers;
- (id)attachmentFilenames;
- (BOOL)isHTML;
- (BOOL)isRich;
- (BOOL)isMultipartRelated;
- (BOOL)isTextPlain;
- (int)numberOfAlternatives;
- (void)setPreferredAlternative:(int)arg1;
- (int)preferredAlternative;
- (id)preferredAlternativePart;
- (id)preferredBodyPart;
- (id)textHtmlPart;
- (id)webArchive;
- (id)parsedMessage;
- (id)dataForMimePart:(id)arg1;
- (id)bodyData;
- (void)setBodyData:(id)arg1;
- (void)flushCachedData;

@end

@interface MimeCharset : NSObject
{
    unsigned int _encoding;
    NSString *_primaryLanguage;
    NSString *_charsetName;
    unsigned int _coversLargeUnicodeSubset:1;
    unsigned int _useBase64InHeaders:1;
    unsigned int _canBeUsedForOutgoingMessages:1;
}

+ (id)allMimeCharsets;
+ (id)charsetForEncoding:(unsigned long)arg1;
+ (id)preferredMimeCharset;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)initWithEncoding:(unsigned long)arg1;
- (void)dealloc;
- (unsigned long)encoding;
- (id)charsetName;
- (BOOL)canBeUsedForOutgoingMessages;
- (BOOL)coversLargeUnicodeSubset;
- (BOOL)useBase64InHeaders;
- (id)displayName;
- (id)primaryLanguage;
- (id)description;

@end

@interface MimeEnrichedReader : NSObject
{
    CDStruct_4167bb2e _inputBuffer;
    int _currentIndex;
    int _inputLength;
    unsigned int _noFillLevel:30;
    unsigned int _eatOneNewline:1;
    unsigned int _insideComment:1;
    int _lastQuoteLevel;
    struct __CFArray *_commandStack;
    id _outputString;
    NSMutableString *_outputBuffer;
    float _indentWidth;
    BOOL outputShouldBeHTML;
}

+ (id)punctuationSet;
+ (id)parenSet;
- (id)init;
- (void)mismatchError:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (void)appendStringToBuffer:(id)arg1;
- (void)resetStateWithString:(id)arg1 outputString:(id)arg2;
- (void)nowWouldBeAGoodTimeToAppendToTheAttributedString;
- (void)fixConsecutiveSpaces:(id)arg1;
- (void)closeUpQuoting;
- (void)handleNoParameterCommand:(const CDStruct_3441fd00 *)arg1;
- (void)setupFontStackEntry:(struct _CommandStackEntry *)arg1;
- (void)beginCommand:(id)arg1;
- (void)endCommand:(id)arg1;
- (void)parseParameterString:(id)arg1;
- (id)currentFont;
- (int)readTokenInto:(id *)arg1;
- (void)convertRichTextString:(id)arg1 intoOutputString:(id)arg2;
- (void)convertEnrichedString:(id)arg1 intoOutputString:(id)arg2;
- (void)convertEnrichedString:(id)arg1 intoPlainOutputString:(id)arg2;

@end

@interface MimeEnrichedWriter : NSObject
{
    NSAttributedString *_attributedString;
    NSString *_string;
    CDStruct_4167bb2e _stringBuffer;
    NSFont *_defaultFont;
    NSFont *_defaultFixedPitchFont;
    float _defaultPointSize;
    _CommandStackEntry_a91ec601 *_commandStack;
    _CommandStackEntry_a91ec601 *_topOfStack;
    struct EnrichedState _currentState;
    unsigned int _currentLineStart;
    unsigned int _lastSpace;
}

- (void)setState:(struct EnrichedState *)arg1 fromAttributes:(id)arg2;
- (void)setState:(struct EnrichedState *)arg1 fromStackEntry:(struct _CommandStackEntry *)arg2;
- (void)dealloc;
- (void)finalize;
- (id)convertAttributedString:(id)arg1;
- (void)updateOutput:(id)arg1 forAttributes:(id)arg2 range:(struct _NSRange)arg3;
- (void)appendTextFromRange:(struct _NSRange)arg1 toString:(id)arg2;

@end

@interface MimePart : NSObject
{
    int _typeCode;
    int _subtypeCode;
    NSString *_type;
    NSString *_subtype;
    NSMutableDictionary *_bodyParameters;
    NSString *_contentTransferEncoding;
    id _encryptSignLock;
    BOOL _isMimeEncrypted;
    BOOL _isMimeSigned;
    MessageBody *_decryptedMessageBody;
    Message *_decryptedMessage;
    MessageStore *_decryptedMessageStore;
    NSMutableDictionary *_otherIvars;
    struct _NSRange _range;
    id _parentOrBody;
    MimePart *_nextPart;
}

- (void)dealloc;
- (void)finalize;
- (id)init;
- (int)typeCode;
- (id)type;
- (void)setType:(id)arg1;
- (int)subtypeCode;
- (id)subtype;
- (void)setSubtype:(id)arg1;
- (BOOL)isType:(id)arg1 subtype:(id)arg2;
- (BOOL)isTypeCode:(int)arg1 subtypeCode:(int)arg2;
- (id)bodyParameterForKey:(id)arg1;
- (void)setBodyParameter:(id)arg1 forKey:(id)arg2;
- (id)bodyParameterKeys;
- (id)disposition;
- (void)setDisposition:(id)arg1;
- (id)dispositionParameterForKey:(id)arg1;
- (void)setDispositionParameter:(id)arg1 forKey:(id)arg2;
- (id)dispositionParameterKeys;
- (id)contentDescription;
- (void)setContentDescription:(id)arg1;
- (id)contentID;
- (void)setContentID:(id)arg1;
- (id)contentIDURLString;
- (id)contentLocation;
- (void)setContentLocation:(id)arg1;
- (id)languages;
- (void)setLanguages:(id)arg1;
- (id)parentPart;
- (id)firstChildPart;
- (id)nextSiblingPart;
- (id)subparts;
- (id)subpartAtIndex:(int)arg1;
- (void)setSubparts:(id)arg1;
- (void)addSubpart:(id)arg1;
- (struct _NSRange)range;
- (void)setRange:(struct _NSRange)arg1;
- (id)bodyData;
- (id)bodyConvertedFromFlowedText;
- (id)mimeBody;
- (void)setMimeBody:(id)arg1;
- (id)description;
- (id)attachmentFilenameWithHiddenExtension:(char *)arg1;
- (id)attachmentFilename;
- (BOOL)isSigned;
- (BOOL)isEncrypted;
- (BOOL)hasCachedDataInStore;
- (unsigned long)numberOfAttachments;
- (void)getNumberOfAttachments:(unsigned int *)arg1 isSigned:(char *)arg2 isEncrypted:(char *)arg3;
- (id)attachments;
- (id)attachmentFilenames;
- (unsigned long)textEncoding;
- (unsigned int)approximateRawSize;
- (unsigned int)approximateDecodedSize;
- (BOOL)isReadableText;
- (BOOL)isImage;
- (BOOL)isCalendar;
- (BOOL)isToDo;
- (BOOL)isStationeryImage;
- (void)markAsStationeryImage;
- (id)_partThatIsAttachment;
- (BOOL)isMessageExternalBodyWithURL;
- (BOOL)shouldConsiderInlineOverridingExchangeServer;
- (BOOL)isAttachment;
- (BOOL)isRich;
- (BOOL)isHTML;
- (BOOL)usesKnownSignatureProtocol;
- (id)_createAttachment;
- (id)_createFileWrapper;
- (id)_getMessageAttachment:(unsigned int)arg1;
- (id)attributedString;
- (id)fileWrapper;
- (id)_remoteFileWrapper;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned int)arg2;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)configureFileWrapper:(id)arg1;
- (id)startPart;
- (int)numberOfAlternatives;
- (id)alternativeAtIndex:(int)arg1;
- (id)signedData;
- (id)textPart;
- (id)textHtmlPart;
- (void)htmlString:(id *)arg1 createWebResource:(id *)arg2 forFileWrapper:(id)arg3 partNumber:(id)arg4;
- (id)htmlStringForMimePart:(id)arg1 attachment:(id)arg2;
- (id)decodedContent;
- (id)_archiveForData:(id)arg1 URL:(id)arg2 MIMEType:(id)arg3 textEncodingName:(id)arg4 frameName:(id)arg5 subresources:(id)arg6 subframeArchives:(id)arg7;
- (id)_archiveForData:(id)arg1 URL:(id)arg2 MIMEType:(id)arg3 textEncodingName:(id)arg4 frameName:(id)arg5;
- (id)_archiveForString:(id)arg1 URL:(id)arg2 needsPlainTextBodyClass:(BOOL)arg3;
- (id)_archiveForFileWrapper:(id)arg1 URL:(id)arg2;
- (id)_createArchiveWithConvertedPlainTextBodyClassFromArchive:(id)arg1;
- (id)parsedMessage;
- (id)webArchive;
- (id)decryptedMessageBodyIsEncrypted:(char *)arg1 isSigned:(char *)arg2;
- (id)todoPart;
- (void)clearCachedDecryptedMessageBody;
- (void)_setDecryptedMessageBody:(id)arg1 isEncrypted:(BOOL)arg2 isSigned:(BOOL)arg3;
- (id)decryptedMessageStore;
- (void)setDecryptedMessageStore:(id)arg1;
- (id)decryptedMessage;
- (void)setDecryptedMessage:(id)arg1;
- (id)decryptedMessageBody;
- (void)setDecryptedMessageBody:(id)arg1;
- (BOOL)isMimeSigned;
- (void)setIsMimeSigned:(BOOL)arg1;
- (BOOL)isMimeEncrypted;
- (void)setIsMimeEncrypted:(BOOL)arg1;
- (id)contentTransferEncoding;
- (void)setContentTransferEncoding:(id)arg1;

@end

@interface MimeTextAttachment : NSTextAttachment
{
    MimePart *_mimePart;
}

+ (id)attachmentWithInternalAppleAttachmentData:(id)arg1 mimeBody:(id)arg2;
- (void)dealloc;
- (id)initWithMimePart:(id)arg1 andFileWrapper:(id)arg2;
- (id)initWithFileWrapper:(id)arg1;
- (id)initWithMimePart:(id)arg1;
- (void)_forceDownloadOfFileWrapperInBackground:(id)arg1;
- (void)forceDownloadOfFileWrapperInBackground;
- (id)fileWrapperForcingDownload;
- (id)fileWrapperForcingDownloadEvenIfExternalBody:(BOOL)arg1;
- (id)mimePart;
- (void)setMimePart:(id)arg1;
- (unsigned int)approximateSize;
- (BOOL)isPlaceholder;
- (BOOL)hasBeenDownloaded;
- (BOOL)shouldDownloadAttachmentOnDisplay;

@end

@interface MonitoredInvocation : NSInvocation
{
    ActivityMonitor *_monitor;
}

+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 taskName:(id)arg3 priority:(unsigned char)arg4 canBeCancelled:(BOOL)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3 taskName:(id)arg4 priority:(unsigned char)arg5 canBeCancelled:(BOOL)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 taskName:(id)arg5 priority:(unsigned char)arg6 canBeCancelled:(BOOL)arg7;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 taskName:(id)arg6 priority:(unsigned char)arg7 canBeCancelled:(BOOL)arg8;
- (void)dealloc;
- (void)finalize;
- (id)monitor;
- (void)setMonitor:(id)arg1;
- (void)setShouldPromptUserOnTermination;
- (void)invoke;
- (unsigned char)priority;

@end

@interface MessageInvocation : NSInvocation
{
    unsigned char _priority;
}

+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 priority:(unsigned char)arg3;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3 priority:(unsigned char)arg4;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 priority:(unsigned char)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 priority:(unsigned char)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 object4:(id)arg6 priority:(unsigned char)arg7;
- (unsigned char)priority;
- (void)setPriority:(unsigned char)arg1;

@end

@interface MonitoredOperation : NSOperation
{
    ActivityMonitor *_parentMonitor;
    ActivityMonitor *_monitor;
}

- (id)init;
- (void)dealloc;
- (void)main;
- (id)activityString;
- (void)executeOperation;
- (id)monitor;
- (void)setMonitor:(id)arg1;
- (id)parentMonitor;
- (void)setParentMonitor:(id)arg1;

@end

@interface MutableMessageHeaders : MessageHeaders
{
    NSMutableDictionary *_headersAdded;
    NSMutableArray *_headersRemoved;
}

- (id)mutableCopy;
- (void)dealloc;
- (void)finalize;
- (id)allHeaderKeys;
- (BOOL)hasHeaderForKey:(id)arg1;
- (id)_createHeaderValueForKey:(id)arg1;
- (id)firstHeaderForKey:(id)arg1;
- (void)removeHeaderForKey:(id)arg1;
- (void)setHeader:(id)arg1 forKey:(id)arg2;
- (void)appendFromSpaceIfMissing;
- (void)_appendHeaderKey:(id)arg1 value:(id)arg2 toData:(id)arg3;
- (void)_appendAddedHeaderKey:(id)arg1 value:(id)arg2 toData:(id)arg3;
- (id)_encodedHeadersIncludingFromSpace:(BOOL)arg1;
- (void)setAddressList:(id)arg1 forKey:(id)arg2;
- (id)description;

@end

@interface NetworkController : NSObject
{
    struct __SCDynamicStore *_store;
    NSString *_domainName;
    unsigned int _waitingForDialToFinish:1;
    NSTimer *_notificationTimer;
    NSMutableSet *_watchedHosts;
}

+ (id)sharedInstance;
+ (id)subnetForIPAddress:(id)arg1;
+ (id)baseDomainsForDomains:(id)arg1;
+ (BOOL)hostnameIsFullyQualified:(id)arg1;
+ (id)applyIDNAToHostname:(id)arg1 encode:(BOOL)arg2;
+ (id)encodeAddressForIDNA:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (unsigned int)networkStatus;
- (id)domainName;
- (id)domainNames;
- (id)IPAddresses;
- (id)primaryEthernetAddressAsString;
- (BOOL)isHostReachable:(id)arg1;
- (void)startWatchingReachabilityOfHost:(id)arg1;

@end

@interface NeXTMbox : MessageStore
{
    NSData *_mboxData;
    TableOfContents *_toc;
    float _compactThreshold;
    BOOL _mboxIsOnSMB;
    BOOL _haveUpdatedMetadata;
    BOOL _importMode;
    BOOL _rebuildingTOC;
    NSData *_incomingMboxData;
}

+ (BOOL)createEmptyStoreForPath:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)cheapStoreAtPathIsEmpty:(id)arg1;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (void)dealloc;
- (void)finalize;
- (void)_releaseMboxData;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (id)incomingMessages;
- (id)messagesForImporter;
- (void)updateMetadata;
- (id)_lockFilePath;
- (void)_invalidate;
- (void)writeUpdatedMessageDataToDisk;
- (BOOL)canRebuild;
- (void)_rebuildTableOfContentsSynchronously;
- (void)_flushAllMessageData;
- (BOOL)tableOfContents:(id)arg1 loadedMessages:(id)arg2;
- (void)_resetAllMessages;
- (id)messageForMessageID:(id)arg1;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (BOOL)canCompact;
- (void)_compactMessageAtIndex:(unsigned int)arg1;
- (void)doCompact;
- (void)_deleteAttachments:(id)arg1;
- (id)_appendMessage:(id)arg1 toFile:(id)arg2;
- (void)_addIDsForAppendedMessages:(id)arg1 toArray:(id)arg2;
- (int)_appendMessages:(id)arg1 successes:(id *)arg2 failures:(id *)arg3 mboxName:(id)arg4 tableOfContents:(id)arg5;
- (BOOL)allowsAppend;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5 forMove:(BOOL)arg6 error:(id *)arg7;
- (int)undoAppendOfMessageIDs:(id)arg1;
- (void)_incorporateMailFromIncoming;
- (int)_writeMessagesToIncomingMail:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3;
- (void)suggestSortOrder:(id)arg1 ascending:(BOOL)arg2;
- (id)sortOrder;
- (BOOL)isSortedAscending;
- (BOOL)_shouldCallCompactWhenClosing;
- (BOOL)rebuildingTOC;
- (void)setRebuildingTOC:(BOOL)arg1;
- (float)compactThreshold;
- (void)setCompactThreshold:(float)arg1;

@end

@interface _NSDataMessageStoreMessage : Message
{
}

- (id)initWithStore:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)setMessageStore:(id)arg1;

@end

@interface NSDataMessageStore : MessageStore
{
    NSData *_data;
}

- (id)initWithData:(id)arg1;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (id)willDealloc;
- (void)dealloc;
- (id)storePath;
- (void)writeUpdatedMessageDataToDisk;
- (id)message;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;

@end

@interface RemotePlaceholderFileWrapper : PlaceholderFileWrapper
{
    NSURL *_url;
}

- (void)dealloc;
- (id)remoteAccessMimeType;
- (id)initWithURL:(id)arg1;
- (id)initDirectoryWithFileWrappers:(id)arg1;
- (id)initRegularFileWithContents:(id)arg1;
- (id)initSymbolicLinkWithDestination:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithSerializedRepresentation:(id)arg1;
- (BOOL)isRemotelyAccessed;
- (id)symbolicLinkDestination;
- (id)URL;
- (unsigned int)approximateSize;

@end

@interface PlaceholderFileWrapper : NSFileWrapper
{
}

- (BOOL)isPlaceholder;
- (BOOL)isRemotelyAccessed;

@end

@interface MessageKeychainManager : NSObject
{
}

+ (void)initialize;
+ (unsigned long)_protocolForAccountType:(id)arg1;
+ (long)_setPassword:(id)arg1 forKeychainItem:(struct OpaqueSecKeychainItemRef *)arg2;
+ (id)_passwordForHost:(id)arg1 username:(id)arg2 port:(unsigned short)arg3 protocol:(unsigned long)arg4 itemRef:(struct OpaqueSecKeychainItemRef **)arg5;
+ (id)passwordForHost:(id)arg1 username:(id)arg2 port:(unsigned short)arg3 protocol:(id)arg4;
+ (void)setPassword:(id)arg1 forHost:(id)arg2 username:(id)arg3 port:(unsigned short)arg4 protocol:(id)arg5;
+ (void)removePasswordForHost:(id)arg1 username:(id)arg2 port:(unsigned short)arg3 protocol:(id)arg4;
+ (id)_passwordForGenericAccount:(id)arg1 service:(id)arg2 itemRef:(struct OpaqueSecKeychainItemRef **)arg3;
+ (id)passwordForServiceName:(id)arg1 accountName:(id)arg2;
+ (void)setPassword:(id)arg1 forServiceName:(id)arg2 accountName:(id)arg3;
+ (void)removePasswordForServiceName:(id)arg1 accountName:(id)arg2;
+ (void)setSessionTrustedCertificates:(id)arg1 forHost:(id)arg2;
+ (id)sessionTrustedCertificatesForHost:(id)arg1;
+ (struct OpaqueSecCertificateRef *)copyTrustedSigningCertificateForAddress:(id)arg1;
+ (struct OpaqueSecCertificateRef *)copyEncryptionCertificateForAddress:(id)arg1;
+ (BOOL)canSignMessagesFromAddress:(id)arg1;
+ (BOOL)canEncryptMessagesToAddress:(id)arg1;
+ (BOOL)canEncryptMessagesToAddresses:(id)arg1 sender:(id)arg2;
+ (struct OpaqueSecPolicyRef *)copySSLPolicyForHost:(id)arg1 isClientCertificate:(BOOL)arg2;
+ (struct OpaqueSecPolicyRef *)copySMIMEPolicyForAddress:(id)arg1 usage:(unsigned short)arg2;

@end

@interface NSMailDelivery : NSObject
{
}

+ (void)_loadMailDefaults;
+ (void)_unloadMailDefaults;
+ (BOOL)deliverMessage:(id)arg1 headers:(id)arg2 format:(id)arg3 protocol:(id)arg4;
+ (BOOL)deliverMessage:(id)arg1 subject:(id)arg2 to:(id)arg3;
+ (BOOL)hasDeliveryClassBeenConfigured;

@end

@interface NTLMAuthenticator : SASLAuthenticator
{
    struct NtlmGenerator *_ntlmGeneratorRef;
    int _ntlmError;
}

- (void)dealloc;
- (void)finalize;
- (void)setAuthenticationState:(int)arg1;
- (id)responseForServerData:(id)arg1;

@end

@interface NTLMAuthScheme : AuthScheme
{
}

+ (void)initialize;
- (Class)authenticatorClassForAccount:(id)arg1;
- (BOOL)requiresDomain;
- (id)name;
- (id)humanReadableName;
- (BOOL)sendsPlainTextPasswords;
- (BOOL)hasEncryption;
- (int)securityLevel;

@end

@interface ParentalControlAccount : LocalAccount
{
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)parentalControlAccount;
+ (id)_accountWithPath:(id)arg1;
+ (id)originalAccountForIncomingMailbox:(id)arg1;
+ (id)allMailboxes;
+ (id)mailboxForAccount:(id)arg1;
+ (id)storeForMailbox:(id)arg1;
+ (id)storeForAccount:(id)arg1;
+ (id)_mailboxNameForAccount:(id)arg1;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (BOOL)isSyncable;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (BOOL)supportsNotes;
- (BOOL)supportsToDos;

@end

@interface ParentalControlManager : NSObject
{
    NSMutableSet *_pcStores;
    InvocationQueue *_tasks;
    NSDate *_lastCleanupDate;
    NSMutableArray *_recentRequests;
    BOOL _isDirty;
    BOOL _recentRequestsDirty;
    NSMutableSet *_pendingRequests;
}

+ (id)sharedManager;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)parentalControlDirectory;
- (BOOL)isInSpamProtectionMode;
- (id)headersRequiredForParentalControl;
- (void)deleteAccount:(id)arg1;
- (void)_cleanupPCStoresAfterDelay:(double)arg1;
- (void)_approveSenders:(id)arg1 sourcePCMailbox:(id)arg2 destinationAccount:(id)arg3;
- (void)_rejectSenders:(id)arg1 sourcePCMailbox:(id)arg2;
- (id)_openStoreForPCMailbox:(id)arg1 keepOpen:(BOOL)arg2;
- (id)_openStoreForPCMailbox:(id)arg1;
- (id)_openPCStoreForAccount:(id)arg1;
- (id)_makeRequestMessageForMessage:(id)arg1 isOutgoingMessage:(BOOL)arg2;
- (id)_deliverMessage:(id)arg1;
- (id)_recentRequestsFilePath;
- (id)_recentRequestsNoLock;
- (BOOL)_hasRecentlySentPermissionRequestForSender:(id)arg1;
- (void)_removeSendersFromRecentRequests:(id)arg1;
- (BOOL)_hasPendingRequestForSender:(id)arg1;
- (void)_requestApprovalForIncomingMessage:(id)arg1 srcStore:(id)arg2 pcStore:(id)arg3 messageInPCStore:(id)arg4;
- (void)_reallyRequestApprovalForIncomingMessage:(id)arg1 srcStore:(id)arg2 pcStore:(id)arg3 messageInPCStore:(id)arg4;
- (void)_approveAddresses:(id)arg1 responseFromAccount:(id)arg2;
- (void)_rejectAddresses:(id)arg1 responseFromAccount:(id)arg2;
- (void)_cleanupPCStore:(id)arg1;
- (void)_reallyCleanupPCStores;
- (void)_cleanupPCStores;
- (BOOL)processIncomingMessage:(id)arg1 messageIsParentResponse:(char *)arg2;
- (BOOL)haveEmailsBeenApproved:(id)arg1 unapprovedOnes:(id)arg2;
- (void)_deliverApprovalRequestMessage:(id)arg1 forOutgoingMessage:(id)arg2;
- (void)_requestApprovalForOutgoingMessage:(id)arg1 srcStore:(id)arg2;
- (BOOL)requestApprovalForOutgoingMessage:(id)arg1;
- (void)saveChanges;
- (id)_makeResponseMessageToRequest:(id)arg1 approve:(BOOL)arg2;
- (void)_deliverResponseMessage:(id)arg1 requestMessage:(id)arg2;
- (BOOL)_respondToRequest:(id)arg1 approve:(BOOL)arg2;
- (BOOL)approveRequest:(id)arg1;
- (BOOL)rejectRequest:(id)arg1;
- (BOOL)isEmail:(id)arg1 inEmailList:(id)arg2;
- (void)_approveEmailListChanged:(id)arg1;
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)arg1;
- (void)saveChangesWithDelay;

@end

@interface ParentalControlSettings : NSObject
{
}

+ (void)initialize;
+ (id)sharedInstance;
+ (BOOL)isEmail:(id)arg1 inEmailList:(id)arg2;
- (void)_updateCachedDataForEnabledState:(BOOL)arg1 approvedList:(BOOL)arg2 postNotification:(BOOL)arg3;
- (void)_reallyHandleDefaultsChange;
- (void)_defaultsDidChange;
- (void)_approveEmailListChanged:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (BOOL)isInSpamProtectionMode;
- (id)parentEmails;
- (BOOL)isParentEmail:(id)arg1;
- (BOOL)_isSelfEmail:(id)arg1;
- (id)_approvedEmails;
- (BOOL)hasEmailBeenApproved:(id)arg1;
- (BOOL)haveEmailsBeenApproved:(id)arg1 unapprovedOnes:(id)arg2;
- (id)_dictionaryFromEmail:(id)arg1;
- (BOOL)_approveEmail:(id)arg1;
- (id)approveEmails:(id)arg1;
- (BOOL)_rejectEmail:(id)arg1;
- (id)rejectEmails:(id)arg1;
- (double)parentalControlEnabledTimeIntervalSince1970;

@end

@interface ParentalControlStore : NeXTMbox
{
}

- (BOOL)_shouldCallCompactWhenClosing;
- (id)_defaultRouterDestination;
- (id)realAccount;
- (void)setParentalControlMessageState:(int)arg1 forMessage:(id)arg2;
- (void)setParentalControlMessageState:(int)arg1 forMessages:(id)arg2;
- (void)saveChanges;

@end

@interface ParsedMessage : NSObject <NSXMLParserDelegate>
{
    NSString *_html;
    NSString *_mimeType;
    NSURL *_baseURL;
    NSDictionary *_attachmentsByURL;
    NSArray *_stationeryBackgroundImageURLs;
    BOOL _isPlainText;
}

+ (id)parsedMessageWithWebArchive:(id)arg1 archiveIsMailInternal:(BOOL)arg2;
- (id)initWithWebArchive:(id)arg1;
- (id)initWithWebArchive:(id)arg1 archiveIsMailInternal:(BOOL)arg2;
- (void)dealloc;
- (void)addAttachment:(id)arg1 forURL:(id)arg2;
- (id)description;
- (void)setHtml:(id)arg1;
- (id)html;
- (void)_addWebArchiveDataToArray:(id)arg1;
- (id)attributedString;
- (void)setBaseURLFromHtml;
- (BOOL)isPlainText;
- (void)setIsPlainText:(BOOL)arg1;
- (id)stationeryBackgroundImageURLs;
- (void)setStationeryBackgroundImageURLs:(id)arg1;
- (id)attachmentsByURL;
- (void)setAttachmentsByURL:(id)arg1;
- (id)baseURL;
- (void)setBaseURL:(id)arg1;
- (id)mimeType;
- (void)setMimeType:(id)arg1;

@end

@interface MainPerformanceLogger : PerformanceLogger
{
    NSMutableArray *_subtests;
}

+ (void)startLoggingForArea:(id)arg1 test:(id)arg2;
+ (void)stopLoggingForArea:(id)arg1 test:(id)arg2;
+ (void)logMarker:(id)arg1;
- (void)dealloc;
- (id)addLoggerForSubtest:(id)arg1;
- (id)description;
- (id)subtests;
- (void)setSubtests:(id)arg1;

@end

@interface PerformanceLogger : NSObject
{
    NSCondition *_condition;
    NSString *_area;
    NSString *_test;
    NSString *_subtest;
    NSString *_key;
    double _startTime;
    double _totalDelta;
    unsigned int _count;
    BOOL _isFinished;
    BOOL _isMarker;
}

+ (void)initialize;
+ (id)startLoggingForArea:(id)arg1 test:(id)arg2 subtest:(id)arg3;
+ (id)stopLoggingForArea:(id)arg1 test:(id)arg2 subtest:(id)arg3;
+ (id)stopLoggingForArea:(id)arg1 test:(id)arg2 subtest:(id)arg3 count:(unsigned int)arg4 didFinish:(BOOL)arg5;
+ (id)_loggerForArea:(id)arg1 test:(id)arg2 subtest:(id)arg3;
+ (void)_addLogger:(id)arg1 forKey:(id)arg2;
+ (id)_keyForArea:(id)arg1 test:(id)arg2 subtest:(id)arg3;
- (id)initWithArea:(id)arg1 test:(id)arg2;
- (id)initWithArea:(id)arg1 test:(id)arg2 subtest:(id)arg3;
- (id)init;
- (id)description;
- (void)waitUntilFinished;
- (BOOL)isMarker;
- (void)setIsMarker:(BOOL)arg1;
- (BOOL)isFinished;
- (void)setIsFinished:(BOOL)arg1;
- (unsigned int)count;
- (void)setCount:(unsigned int)arg1;
- (double)totalDelta;
- (void)setTotalDelta:(double)arg1;
- (double)startTime;
- (void)setStartTime:(double)arg1;
- (id)key;
- (void)setKey:(id)arg1;
- (id)subtest;
- (void)setSubtest:(id)arg1;
- (id)test;
- (void)setTest:(id)arg1;
- (id)area;
- (void)setArea:(id)arg1;
- (id)condition;
- (void)setCondition:(id)arg1;

@end

@interface LoginAuthenticator : SASLAuthenticator
{
    BOOL _justSentPassword;
}

- (id)saslName;
- (id)responseForServerData:(id)arg1;
- (BOOL)justSentPlainTextPassword;

@end

@interface PlainAuthenticator : SASLAuthenticator
{
}

- (id)saslName;
- (id)responseForServerData:(id)arg1;
- (BOOL)justSentPlainTextPassword;

@end

@interface PlainAuthScheme : AuthScheme
{
}

- (Class)authenticatorClassForAccount:(id)arg1;
- (id)authenticatorForAccount:(id)arg1 connection:(id)arg2;
- (BOOL)canAuthenticateAccount:(id)arg1 connection:(id)arg2;
- (id)name;
- (id)humanReadableName;

@end

@interface POP3Connection : Connection
{
    NSMutableData *_sendBuffer;
    struct __CFDictionary *_listResults;
    struct __CFDictionary *_serverMessageIdsByNumber;
    NSData *_apopTimeStamp;
    id <POP3ConnectionDelegate> _delegate;
    unsigned long _numberOfMessagesAvailable;
    id _context;
    unsigned int _numberOfMessagesToFetch;
    unsigned int _numberOfMessagesFetched;
    unsigned int _totalBytesToFetch;
    unsigned int _totalBytesReceived;
    BOOL _connectionShouldPrefetchMessages;
    BOOL _hidingPassword;
    BOOL _currentlyFetchingMessage;
    int _activityMonitorKey;
}

- (id)init;
- (void)dealloc;
- (id)capabilities;
- (id)authenticationMechanisms;
- (BOOL)_teardownConnectionWithResult:(BOOL)arg1;
- (BOOL)authenticateUsingAccount:(id)arg1;
- (BOOL)_authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (int)_authenticateUsingHostname:(id)arg1 username:(id)arg2 password:(id)arg3 authenticator:(id)arg4;
- (int)_authenticateWithUsername:(id)arg1 password:(id)arg2;
- (int)quit;
- (BOOL)supportsAPOP;
- (int)doStat;
- (int)list:(unsigned long)arg1;
- (int)_getListResults;
- (int)getMessageNumbers:(const struct __CFArray **)arg1 andMessageIdsByNumber:(const struct __CFDictionary **)arg2;
- (id)messageIDForMessageNumber:(unsigned long)arg1;
- (void)setMessageID:(id)arg1 forMessageNumber:(unsigned long)arg2;
- (id)_retrieveMessage:(unsigned long)arg1 ofSize:(unsigned long)arg2 informDelegate:(BOOL)arg3;
- (int)_retr:(unsigned long)arg1;
- (int)dele:(unsigned long)arg1;
- (id)retainedMessageHeaderForMessageNumber:(unsigned long)arg1;
- (void)getTopOfMessageNumber:(unsigned long)arg1 intoMutableData:(id)arg2;
- (unsigned long)sizeOfMessageNumber:(unsigned long)arg1;
- (BOOL)messagesAvailable;
- (unsigned long)numberOfMessagesAvailable;
- (int)fetchMessages:(struct __CFArray *)arg1 totalBytes:(unsigned int)arg2;
- (int)deleteMessagesOnServer:(struct __CFArray *)arg1;
- (void)setDelegate:(id)arg1 context:(id)arg2;
- (int)_startTLSForSecurityLayerType:(int)arg1;
- (int)_readMultilineResponseWithMaxSize:(unsigned long)arg1 intoMutableData:(id)arg2 informDelegate:(BOOL)arg3;
- (int)_sendCommand:(const char *)arg1 withArguments:(id)arg2;
- (id)_copyReplyLineDataWithError:(id *)arg1;
- (id)_copyReplyLineData;
- (void)_parsePOPErrorFromData:(id)arg1 error:(id)arg2;
- (int)_getStatusFromReply;
- (int)_apopWithUsername:(id)arg1 password:(id)arg2;
- (int)_user:(id)arg1;
- (int)_pass:(id)arg1;
- (int)activityMonitorKey;
- (void)setActivityMonitorKey:(int)arg1;
- (BOOL)currentlyFetchingMessage;
- (void)setCurrentlyFetchingMessage:(BOOL)arg1;
- (unsigned int)totalBytesReceived;
- (void)setTotalBytesReceived:(unsigned int)arg1;
- (unsigned int)totalBytesToFetch;
- (void)setTotalBytesToFetch:(unsigned int)arg1;
- (unsigned int)numberOfMessagesFetched;
- (void)setNumberOfMessagesFetched:(unsigned int)arg1;
- (unsigned int)numberOfMessagesToFetch;
- (void)setNumberOfMessagesToFetch:(unsigned int)arg1;
- (id)context;
- (void)setContext:(id)arg1;

@end

@interface POP3FetchStore : MessageStore <RouterStore, POP3ConnectionDelegate>
{
    BOOL _lastConnectionFailed;
    BOOL _routerCancelled;
    NSMutableSet *_skippedMessageIds;
    struct __CFArray *_messageNumbersToDelete;
}

- (id)initWithPOPAccount:(id)arg1;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (void)dealloc;
- (void)deleteMessages:(id)arg1;
- (void)fetchSynchronously;
- (BOOL)_createDirectoryIfNeeded;
- (id)_authenticatedConnection;
- (void)_backgroundFetchFailed:(id)arg1;
- (BOOL)_firstAndLast:(unsigned long)arg1 onConnection:(id)arg2 alreadySeen:(id)arg3;
- (id)_messageIDForNumber:(unsigned long)arg1 serverIdsByNumber:(struct __CFDictionary *)arg2 connection:(id)arg3;
- (BOOL)_shouldDeleteSeenMessage:(id)arg1 messageID:(id)arg2 deletionPolicy:(int)arg3 cutoffDate:(id)arg4 url:(id)arg5 inbox:(id)arg6;
- (void)_removeDeletedMessagesWithNumbers:(struct __CFArray *)arg1 fromSeenMessageManager:(id)arg2 connection:(id)arg3;
- (void)_deleteMessagesMarkedForDeletionUsingManager:(id)arg1;
- (int)_closeConnection:(id)arg1;
- (void)_addMessageNumberToDelete:(unsigned long)arg1;
- (void)_clearMessageNumbersToDelete;
- (struct __CFArray *)_copyMessageNumbersToDelete;
- (id)mailboxUid;
- (BOOL)isOpened;
- (id)displayName;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)messageForMessageID:(id)arg1;
- (void)writeUpdatedMessageDataToDisk;
- (void)_setNeedsAutosave;
- (void)_cancelAutosave;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (BOOL)connectionShouldPrefetchMessages;
- (void)connection:(id)arg1 receivedNumberOfBytes:(unsigned int)arg2;
- (int)connection:(id)arg1 willRetrieveMessageNumber:(unsigned long)arg2 header:(id)arg3 size:(unsigned long)arg4;
- (void)connection:(id)arg1 didRetrieveData:(id)arg2 forMessageNumber:(unsigned long)arg3;
- (void)cancel;
- (id)_defaultRouterDestination;
- (void)messagesWillBeRouted:(id)arg1;
- (void)messagesWereRouted:(id)arg1;
- (BOOL)routerCancelled;
- (void)setRouterCancelled:(BOOL)arg1;

@end

@interface POPAccount : MailAccount
{
    POP3FetchStore *_fetcher;
    ActivityMonitor *_fetchMonitor;
    NSLock *_connectionActivityLock;
    id _seenMessagesManagerLock;
    BOOL _fetcherNeedsReset;
    BOOL _deletingMessages;
    BOOL _hasDoneBackgroundSynchronization;
    BOOL _shouldAttemptAPOP;
}

+ (id)accountTypeString;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (BOOL)supportsNotes;
- (BOOL)supportsToDos;
- (BOOL)_configureFetcherObject;
- (void)fetchSynchronously;
- (void)resetFetcher;
- (void)releaseAllConnections;
- (BOOL)canGoOffline;
- (void)setIsOffline:(BOOL)arg1;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)updateFromSyncedDictionary:(id)arg1;
- (unsigned long)defaultPortNumber;
- (unsigned long)defaultSecurePortNumber;
- (id)serviceName;
- (id)secureServiceName;
- (id)saslProfileName;
- (BOOL)requiresAuthentication;
- (Class)storeClass;
- (Class)todoStoreClass;
- (Class)connectionClass;
- (id)preferredAuthScheme;
- (BOOL)isSyncable;
- (id)mailboxPathExtension;
- (id)primaryMailboxUid;
- (BOOL)containsMailboxes;
- (BOOL)canCreateNewMailboxes;
- (BOOL)canMailboxBeRenamed:(id)arg1;
- (BOOL)_setPath:(id)arg1;
- (int)bigMessageWarningSize;
- (void)setBigMessageWarningSize:(int)arg1;
- (BOOL)shouldAttemptAPOP;
- (void)setShouldAttemptAPOP:(BOOL)arg1;
- (void)setMessageDeletionPolicy:(int)arg1;
- (void)setDelayedMessageDeletionInterval:(unsigned int)arg1;
- (int)messageDeletionPolicy;
- (unsigned int)delayedMessageDeletionInterval;
- (BOOL)deletingMessages;
- (void)deleteMessagesNow:(id)arg1;
- (void)deleteSeenMessagesNow;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned int)arg2;
- (void)acquireConnectionActivityLock;
- (void)relinquishConnectionActivityLock;
- (id)createSeenMessagesManager;
- (void)_addAccountAndSeenMessagesToMessageManager;
- (id)_URLPersistenceScheme;
- (id)_infoForMatchingURL:(id)arg1;
- (id)storeForMailboxUid:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)todoCalendarsAccount;

@end

@interface POPMessage : Message
{
    unsigned long _messageNumber;
    NSString *_messageID;
    NSData *_messageData;
}

- (id)initWithPOP3FetchStore:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (unsigned long)messageNumber;
- (void)setMessageNumber:(unsigned long)arg1;
- (id)messageData;
- (void)setMessageData:(id)arg1;
- (unsigned int)messageSize;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (id)messageID;
- (void)setMessageID:(id)arg1;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;

@end

@interface POPSizeEngine : SizeEngine
{
    NSMutableDictionary *_infoByMessageID;
}

- (id)initWithAccount:(id)arg1;
- (void)dealloc;
- (id)allMessageIDs;
- (id)infoWithKey:(id)arg1 forMessageWithID:(id)arg2;
- (id)_createMessageInfoFromMessageHeaders:(id)arg1;
- (id)_remoteMailboxURL;
- (void)_runWorkerThread;
- (BOOL)_prepareToRefresh;
- (void)_fetchCompleted:(id)arg1;
- (void)_deleteServerMessagesCompleted:(id)arg1;
- (void)_messageFlagsChanged:(id)arg1;

@end

@interface PreparedStatementManager : NSObject <NSCacheDelegate>
{
    NSMutableDictionary *_statementCachesByDB;
    BOOL _forceFinalize;
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)dealloc;
- (id)_statementsForDB:(id)arg1;
- (id)_extraStatementsForThread;
- (void)_addToCache:(id)arg1 inDBKey:(id)arg2 forPatternString:(id)arg3;
- (id)checkOutPreparedStatement:(struct sqlite3 *)arg1 withPattern:(const char *)arg2;
- (void)checkInPreparedStatement:(id)arg1;
- (void)removeStatementCacheEntriesForDB:(struct sqlite3 *)arg1;
- (void)cache:(id)arg1 willEvictObject:(id)arg2;

@end

@interface PreparedStatement : NSObject
{
    struct sqlite3_stmt *compiled;
    BOOL cachedAndInUse;
}

- (id)initWithString:(const char *)arg1 andDb:(struct sqlite3 *)arg2;
- (void)sqliteFinalize;
- (void)dealloc;
- (int)reset;
- (int)_checkIn;
- (BOOL)_cachedAndInUse;
- (void)_setCachedAndInUse:(BOOL)arg1;
- (struct sqlite3_stmt *)compiled;

@end

@interface QuotaUsage : NSObject
{
    CDStruct_ff11e81d current;
    CDStruct_ff11e81d maximum;
}

- (void)decrementCurrentBy:(CDStruct_ff11e81d)arg1;
- (void)incrementCurrentBy:(CDStruct_ff11e81d)arg1;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (CDStruct_ff11e81d)maximum;
- (void)setMaximum:(CDStruct_ff11e81d)arg1;
- (CDStruct_ff11e81d)current;
- (void)setCurrent:(CDStruct_ff11e81d)arg1;

@end

@interface ReconcilerMechanism : NSObject <ReconciliationMechanism>
{
    int _conflictMode;
}

- (id)init;
- (id)initWithConflictMode:(int)arg1;
- (void)performReconciliationForMailboxID:(long long)arg1 usingAgents:(id)arg2;
- (BOOL)areAgentsValid:(id)arg1;

@end

@interface RecoveredMessage : Message
{
    NSString *_path;
    NSString *_remoteID;
    NSString *_remoteMailboxURL;
    NSString *_originalMailboxURL;
    MessageHeaders *_headers;
    unsigned int _size;
    CDStruct_3292de3e _remoteFlags;
    NSData *_data;
    NSData *_allData;
    BOOL _loadedFileData;
}

- (void)_loadFileDataIfNeeded;
- (id)initWithPath:(id)arg1;
- (id)messageID;
- (id)remoteMailboxURL;
- (id)originalMailboxURL;
- (id)headerData;
- (id)headers;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (id)bodyData;
- (id)dataForMimePart:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)messageBody;
- (id)messageBodyUpdatingFlags:(BOOL)arg1;
- (id)messageBodyIfAvailableUpdatingFlags:(BOOL)arg1;
- (CDStruct_3292de3e)remoteFlags;
- (unsigned long)messageFlags;
- (CDStruct_accefccd)moreMessageFlags;
- (void)dealloc;
- (void)flushCachedData;
- (BOOL)setMessageID:(long long)arg1 directory:(id)arg2;

@end

@interface RecoveredStore : MessageStore
{
    NSArray *_pathsToImport;
}

- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2 pathsToImport:(id)arg3;
- (id)init;
- (id)initWithMailboxUid:(id)arg1 readOnly:(BOOL)arg2;
- (void)dealloc;
- (void)writeUpdatedMessageDataToDisk;
- (id)messagesForImporter;

@end

@interface RegularExpression : NSObject <NSCopying, NSCoding>
{
    NSString *_expressionString;
    void *_reserved;
}

+ (void)initialize;
+ (id)regularExpressionWithString:(id)arg1;
+ (const char *)getBytesForString:(id)arg1 lossByte:(unsigned char)arg2;
- (void)dealloc;
- (void)finalize;
- (id)initWithExpressionString:(id)arg1;
- (id)initWithExpressionString:(id)arg1 options:(unsigned int)arg2;
- (unsigned int)_numberOfSubexpressions;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (id)expressionString;
- (struct _NSRange)matchedRangeForCString:(const char *)arg1 range:(struct _NSRange)arg2 subexpressionRanges:(struct _NSRange *)arg3 count:(unsigned int)arg4;
- (struct _NSRange)matchedRangeForString:(id)arg1 range:(struct _NSRange)arg2 subexpressionRanges:(struct _NSRange *)arg3 count:(unsigned int)arg4;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface RemoteMessage : Message
{
    CDStruct_3292de3e _remoteFlags;
    unsigned int _size;
}

- (BOOL)isPartial;
- (void)setIsPartial:(BOOL)arg1;
- (BOOL)partsHaveBeenCached;
- (void)setPartsHaveBeenCached:(BOOL)arg1;
- (CDStruct_3292de3e)remoteFlags;
- (unsigned int)messageSize;
- (void)setMessageSize:(unsigned int)arg1;

@end

@interface RemoteStore : LibraryStore
{
}

- (void)forceResync;
- (id)URLString;
- (BOOL)_shouldUpdateColorsAndAttachmentsAfterOpening;
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeaderDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (BOOL)shouldRouteNewMessages;
- (void)willAddMessages;
- (void)didAddMessages;
- (void)enqueuedMessageChangesInExistingRequest;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 oldMessagesByNewMessage:(id)arg4;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 setFlags:(unsigned long long)arg7 clearFlags:(unsigned long long)arg8 messageFlagsForMessages:(id)arg9 copyFiles:(BOOL)arg10;
- (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(int)arg2;
- (void)compactMessages:(id)arg1;
- (id)messageWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
- (int)updateMessagesLocally:(id)arg1 missedMessages:(id)arg2 newMessageIDs:(id)arg3;
- (int)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;
- (int)_doAppend:(CDStruct_5f9072cd *)arg1 fromStore:(id)arg2 error:(id *)arg3;
- (int)_appendToServerWithContext:(CDStruct_5f9072cd *)arg1 error:(id *)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(BOOL)arg2;
- (void)undeleteMessagesWithDetails:(id)arg1;

@end

@interface RemoteStoreAccount : MailAccount
{
    NSMutableArray *_mailboxesToSynchronize;
    BOOL _fallsBackToLocalAccountForToDos;
}

- (id)init;
- (void)dealloc;
- (void)updateFromSyncedDictionary:(id)arg1;
- (void)setDisplayName:(id)arg1;
- (id)_infoForMatchingURL:(id)arg1;
- (void)fetchSynchronously;
- (BOOL)canGoOffline;
- (void)setCachePolicy:(int)arg1 permanently:(BOOL)arg2;
- (int)cachePolicy;
- (BOOL)storeDraftsOnServer;
- (void)setStoreDraftsOnServer:(BOOL)arg1;
- (BOOL)storeNotesOnServer;
- (void)setStoreNotesOnServer:(BOOL)arg1;
- (BOOL)storeToDosOnServer;
- (BOOL)isSourceOfToDosTruth;
- (void)setStoreToDosOnServer:(BOOL)arg1;
- (BOOL)storeJunkOnServer;
- (void)setStoreJunkOnServer:(BOOL)arg1;
- (BOOL)storeJunkOnServerDefault;
- (BOOL)storeSentMessagesOnServer;
- (void)setStoreSentMessagesOnServer:(BOOL)arg1;
- (BOOL)storeTrashOnServer;
- (void)setStoreTrashOnServer:(BOOL)arg1;
- (BOOL)_isMailboxTypeStoredLocally:(int)arg1;
- (BOOL)_setStoreSpecialMailboxUidType:(int)arg1 onServer:(BOOL)arg2;
- (void)_renameLocalSpecialMailboxesToName:(id)arg1;
- (id)_localMailboxNameForType:(int)arg1 usingDisplayName:(id)arg2;
- (id)_specialMailboxUidWithType:(int)arg1 create:(BOOL)arg2;
- (id)_specialMailboxUidWithType:(int)arg1 create:(BOOL)arg2 isLocal:(BOOL)arg3;
- (void)_setSpecialMailbox:(id)arg1 forType:(int)arg2;
- (BOOL)_canEmptyMessagesFromMailboxUid:(id)arg1;
- (BOOL)_shouldCacheAggressively;
- (BOOL)canBeSynchronized;
- (void)considerSynchronizingNow;
- (void)nowWouldBeAGoodTimeToStartBackgroundSynchronization;
- (void)_nowWouldBeAGoodTimeToStartBackgroundSynchronizationWithUserInput:(BOOL)arg1;
- (BOOL)needToSynchronizeMailboxCaches;
- (void)_synchronizeAccountWithServerWithUserInput:(id)arg1;
- (BOOL)_synchronizeMailboxListWithUserInput:(BOOL)arg1;
- (BOOL)synchronizesDataWithServer;
- (void)didSynchronizeMailboxCachesAndFoundChanges:(BOOL)arg1;
- (void)_synchronizeMailboxes:(id)arg1;
- (BOOL)_addMailboxesToSynchronize:(id)arg1;
- (BOOL)_shouldSynchronizeMailbox:(id)arg1;
- (void)_synchronizeMailboxesSynchronously;
- (void)_checkForNewMessagesInStore:(id)arg1;
- (id)offlineCacheDirectory;
- (BOOL)fallsBackToLocalAccountForToDos;
- (void)setFallsBackToLocalAccountForToDos:(BOOL)arg1;

@end

@interface RemoteStoreSizeEngine : SizeEngine
{
    NSMutableDictionary *_usageByMailboxUid;
    NSMutableSet *_mailboxesToSize;
}

- (id)initWithAccount:(id)arg1;
- (void)dealloc;
- (id)usageForMailbox:(id)arg1;
- (BOOL)_prepareToRefresh;
- (BOOL)_shouldStartWorkerThread;
- (void)_refetchListing:(id)arg1;
- (void)_handleMailboxSizeChanged:(id)arg1;

@end

@interface RSSAccount : LocalAccount
{
    id _rssAccountLock;
    NSMutableArray *_feedsToDisplayUnderInbox;
    NSMutableArray *_deletedFeedURLs;
    BOOL _childrenHaveBeenSet;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedAccount;
+ (id)defaultPathNameForAccount;
+ (id)_accountWithPath:(id)arg1;
+ (id)accountTypeString;
+ (id)feedTitleForSuggestedTitle:(id)arg1 feedURL:(id)arg2;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (id)init;
- (void)dealloc;
- (BOOL)isSyncable;
- (id)uniqueId;
- (Class)storeClass;
- (Class)todoStoreClass;
- (id)mailboxPathExtension;
- (id)primaryMailboxUid;
- (id)displayName;
- (BOOL)canFetch;
- (BOOL)shouldAutoFetch;
- (void)fetchSynchronously;
- (void)updateFeed:(id)arg1;
- (void)updateUnreadCountFromLibrary;
- (void)_updateUnreadCountForMailbox:(id)arg1;
- (BOOL)isOffline;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)rootChildrenCanBePromoted;
- (id)trashMailboxUidCreateIfNeeded:(BOOL)arg1;
- (void)setupDefaultFeeds;
- (void)_setupDefaultFeedsWithDictionary:(id)arg1;
- (id)_URLPersistenceScheme;
- (void)_loadMailboxListingIntoCache:(id)arg1 attributes:(unsigned int)arg2 parent:(id)arg3;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4;
- (BOOL)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (void)_validateRSSMailboxes:(id)arg1;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2;
- (BOOL)deleteMailbox:(id)arg1;
- (BOOL)_deleteMailbox:(id)arg1 withBookmarksManager:(id)arg2 saveImmediately:(BOOL)arg3;
- (BOOL)_deleteMailbox:(id)arg1;
- (void)_finishSynchronizingMailboxesAfterImport;
- (BOOL)renameFeed:(id)arg1 newName:(id)arg2 onlyIfNeeded:(BOOL)arg3;
- (void)subscribeToFeeds:(id)arg1 parent:(id)arg2 displayUnderInbox:(id)arg3 addToBookmarks:(BOOL)arg4;
- (id)_subscribeToFeed:(id)arg1 parent:(id)arg2 displayUnderInbox:(BOOL)arg3 addToBookmarks:(BOOL)arg4 select:(BOOL)arg5;
- (id)feedForURL:(id)arg1;
- (id)feedsToDisplayUnderInbox;
- (id)feedToDisplayUnderInboxForMailboxUid:(id)arg1;
- (void)setFeed:(id)arg1 displaysUnderInbox:(BOOL)arg2 updateCache:(BOOL)arg3 select:(BOOL)arg4;
- (void)setFeed:(id)arg1 displaysUnderInbox:(BOOL)arg2 updateCache:(BOOL)arg3;
- (void)setFeeds:(id)arg1 displayUnderInbox:(BOOL)arg2 updateCache:(BOOL)arg3;
- (void)updateRSSPickerFromMailboxes;
- (BOOL)supportsNotes;
- (BOOL)supportsToDos;
- (id)todoCalendarsAccount;
- (BOOL)allowsCalendarCreation;

@end

@interface RSSArticleDocument : WebMessageDocument
{
    NSString *_articleURL;
    NSString *_articleSubject;
}

- (void)dealloc;
- (void)setArticleURL:(id)arg1;
- (id)articleURL;
- (void)setArticleSubject:(id)arg1;
- (id)articleSubject;

@end

@interface RSSInterchange : NSObject <NSPortDelegate>
{
    PSClient *_syndicationManager;
    NSConditionLock *_syndicationLock;
    NSThread *_syndicationThread;
    NSPort *_syndicationPort;
    InvocationQueue *_delegateHandlerQueue;
    NSMutableDictionary *_feedsBeingUpdated;
    NSMutableDictionary *_updatedFeeds;
    BOOL _didReceiveArticles;
    NSString *_feedName;
    NSURL *_autodiscoveredURL;
    BOOL _waitingForFeedName;
    BOOL _isValidFeedURL;
    NSDate *_fetchDate;
    unsigned int _numberOfOutstandingFeedWrites;
    NSTimer *_manualCheckTimer;
    BOOL _manualCheckIsAllowed;
    BOOL _shareDeletionInterval;
    BOOL _fatalError;
}

+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (BOOL)fetchTemporaryFeedAtURL:(id)arg1 getName:(id *)arg2 getAutodiscoveredURL:(id *)arg3;
- (BOOL)_performSynchronousRefreshWithFeed:(id)arg1;
- (void)_setTemporaryFeedInformationFromURL:(id)arg1;
- (void)_setFeedName:(id)arg1;
- (id)_feedName;
- (void)_setAutodiscoveredURL:(id)arg1;
- (id)_autodiscoveredURL;
- (void)subscribeToFeedWithTransporter:(id)arg1;
- (void)_setUpStoreForFeed:(id)arg1 login:(id)arg2 password:(id)arg3;
- (void)_subscribeToFeedWithURL:(id)arg1 login:(id)arg2 password:(id)arg3;
- (void)updateAuthenticationInfoForFeedWithTransporter:(id)arg1;
- (void)_updateAuthenticationInfoForFeedWithURL:(id)arg1 login:(id)arg2 password:(id)arg3;
- (void)unsubscribeToFeedWithURL:(id)arg1;
- (void)_unsubscribeToFeedWithURL:(id)arg1;
- (void)restoreFeedURLsForFeedInfo:(id)arg1;
- (void)_restoreFeedURLsForFeedInfo:(id)arg1;
- (void)setFetchFrequency:(int)arg1;
- (void)setDeletionFrequency:(int)arg1;
- (void)_setFrequency:(int)arg1 forMsgid:(unsigned int)arg2;
- (void)_setFetchFrequency:(int)arg1;
- (void)_setDeletionFrequency:(int)arg1;
- (void)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)_setFlagsFromDictionary:(id)arg1 forRemoteIDs:(id)arg2;
- (BOOL)updateAllFeeds;
- (void)_updateAllFeeds;
- (void)_synchronize;
- (void)updateFeedWithURL:(id)arg1;
- (void)_updateFeedWithURL:(id)arg1;
- (void)updateLastDateFetchedForNewArticles:(BOOL)arg1;
- (void)removeOldArticles;
- (void)_removeOldArticles;
- (void)_runManager;
- (void)handlePortMessage:(id)arg1;
- (void)_allowManualFeedCheck;
- (void)_setManualCheckTimer:(id)arg1;
- (id)_manualCheckTimer;
- (void)feedDidBeginRefresh:(id)arg1;
- (void)feedDidEndRefresh:(id)arg1;
- (void)feed:(id)arg1 didAddEntries:(id)arg2;
- (void)feed:(id)arg1 didUpdateEntries:(id)arg2;
- (void)feed:(id)arg1 didChangeFlagsInEntries:(id)arg2;
- (void)_setSyndicationManager:(id)arg1;
- (void)_setSyndicationLock:(id)arg1;
- (void)_setSyndicationPort:(id)arg1;
- (void)_configureSyndicationManager;
- (void)_setFetchDate:(id)arg1;
- (void)_writeDate;
- (void)_addStoreForFeedBeingRefreshed:(id)arg1;
- (void)_removeStoreBeingRefreshedWithIdentifier:(id)arg1;
- (id)_storeBeingRefreshedWithIdentifier:(id)arg1;
- (void)_delegateFeedDidEndRefresh:(id)arg1;
- (id)_createPortComponentsForFeedURL:(id)arg1;
- (id)_createPortComponentsForFeedTransporter:(id)arg1;
- (id)_mailboxForFeed:(id)arg1;
- (void)_refreshFeed:(id)arg1;
- (id)_messageForError:(id)arg1;

@end

@interface RSSLibraryStore : LibraryStore <RouterStore>
{
    id _feedLock;
    NSURL *_feedURL;
}

+ (void)tryToRecoverFeedURLsFromFeedInfo:(id)arg1;
+ (void)didFinishFetching:(BOOL)arg1;
+ (void)fetchSynchronously;
+ (id)_messageForEntry:(id)arg1 feed:(id)arg2 store:(id)arg3 isUpdated:(BOOL)arg4;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;
- (void)dealloc;
- (void)subscribeToFeedWithURL:(id)arg1;
- (void)subscribeToFeedWithTransporter:(id)arg1;
- (void)unsubscribe;
- (void)subscribeToFeedIfNecessary;
- (void)setFeedURL:(id)arg1 needsSave:(BOOL)arg2;
- (id)feedURL;
- (void)addEntries:(id)arg1 fromFeed:(id)arg2;
- (void)routeArticleMessages:(id)arg1 fetchedAt:(id)arg2;
- (void)_waitForRouterToFinishRouting:(id)arg1 articlesFetchedAt:(id)arg2;
- (void)messagesWillBeRouted:(id)arg1;
- (void)messagesWereRouted:(id)arg1;
- (void)cancel;
- (void)fetchSynchronously;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)allMailboxUidRepresentations;
- (void)doCompact;

@end

@interface EnclosureTransporter : NSObject
{
    NSURL *URL;
    NSString *MIMEType;
    long long length;
}

- (void)dealloc;
- (id)initWithEnclosure:(id)arg1;
- (long long)length;
- (void)setLength:(long long)arg1;
- (id)MIMEType;
- (void)setMIMEType:(id)arg1;
- (id)URL;
- (void)setURL:(id)arg1;

@end

@interface AuthorTransporter : NSObject
{
    NSString *name;
    NSString *email;
}

- (void)dealloc;
- (id)initWithAuthor:(id)arg1;
- (id)email;
- (void)setEmail:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;

@end

@interface EntryTransporter : NSObject
{
    NSString *title;
    NSString *identifier;
    NSURL *alternateURL;
    NSURL *baseURL;
    BOOL isRead;
    BOOL isFlagged;
    int rank;
    NSDate *datePublished;
    NSTimeZone *timeZonePublished;
    NSDate *dateUpdated;
    NSTimeZone *timeZoneUpdated;
    NSArray *authors;
    NSArray *enclosures;
    NSString *HTMLContent;
    NSString *textContent;
}

+ (id)transporterArrayWithEntries:(id)arg1;
- (void)dealloc;
- (id)initWithEntry:(id)arg1;
- (id)enclosures;
- (void)setEnclosures:(id)arg1;
- (id)authors;
- (void)setAuthors:(id)arg1;
- (id)textContent;
- (void)setTextContent:(id)arg1;
- (id)HTMLContent;
- (void)setHTMLContent:(id)arg1;
- (id)timeZoneUpdated;
- (void)setTimeZoneUpdated:(id)arg1;
- (id)dateUpdated;
- (void)setDateUpdated:(id)arg1;
- (id)timeZonePublished;
- (void)setTimeZonePublished:(id)arg1;
- (id)datePublished;
- (void)setDatePublished:(id)arg1;
- (int)rank;
- (void)setRank:(int)arg1;
- (BOOL)isFlagged;
- (void)setIsFlagged:(BOOL)arg1;
- (BOOL)isRead;
- (void)setIsRead:(BOOL)arg1;
- (id)baseURL;
- (void)setBaseURL:(id)arg1;
- (id)alternateURL;
- (void)setAlternateURL:(id)arg1;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)title;
- (void)setTitle:(id)arg1;

@end

@interface FeedTransporter : NSObject
{
    NSString *title;
    NSString *identifier;
    NSURL *alternateURL;
    NSURL *URL;
    NSString *login;
    NSString *password;
    NSError *lastError;
    NSDate *dateUpdated;
    NSTimeZone *timeZoneUpdated;
}

+ (id)transporterWithFeed:(id)arg1;
- (void)dealloc;
- (id)initWithFeed:(id)arg1;
- (id)timeZoneUpdated;
- (void)setTimeZoneUpdated:(id)arg1;
- (id)dateUpdated;
- (void)setDateUpdated:(id)arg1;
- (id)lastError;
- (void)setLastError:(id)arg1;
- (id)password;
- (void)setPassword:(id)arg1;
- (id)login;
- (void)setLogin:(id)arg1;
- (id)URL;
- (void)setURL:(id)arg1;
- (id)alternateURL;
- (void)setAlternateURL:(id)arg1;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)title;
- (void)setTitle:(id)arg1;

@end

@interface SafariBookmarksLoader : NSObject
{
    BookmarksManager *_bookmarksManager;
}

- (id)init;
- (id)initWithManager:(id)arg1;
- (void)dealloc;
- (void)_loadBookmarkItemsFromDictionary:(id)arg1 position:(int)arg2 parent:(id)arg3 folders:(id)arg4;
- (void)loadSafariBookmarks;

@end

@interface SafeBoolCache : NSObject
{
    NSConditionLock *_stateLock;
    NSInvocation *_updateInvocation;
}

- (id)initWithUpdateTarget:(id)arg1 selector:(SEL)arg2;
- (void)dealloc;
- (void)clearTarget;
- (BOOL)value;
- (void)setValue:(BOOL)arg1;
- (void)invalidate;

@end

@interface SafeValueCache : NSObject
{
    id _value;
    int _state;
    id _target;
    SEL _selector;
}

- (id)initWithUpdateTarget:(id)arg1 selector:(SEL)arg2;
- (void)dealloc;
- (void)clearTarget;
- (id)value;
- (void)setValue:(id)arg1;
- (id)retainedValue;
- (void)invalidate;

@end

@interface SASLAuthenticator : NSObject
{
    void *_context;
    AuthScheme *_authScheme;
    Account *_account;
    int _authenticationState;
}

- (id)initWithAuthScheme:(id)arg1 account:(id)arg2 connection:(id)arg3;
- (id)init;
- (void)dealloc;
- (id)authScheme;
- (id)account;
- (id)saslName;
- (id)responseForServerData:(id)arg1;
- (int)authenticationState;
- (void)setAuthenticationState:(int)arg1;
- (BOOL)justSentPlainTextPassword;
- (id)securityLayer;
- (id)localAddress;
- (id)remoteAddress;
- (BOOL)isUsingSSL;

@end

@interface SeenMessage : NSManagedObject
{
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)setAccount:(id)arg1;
- (id)dateSeen;
- (void)setDateSeen:(id)arg1;
- (id)messageID;
- (void)setMessageID:(id)arg1;
- (BOOL)shouldDeleteFromServer;
- (void)setShouldDeleteFromServer:(BOOL)arg1;
- (BOOL)isOnServer;
- (void)setIsOnServer:(BOOL)arg1;

@end

@interface SeenMessagesStore : NSObject
{
    NSPersistentStoreCoordinator *_coordinator;
    NSString *_storePath;
    NSEntityDescription *_accountEntity;
    NSEntityDescription *_seenMessageEntity;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (id)init;
- (void)dealloc;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)_configurePersistentStoreCoordinator;
- (id)persistentStoreCoordinator;
- (id)_managedObjectModel;
- (id)seenMessageEntity;
- (void)setSeenMessageEntity:(id)arg1;
- (id)accountEntity;
- (void)setAccountEntity:(id)arg1;
- (id)persistentStorePath;
- (void)setPersistentStorePath:(id)arg1;
- (void)setPersistentStoreCoordinator:(id)arg1;

@end

@interface SeenMessagesManager : NSObject
{
    NSManagedObjectContext *_managedObjectContext;
    id _account;
}

- (id)initWithAccountID:(id)arg1 createAccount:(BOOL)arg2;
- (void)dealloc;
- (id)_accountForAccountID:(id)arg1;
- (id)_addAccountWithID:(id)arg1;
- (id)seenMessageForMessageID:(id)arg1;
- (unsigned int)countOfSeenMessages;
- (id)addMessageID:(id)arg1 dateSeen:(id)arg2;
- (void)removeMessageIDs:(id)arg1;
- (id)seenMessages;
- (id)messagesToBeDeletedFromServer;
- (void)removeServerDeletedMessages;
- (void)removeMessagesNotOnServer:(id)arg1;
- (void)saveChanges;
- (void)_configureManagedObjectContext;
- (id)managedObjectContext;
- (void)setManagedObjectContext:(id)arg1;
- (id)account;
- (void)setAccount:(id)arg1;

@end

@interface SizeEngine : NSObject
{
    MailAccount *_account;
    QuotaUsage *_totalUsage;
    ActivityMonitor *_monitor;
    int _monitorAccessKey;
    BOOL _isActive;
}

- (id)initWithAccount:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)account;
- (id)totalUsage;
- (void)refresh;
- (void)cancel;
- (void)start;
- (void)stop;

@end

@interface SmartMailboxUnreadCountManager : NSObject
{
    NSMutableArray *_smartMailboxes;
    NSMutableDictionary *_smartMailboxesOpenDates;
    BOOL _updateNeededAfterOpeningMailboxes;
    NSMutableDictionary *_smartMailboxesUnreadMessages;
    NSMutableDictionary *_smartMailboxesUpdates;
    NSConditionLock *_watchedMessagesLock;
    NSMutableDictionary *_watchedMessages;
    NSMutableDictionary *_messagesNeedingToBeIndexed;
    NSConditionLock *_isUpdatingStateLock;
    NSConditionLock *_isDirtyStateLock;
    double _lastModificationToUpdate;
    NSConditionLock *_obsoleteMailboxLibraryIDsLock;
    NSMutableSet *_obsoleteMailboxLibraryIDs;
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
- (id)init;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)setSmartMailboxes:(id)arg1;
- (void)smartMailbox:(id)arg1 didInitializeWithDictionaryRepresentation:(id)arg2;
- (void)smartMailbox:(id)arg1 willReturnDictionaryRepresentation:(id)arg2;
- (void)_setIsUpdating:(BOOL)arg1;
- (void)_setIsDirty:(BOOL)arg1;
- (id)_keyForMailbox:(id)arg1;
- (id)_keyForMessage:(id)arg1;
- (void)_decomposeMessageKey:(id)arg1 intoMailboxKey:(id *)arg2 messageID:(id *)arg3;
- (id)_pathForMessage:(id)arg1;
- (void)_setSmartMailboxesWithBodyCriterion:(id)arg1;
- (BOOL)_isObservingSmartMailbox:(id)arg1;
- (void)_startObservingNotifications;
- (void)_stopObservingNotifications;
- (void)_messagesAdded:(id)arg1;
- (void)_messageFlagsChanged:(id)arg1;
- (void)_messagesCompacted:(id)arg1;
- (void)_mailboxesDeleted:(id)arg1;
- (void)_storeWillOpen:(id)arg1;
- (void)_storeDidOpen:(id)arg1;
- (void)_smartMailboxesWillSaveToDisk:(id)arg1;
- (void)_smartMailboxesDidSaveToDisk:(id)arg1;
- (void)_setUnreadMessages:(id)arg1 forSmartMailbox:(id)arg2 onDate:(id)arg3;
- (void)_watchMessages:(id)arg1 withUnreadState:(BOOL)arg2 onDate:(id)arg3;
- (void)_performDelayedUpdate:(id)arg1;
- (void)_performUpdateNow;
- (void)_updateUnreadCountsWithWatchedMessages;
- (id)_filterMessages:(id)arg1 fromMailbox:(id)arg2 matchingCriterion:(id)arg3;
- (void)_updateSmartMailboxUnreadCountsWithMessagesByMailbox:(id)arg1;
- (void)_updateSmartMailboxUnreadCountsByRemovingMessagesInMailboxesWithLibraryIDs:(id)arg1;
- (void)_addMessagesWaitingToBeIndexed:(id)arg1;
- (BOOL)_isMessageIndexed:(id)arg1;
- (id)_messageKeysWaitingToBeIndexes;
- (void)_addObsoleteMailboxLibraryIDs:(id)arg1;
- (void)_updateObsoleteMailboxLibraryIDs;
- (double)lastModificationToUpdate;
- (void)setLastModificationToUpdate:(double)arg1;

@end

@interface SMTPAccount : DeliveryAccount
{
    SMTPConnection *_connection;
    id _smtpAccountLock;
    NSTimer *_timer;
    int _lastTimerSetTime;
    unsigned int _lastUsedPort;
}

+ (id)accountTypeString;
+ (id)newDefaultInstance;
- (id)init;
- (void)dealloc;
- (Class)deliveryClass;
- (unsigned long)defaultPortNumber;
- (id)serviceName;
- (id)saslProfileName;
- (unsigned long)secondaryDefaultPortNumber;
- (unsigned long)tertiaryDefaultPortNumber;
- (BOOL)_portNumberIsADefaultPortNumber;
- (unsigned long)portNumber;
- (void)setPortNumber:(unsigned long)arg1;
- (BOOL)shouldTryDefaultPorts;
- (void)setShouldTryDefaultPorts:(BOOL)arg1;
- (Class)connectionClass;
- (id)preferredAuthScheme;
- (void)setPreferredAuthScheme:(id)arg1;
- (BOOL)isSyncable;
- (void)_setStandardPortsConnectionErrorMessage;
- (id)createConnectedConnection;
- (id)authenticatedConnection;
- (void)checkInConnection:(id)arg1;
- (void)setTimer;
- (void)connectionExpired:(id)arg1;
- (void)disconnect:(id)arg1;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned long)arg1;
- (void)releaseAllConnections;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;

@end

@interface SMTPConnection : Connection
{
    unsigned int _lastResponseCode:31;
    unsigned int _hideLoggedData:1;
    id _lastResponse;
    int _greeting;
    NSMutableArray *_serviceExtensions;
    NSMutableData *_mdata;
    NSString *_domainName;
    double _originalSocketTimeout;
    int _lastCommandTimestamp;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (int)state;
- (id)lastResponse;
- (unsigned int)lastResponseCode;
- (id)domainName;
- (void)setDomainName:(id)arg1;
- (unsigned long long)maximumMessageBytes;
- (id)authenticationMechanisms;
- (BOOL)authenticateUsingAccount:(id)arg1;
- (BOOL)_reauthenticate;
- (BOOL)_authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (int)_authenticateUsingHostname:(id)arg1 username:(id)arg2 password:(id)arg3 authenticator:(id)arg4;
- (BOOL)_startTLSForHostname:(id)arg1 onPort:(unsigned long)arg2 securityLayerType:(int)arg3 accountClass:(Class)arg4;
- (int)_startTLSForSecurityLayerType:(int)arg1;
- (BOOL)connectUsingAccount:(id)arg1;
- (BOOL)reconnect;
- (void)_setupConnection;
- (BOOL)_teardownConnectionWithResult:(BOOL)arg1;
- (int)mailFrom:(id)arg1;
- (int)rcptTo:(id)arg1;
- (int)noop;
- (int)sendDatas:(id)arg1;
- (int)quit;
- (long)timeLastCommandWasSent;

@end

@interface SMTPDelivery : MailDelivery
{
}

- (Class)deliveryClass;
- (int)deliverMessageHeaderData:(id)arg1 bodyData:(id)arg2 toRecipients:(id)arg3;

@end

@interface SoundMenu : NSMenu
{
    int _insertionIndex;
    NSMenuItem *_otherItem;
}

- (id)_addItemWithTitle:(id)arg1;
- (id)initAndLoadSounds;
- (void)dealloc;
- (void)playSoundForItemAtIndex:(int)arg1;
- (int)addSoundPath:(id)arg1;
- (void)performActionForItemAtIndex:(int)arg1;
- (id)otherMenuItem;
- (void)_soundMenuDidAddItem:(id)arg1;

@end

@interface SoundPopUpButton : NSPopUpButton
{
    NSButton *removeSoundButton;
    NSTableView *soundTableView;
    NSMutableArray *userSounds;
    NSPanel *soundPanel;
    id delegate;
    NSMenu *soundMenu;
    NSString *_selectedItem;
    NSMenuItem *_otherItem;
    BOOL _amIAwake;
    BOOL _showSoundsFromBundle;
    BOOL _showSoundsFromDelegate;
    BOOL _showSoundsFromSystemLibrary;
    BOOL _showSoundsFromLibrary;
    BOOL _showSoundsFromNetworkLibrary;
    BOOL _showSoundsFromTildeLibrary;
    BOOL _showNone;
    BOOL _showAddRemove;
}

- (id)_addItemWithTitle:(id)arg1;
- (void)_appendSoundsFromDirectories:(id)arg1;
- (void)_popupMenuChanged:(id)arg1;
- (void)_configureSoundMenu;
- (void)_playSound;
- (void)_playSoundForItemAtIndex:(int)arg1;
- (void)_invalidateSoundMenu;
- (id)otherMenuItem;
- (void)_commonInit;
- (id)initWithFrame:(struct _NSRect)arg1;
- (id)initWithCoder:(id)arg1;
- (void)awakeFromNib;
- (id)menu;
- (id)soundPath;
- (int)selectSoundPath:(id)arg1;
- (void)addRemoveMailSound:(id)arg1;
- (void)soundSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)newSoundClicked:(id)arg1;
- (void)removeSoundClicked:(id)arg1;
- (void)doneClicked:(id)arg1;
- (int)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(int)arg3;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)showSoundsFromBundle;
- (void)setShowSoundsFromBundle:(BOOL)arg1;
- (BOOL)showSoundsFromDelegate;
- (void)setShowSoundsFromDelegate:(BOOL)arg1;
- (BOOL)showSoundsFromSystemLibrary;
- (void)setShowSoundsFromSystemLibrary:(BOOL)arg1;
- (BOOL)showSoundsFromLibrary;
- (void)setShowSoundsFromLibrary:(BOOL)arg1;
- (BOOL)showSoundsFromNetworkLibrary;
- (void)setShowSoundsFromNetworkLibrary:(BOOL)arg1;
- (BOOL)showSoundsFromTildeLibrary;
- (void)setShowSoundsFromTildeLibrary:(BOOL)arg1;
- (BOOL)showNone;
- (void)setShowNone:(BOOL)arg1;
- (BOOL)showAddRemove;
- (void)setShowAddRemove:(BOOL)arg1;
- (void)dealloc;
- (void)finalize;

@end

@interface SpecialMailboxUid : MailboxUid
{
}

+ (id)specialMailboxWithIdentifier:(id)arg1;
+ (id)specialMailboxUidForMailboxUidType:(int)arg1;
+ (id)inboxMailboxUid;
+ (id)sentMessagesMailboxUid;
+ (id)draftsMailboxUid;
+ (id)junkMailboxUid;
+ (id)outboxMailboxUid;
+ (id)trashMailboxUid;
+ (id)notesMailboxUid;
+ (id)todosMailboxUid;
+ (id)replaceToDosSpecialMailboxWithChildrenInArray:(id)arg1;
- (id)criterion;
- (id)displayName;
- (id)name;
- (id)account;
- (id)children;
- (id)childEnumeratorIncludingHiddenChildren:(BOOL)arg1;
- (id)mutableCopyOfChildrenIncludingHiddenChildren:(BOOL)arg1;
- (id)childAtIndex:(unsigned int)arg1;
- (id)visibleChildAtIndex:(unsigned int)arg1;
- (unsigned int)numberOfChildren;
- (unsigned int)numberOfVisibleChildren;
- (unsigned int)numberOfSortedChildren;
- (id)sortedChildAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfChild:(id)arg1;
- (int)indexToInsertChildMailboxUid:(id)arg1;
- (unsigned int)unreadCount;
- (id)criteria;
- (void)setCriteria:(id)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (id)tildeAbbreviatedPath;
- (id)_viewerAttributesKey;
- (id)_loadUserInfo;
- (void)saveUserInfo;

@end

@interface Subdata : NSData
{
    struct _NSRange subrange;
    NSData *parentData;
}

- (unsigned int)length;
- (const void *)bytes;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParent:(id)arg1 range:(struct _NSRange)arg2;
- (void)dealloc;

@end

@interface TableOfContents : NSObject
{
    BOOL _isValid;
    NSMutableArray *_messages;
    NSString *_path;
    NSData *_data;
    unsigned int _pos;
    CDStruct_c4d47a41 _header;
    NSMutableDictionary *_messageIDMap;
    BOOL _isDirty;
}

- (BOOL)_checkHeader;
- (BOOL)loadCacheFromFileUsingUniqueStrings:(id)arg1;
- (BOOL)loadCacheFromFileUsingUniqueStrings:(id)arg1 messageStore:(id)arg2;
- (void)appendHeader:(CDStruct_c4d47a41)arg1 toData:(id)arg2;
- (id)appendCachedDataToData:(id)arg1;
- (void)setTimeStamp:(int)arg1;
- (id)init;
- (id)initWithPath:(id)arg1;
- (void)dealloc;
- (BOOL)isDirty;
- (BOOL)isValid;
- (void)forceValidityToYES;
- (id)storePath;
- (void)rebuildCacheFromMessages:(id)arg1;
- (int)count;
- (id)messages;
- (void)removeMessage:(id)arg1;
- (void)_addMessageToMap:(id)arg1;
- (void)addMessage:(id)arg1;
- (void)addMessages:(id)arg1;
- (id)description;
- (BOOL)flushToFile;
- (id)messageForMessageID:(id)arg1;
- (id)sortOrder;
- (void)setSortOrder:(id)arg1 ascending:(BOOL)arg2;
- (BOOL)isSortedAscending;
- (BOOL)isSortedByDateReceived;
- (void)sort;

@end

@interface ThrowingInvocationOperation : NSInvocationOperation
{
}

- (void)main;

@end

@interface TOCMessage : Message
{
    struct _NSRange _mboxRange;
    NSString *_attachments;
    NSString *_messageID;
    BOOL isInIncomingMail;
}

+ (id)messageIDForSender:(id)arg1 subject:(id)arg2 dateAsTimeInterval:(double)arg3;
- (id)initWithMessage:(id)arg1;
- (void)dealloc;
- (unsigned int)loadCachedInfoFromBytes:(const char *)arg1 length:(unsigned int)arg2 isDirty:(char *)arg3 usingUniqueStrings:(id)arg4;
- (id)cachedData;
- (struct _NSRange)mboxRange;
- (void)setMboxRange:(struct _NSRange)arg1;
- (id)attachment;
- (id)messageID;
- (int)compareByNumberWithMessage:(id)arg1;
- (unsigned int)messageSize;
- (id)description;
- (id)remoteID;
- (BOOL)isInIncomingMail;
- (void)setIsInIncomingMail:(BOOL)arg1;

@end

@interface ToDo : NSObject <NSCoding, NSCopying>
{
    BOOL _dueDateEnabled;
    NSDate *_dueDate;
    BOOL _completed;
    NSDate *_dateCompleted;
    ToDoAlarms *_alarms;
    BOOL _priorityEnabled;
    int _priority;
    ToDoCalendar *_calendar;
    NSString *_calendarID;
    NSString *_calendarTitle;
    NSString *_title;
    NSString *_notes;
    NSURL *_url;
    NSString *_todoID;
    NSString *_previousToDoID;
    NSData *_referencedTextLocation;
    NSString *_documentID;
    NSData *_referencedMessageID;
    NSDate *_dateCreated;
    NSData *_unrecognizedData;
    NSDate *_dateStamp;
    int _changedProperties;
    BOOL _hasChanged;
    CalTask *_calTask;
    NSMutableArray *_keysDigest;
    BOOL _isEWSToDo;
}

+ (id)exchangeConversionLocalizedMessage;
+ (id)exchangeConversionLocalizedInfo;
+ (id)exchangeConversionLocalizedPluralMessage;
+ (id)exchangeConversionLocalizedPluralInfo;
+ (id)decodeMailitemURI:(id)arg1;
- (id)initWithTitle:(id)arg1;
- (id)init;
- (int)todoAlarmPriority:(unsigned int)arg1;
- (unsigned int)calAlarmPriority:(int)arg1;
- (id)initWithCalTask:(id)arg1;
- (id)calTaskFromToDo;
- (void)updateNonCalTaskInformationFrom:(id)arg1;
- (void)updateWithCalTask:(id)arg1;
- (void)dealloc;
- (id)initWithData:(id)arg1;
- (id)data;
- (BOOL)isEquivalentToCalTask:(id)arg1;
- (BOOL)isIdenticalTo:(id)arg1;
- (BOOL)isEquivalentTo:(id)arg1;
- (void)_todoChangedProperties:(unsigned int)arg1;
- (void)postToDoInfoChangedNotification:(unsigned int)arg1;
- (int)changedProperties;
- (id)todoID;
- (void)setToDoID:(id)arg1;
- (id)previousToDoID;
- (void)setPreviousToDoID:(id)arg1;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (BOOL)hasMessageReference;
- (id)messageReference;
- (id)documentID;
- (void)setDocumentID:(id)arg1;
- (id)documentUUID;
- (id)referencedMessageID;
- (void)setReferencedMessageID:(id)arg1;
- (id)referencedTextLocation;
- (void)setReferencedTextLocation:(id)arg1;
- (BOOL)overdue;
- (BOOL)dueDateEnabled;
- (void)setDueDateEnabled:(BOOL)arg1;
- (id)dueDate;
- (void)setDueDate:(id)arg1;
- (id)effectiveDueDate;
- (BOOL)completed;
- (void)setCompleted:(BOOL)arg1;
- (int)effectiveCompleteState;
- (id)dateCompleted;
- (void)setDateCompleted:(id)arg1;
- (id)dateCreated;
- (void)setDateCreated:(id)arg1;
- (id)dateStamp;
- (void)setDateStamp:(id)arg1;
- (id)alarms;
- (int)numberOfAlarms;
- (void)setAlarms:(id)arg1;
- (BOOL)canAddAlarm;
- (BOOL)priorityEnabled;
- (void)setPriorityEnabled:(BOOL)arg1;
- (int)priority;
- (void)setPriority:(int)arg1;
- (int)effectivePriority;
- (BOOL)effectivePriorityIsValid:(int)arg1;
- (id)calendar;
- (void)setCalendar:(id)arg1;
- (void)setCalendarUsingID:(id)arg1;
- (void)calendarUpdated:(id)arg1;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)notes;
- (void)setNotes:(id)arg1;
- (BOOL)notesHaveChanged;
- (id)url;
- (void)setUrl:(id)arg1;
- (id)unrecognizedData;
- (void)setUnrecognizedData:(id)arg1;
- (BOOL)isEditable;
- (void)prepareToAddAgain;
- (void)mergeFromToDo:(id)arg1 overwriteDirtyProperties:(BOOL)arg2 usingCondition:(void *)arg3;
- (id)description;
- (id)shortDescription;
- (id)richDescription;
- (id)account;
- (id)todoStore;
- (void)buildSetOfRecognizedKeys;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)isUnique;
- (void)unique;
- (void)clearMessageLinks;
- (BOOL)isCompatibleWithCalendar;
- (void)makeCompatibleWithCalendar;
- (BOOL)belongsToActiveMailAccount;
- (BOOL)isExchangeCompatible;
- (void)makeExchangeCompatible;
- (id)mailitemURIWithReferences:(BOOL)arg1;
- (void)toDoAlarms:(id)arg1 alarmAdded:(id)arg2;
- (void)toDoAlarms:(id)arg1 alarmRemoved:(id)arg2;
- (void)toDoAlarms:(id)arg1 alarmUpdated:(id)arg2;
- (id)calTask;
- (void)setCalTask:(id)arg1;
- (id)calendarTitle;
- (id)calendarID;
- (void)postNotificationName:(id)arg1 userInfo:(id)arg2 onCenter:(id)arg3;
- (id)uniqueID;
- (id)changedPropertiesBitField;
- (void)setChangedPropertiesBitField:(id)arg1;
- (id)initForCopy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)hasSamePropertiesAs:(id)arg1;
- (void)setHasChanged:(BOOL)arg1;
- (void)setChangedProperties:(int)arg1;
- (void)_setPropertiesUsingInfoEmbeddedInMailitemURI;
- (void)addRecognizedKeysToDictionary:(id)arg1;
- (void)addKeyToDigest:(const id)arg1;
- (void)_setCalendarTitle:(id)arg1;
- (void)_setCalendarID:(id)arg1;
- (void)_calendarChanged;

@end

@interface ToDoAlarm : NSObject <ChangeMergerObject, NSCopying>
{
    NSString *_alarmID;
    BOOL _enabled;
    int _type;
    int _offsetType;
    unsigned int _offsetDays;
    NSDate *_reminderDate;
    int _time;
    NSString *_sound;
    NSString *_emailAddress;
    NSURL *_url;
    CalAlarm *_calAlarm;
    NSString *_syncToDoID;
    id _delegate;
    NSData *_unrecognizedData;
    int _changedProperties;
    BOOL _hasChanged;
    int _previousOffsetType;
    int _previousType;
    id _lock;
}

+ (id)referenceDate;
- (void)setDefaultAlarmTime;
- (id)init;
- (id)initWithType:(int)arg1;
- (id)initWithAlarm:(id)arg1;
- (int)typeBasedOnIvars;
- (id)initWithCalAlarm:(id)arg1;
- (id)dateByCombiningDate:(id)arg1 andTime:(double)arg2;
- (id)calAlarmFromToDoAlarm;
- (id)initWithData:(id)arg1;
- (id)data;
- (BOOL)isIdenticalToAlarm:(id)arg1;
- (BOOL)isEquivalentToAlarm:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLock:(id)arg1;
- (void)dealloc;
- (id)alarmID;
- (void)setAlarmID:(id)arg1;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (void)mergeFromAlarm:(id)arg1 overwriteDirtyProperties:(BOOL)arg2 usingCondition:(void *)arg3;
- (BOOL)enabled;
- (void)setEnabled:(BOOL)arg1;
- (int)type;
- (void)setType:(int)arg1;
- (int)offsetType;
- (void)setOffsetType:(int)arg1;
- (unsigned int)offsetDays;
- (void)setOffsetDays:(unsigned int)arg1;
- (id)reminderDate;
- (void)setReminderDate:(id)arg1;
- (int)time;
- (void)setTime:(int)arg1;
- (id)sound;
- (void)setSound:(id)arg1;
- (id)emailAddress;
- (void)setEmailAddress:(id)arg1;
- (id)url;
- (void)setUrl:(id)arg1;
- (id)humanReadableDescription;
- (id)description;
- (id)unrecognizedData;
- (void)setUnrecognizedData:(id)arg1;
- (BOOL)isExchangeCompatible;
- (void)makeExchangeCompatible;
- (void)buildSetOfRecognizedKeys;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)postNotificationName:(id)arg1 userInfo:(id)arg2 onCenter:(id)arg3;
- (double)relativeTriggerFromToDoAlarm;
- (unsigned int)defaultAlarmTime;
- (int)defaultAlarmOffset;
- (id)uniqueID;
- (id)changedPropertiesBitField;
- (void)setChangedPropertiesBitField:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface ToDoAlarms : NSObject <NSCopying>
{
    id _delegate;
    NSMutableArray *_alarms;
    BOOL _hasChanged;
    ChangeMerger *_alarmChanges;
    id _lock;
}

+ (id)alarmWithMatchingID:(id)arg1 inArray:(id)arg2;
+ (BOOL)alarmsAreNotIdentical:(id)arg1 toAlarms:(id)arg2;
+ (BOOL)alarmsAreNotEquivalent:(id)arg1 toAlarms:(id)arg2;
- (id)init;
- (id)initWithDelegate:(id)arg1;
- (id)initWithCalAlarms:(id)arg1;
- (id)calAlarms;
- (id)initWithData:(id)arg1;
- (id)data;
- (BOOL)isIdenticalToAlarms:(id)arg1;
- (BOOL)isEquivalentToAlarms:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLock:(id)arg1;
- (void)updateWithCalAlarms:(id)arg1;
- (void)dealloc;
- (unsigned int)count;
- (void)_createAlarmsIfNeeded;
- (void)addAlarm:(id)arg1;
- (void)removeAlarm:(id)arg1;
- (void)insertAlarm:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeAlarmAtIndex:(unsigned int)arg1;
- (void)removeAlarmWithID:(id)arg1;
- (void)removeAllAlarms;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (void)mergeFromAlarms:(id)arg1 overwriteDirtyProperties:(BOOL)arg2 usingCondition:(void *)arg3;
- (id)alarmWithID:(id)arg1;
- (id)alarmAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfAlarm:(id)arg1;
- (id)alarms;
- (void)todoAlarmUpdated:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)postNotificationName:(id)arg1 userInfo:(id)arg2 onCenter:(id)arg3;
- (unsigned int)countByEnumeratingWithState:(CDStruct_11f37819 *)arg1 objects:(id *)arg2 count:(unsigned int)arg3;
- (id)delegate;
- (id)lock;
- (void)setHasChanged:(BOOL)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)alarmEquivalentToAlarm:(id)arg1;
- (BOOL)compareToAlarms:(id)arg1 comparisonType:(int)arg2;

@end

@interface ToDoCalendar : NSObject <NSCopying>
{
    NSString *_calendarID;
    NSString *_title;
    NSColor *_color;
    BOOL _editable;
    NSURL *_url;
    MailAccount *_account;
    int _type;
    NSString *_groupID;
    CalCalendar *_calCalendar;
    BOOL _hasChanged;
    int _changedProperties;
}

- (id)initWithCalCalendar:(id)arg1 account:(id)arg2;
- (id)calCalendarFromToDoCalendar;
- (void)updateWithCalCalendar:(id)arg1;
- (void)dealloc;
- (BOOL)isIdenticalToCalCalendar:(id)arg1;
- (int)changedProperties;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)color;
- (void)setColor:(id)arg1;
- (BOOL)isEditable;
- (void)setEditable:(BOOL)arg1;
- (BOOL)isToDoContainer;
- (int)type;
- (void)setType:(int)arg1;
- (int)typeFromCalCalendarType:(id)arg1;
- (void)setTypeFromCalCalendarType:(id)arg1;
- (id)calCalendarType;
- (id)calendarID;
- (void)setCalendarID:(id)arg1;
- (id)url;
- (void)setUrl:(id)arg1;
- (BOOL)hasChanged;
- (void)setHasNotChanged;
- (id)description;
- (id)shortDescription;
- (int)compare:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)data;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)calCalendar;
- (void)setCalCalendar:(id)arg1;
- (id)account;
- (void)mergeIn:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)groupID;
- (void)setGroupID:(id)arg1;

@end

@interface ToDoCalendarGroup : NSObject
{
    MailAccount *_account;
    NSString *_groupID;
    NSString *_title;
    int _type;
    CalGroup *_calGroup;
}

- (id)initIMAPGroupWithTitle:(id)arg1 groupID:(id)arg2 account:(id)arg3;
- (id)initWithCalGroup:(id)arg1;
- (void)dealloc;
- (id)calGroupFromToDoCalendarGroup;
- (void)updateWithCalGroup:(id)arg1;
- (BOOL)isIdenticalToCalGroup:(id)arg1;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)groupID;
- (void)setGroupID:(id)arg1;
- (id)account;
- (int)type;
- (void)setType:(int)arg1;
- (int)typeFromCalGroupType:(id)arg1;
- (void)setTypeFromCalGroupType:(id)arg1;
- (id)calGroupType;
- (id)calGroup;
- (void)setCalGroup:(id)arg1;
- (id)description;
- (id)shortDescription;

@end

@interface ToDoCalendars : NSObject
{
    NSMutableDictionary *_calendarsMap;
    NSMutableDictionary *_groupsMap;
    Class _libraryClass;
}

+ (id)sharedInstance;
- (void)dealloc;
- (id)init;
- (id)newCalendarWithTitle:(id)arg1 calendarID:(id)arg2 inAccount:(id)arg3 createdGroup:(char *)arg4;
- (id)calendarWithID:(id)arg1;
- (id)calendarWithID:(id)arg1 orTitle:(id)arg2;
- (id)calendarWithID:(id)arg1 andTitle:(id)arg2;
- (id)anyEditableCalendarInAccount:(id)arg1;
- (id)calendarWithTitle:(id)arg1 account:(id)arg2;
- (id)calendarWithTitle:(id)arg1 calendarID:(id)arg2 account:(id)arg3 searchEditableCalendarsOnly:(BOOL)arg4 inCalendarStore:(BOOL)arg5;
- (id)calendarEnumerator;
- (id)allCalendars;
- (id)allEditableCalendarsInAccount:(id)arg1;
- (id)allCalendarsInAccount:(id)arg1;
- (id)loadAndCacheAllCalendarsInDisabledAccount:(id)arg1 usingGroup:(id)arg2;
- (void)markAllCalendarsAsNonEditable;
- (id)allUniqueCalendarNames;
- (void)addCalendars:(id)arg1;
- (void)deleteCalendarsWithIDs:(id)arg1;
- (void)deleteCalendars:(id)arg1;
- (id)calendarsFromLibrary;
- (void)addGroups:(id)arg1;
- (void)updateGroups:(id)arg1;
- (void)deleteGroups:(id)arg1;
- (id)calendarGroupWithID:(id)arg1;
- (id)calendarGroupForAccount:(id)arg1;
- (id)loadAndCacheCalendarGroupForDisabledAccount:(id)arg1;
- (id)allCalendarGroupsInActiveAccounts;
- (id)defaultCalendarTitle;
- (id)detailedGroupsDescription;
- (id)_groupsFromActiveAccounts;
- (id)_calendarsFromActiveAccounts;
- (void)_setAccountForCalendar:(id)arg1;
- (id)_createMailCalDAVAccountForGroup:(id)arg1;
- (id)_ewsAccountForGroup:(id)arg1;

@end

@interface ToDoChangesQueue : NSObject
{
    NSMutableDictionary *_todosToAdd;
    NSMutableDictionary *_todosToUpdate;
    NSMutableDictionary *_todosToDelete;
}

- (id)init;
- (void)dealloc;
- (void)queueToDosToAdd:(id)arg1;
- (void)queueToDosToUpdate:(id)arg1;
- (void)queueToDosToDelete:(id)arg1;
- (id)todosToAdd;
- (id)todosToUpdate;
- (id)todosToDelete;
- (void)clearQueue;

@end

@interface ToDoCriterion : Criterion
{
}

+ (id)stringForCriterionType:(int)arg1;
+ (int)criterionTypeForString:(id)arg1;
- (BOOL)hasExpression;
- (BOOL)allowsEmptyExpression;
- (BOOL)isValid:(id *)arg1 options:(unsigned long)arg2;

@end

@interface ToDoDifferenceAnalyzer : NSObject
{
    NSMutableDictionary *_differenceTable;
    int _conflictMode;
    NSMutableArray *_storeAdds;
    NSMutableArray *_storeDeletes;
    NSMutableArray *_storeUpdates;
    NSMutableArray *_storeUnknowns;
    NSMutableArray *_cacheAdds;
    NSMutableArray *_cacheDeletes;
    NSMutableArray *_cacheUpdates;
    NSMutableArray *_cacheUnknowns;
    id <ReconciliationAgent> _storeAgent;
    id <ReconciliationAgent> _cacheAgent;
    ToDoSnapshot *_storeSnapshot;
    ToDoSnapshot *_cacheSnapshot;
    long long _mailboxID;
    BOOL _analyzed;
    BOOL _avoidAsserts;
}

- (id)initWithStoreAgent:(id)arg1 cacheAgent:(id)arg2 referenceSnapshot:(id)arg3;
- (void)dealloc;
- (void)analyze;
- (void)setConflictHandlingMode:(int)arg1;
- (id)storeAdds;
- (id)storeDeletes;
- (id)storeUpdates;
- (id)storeUnknowns;
- (id)cacheAdds;
- (id)cacheDeletes;
- (id)cacheUpdates;
- (id)cacheUnknowns;
- (id)diffTableDescription;
- (void)setAvoidAsserts:(BOOL)arg1;

@end

@interface ToDoDifferenceExpression : NSObject
{
    ToDoUIDRemoteIDPair *_storeDifference;
    int _storeDifferenceType;
    ToDoUIDRemoteIDPair *_cacheDifference;
    int _cacheDifferenceType;
    BOOL _avoidAsserts;
}

- (id)init;
- (void)dealloc;
- (id)storeDifference;
- (void)setStoreDifference:(id)arg1 type:(int)arg2;
- (id)cacheDifference;
- (void)setCacheDifference:(id)arg1 type:(int)arg2;
- (id)generateResult;
- (id)generateForcedStoreResult;
- (id)generateForcedCacheResult;
- (int)resolveConflictForStoreAgent:(id)arg1 cacheAgent:(id)arg2 mailboxID:(long long)arg3;
- (id)description;
- (void)setAvoidAsserts:(BOOL)arg1;
- (void)handleInvalidResult:(id)arg1;

@end

@interface ToDoDifferenceExpressionResult : NSObject
{
    int _operation;
    int _provider;
    NSString *_todoUID;
    NSString *_remoteID;
}

- (id)init;
- (id)initWithOperation:(int)arg1 provider:(int)arg2 todoUID:(id)arg3 remoteID:(id)arg4;
- (void)dealloc;
- (int)operation;
- (void)setOperation:(int)arg1;
- (int)provider;
- (void)setProvider:(int)arg1;
- (id)todoUID;
- (void)setToDoUID:(id)arg1;
- (id)remoteID;
- (void)setRemoteID:(id)arg1;
- (void)setOperation:(int)arg1 provider:(int)arg2 todoUID:(id)arg3 remoteID:(id)arg4;
- (BOOL)isAddDeleteOrUpdate;
- (BOOL)isAddDeleteUpdateOrOddity;
- (BOOL)isAdd;
- (BOOL)isDelete;
- (BOOL)isUpdate;
- (BOOL)isConflict;
- (BOOL)isInvalid;
- (BOOL)hasStoreSource;
- (BOOL)hasCacheSource;

@end

@interface ToDoLibraryAndStoreConsistencyChecker : NSObject
{
    unsigned int _todoCount;
    unsigned int _totalCountBefore;
    NSString *_callingMethodDescription;
    int _actionType;
    NSString *_actionDescription;
}

+ (unsigned int)_verifyStateOfAllTodos:(id)arg1;
- (id)initWithToDos:(id)arg1 actionType:(int)arg2 callingMethodDescription:(id)arg3;
- (void)dealloc;
- (void)finish;
- (void)logInconsistenciesInToDos:(id)arg1;
- (id)_actionDescriptionForType:(int)arg1;
- (BOOL)_countsMatch:(int)arg1;

@end

@interface ToDoReconciler : NSObject
{
    NSMutableDictionary *_reconciliationAgentsData;
    int _reconcilerPhase;
    long long _mailboxID;
    id <ReconciliationMechanism> _mechanism;
    unsigned int _numAgentsCompleteForPhase;
    NSConditionLock *_agentConditionLock;
    BOOL _requestsPending;
    BOOL _isReconciling;
    NSLock *_reconcilerBusyLock;
}

+ (id)reconcilerForMailboxID:(id)arg1;
- (id)init;
- (id)retain;
- (unsigned int)retainCount;
- (void)release;
- (id)autorelease;
- (void)dealloc;
- (void)requestReconciliation:(id)arg1;

@end

@interface ReconcilerAgentData : NSObject
{
    id <ReconciliationAgent> _agent;
    int _state;
}

- (id)init;
- (id)initWithAgent:(id)arg1 state:(int)arg2;
- (void)dealloc;
- (id)agent;
- (int)state;
- (void)setState:(int)arg1;
- (id)description;

@end

@interface ToDosCache : NSObject
{
    NSMutableDictionary *_todosByGUID;
    NSMutableDictionary *_deletedToDoIDsByDocumentID;
    BOOL _checkConsistency;
    Class _libraryClass;
    NSMutableArray *_listeners;
    id <CalendarStoreConduit> _calendarStoreConduit;
}

- (id)initWithLibraryClass:(Class)arg1 checkingConsistency:(BOOL)arg2;
- (void)dealloc;
- (void)addListener:(id)arg1;
- (void)removeListener:(id)arg1;
- (void)addToDo:(id)arg1;
- (void)updateToDo:(id)arg1;
- (void)removeToDo:(id)arg1;
- (id)cachedToDoWithID:(id)arg1;
- (id)todoWithID:(id)arg1;
- (id)todoWithPreviousID:(id)arg1;
- (BOOL)hasToDoWithIDBeenDeleted:(id)arg1;
- (id)allDeletedToDoIDsForDocumentID:(id)arg1;
- (id)libraryToDoFromCalTask:(id)arg1;
- (id)libraryToDoFromNewCalTask:(id)arg1;
- (id)allToDosForMailboxID:(long long)arg1;
- (id)loadAndCacheToDosInDisabledAccount:(id)arg1;
- (id)todosByIDForDocumentID:(id)arg1 byPreviousID:(id *)arg2;
- (id)allToDosForDocumentID:(id)arg1;
- (id)allToDosForMessage:(id)arg1;
- (id)lastToDoWithID:(id)arg1 inMailbox:(id)arg2;
- (id)allToDosInActiveAccounts;
- (id)listOfToDoIDsInCalendarWithID:(id)arg1;
- (id)todosMatchingCriterion:(id)arg1;
- (id)todosInActiveAccountsMatchingCriterion:(id)arg1;

@end

@interface ToDoSnapshot : NSObject
{
    long long _mailboxID;
    NSMutableDictionary *_elements;
    NSMutableArray *_duplicates;
    NSMutableArray *_unknowns;
    void *_compareFunction;
}

- (id)init;
- (id)initWithMailboxID:(long long)arg1 remoteIDCompareFunction:(void *)arg2;
- (void)dealloc;
- (void)addToDoUID:(id)arg1 remoteID:(id)arg2;
- (id)remoteIDForToDoUID:(id)arg1;
- (long long)mailboxID;
- (void)clearSnapshot;
- (void)separateUnknowns;
- (unsigned int)elementsCount;
- (id)elements;
- (void)clearElements;
- (unsigned int)duplicatesCount;
- (id)duplicates;
- (void)clearDuplicates;
- (unsigned int)unknownsCount;
- (id)unknowns;
- (void)clearUnknowns;
- (id)compareToReferenceSnapshot:(id)arg1;
- (id)detailedDescription;

@end

@interface ToDoSnapshotDifferences : NSObject
{
    NSMutableArray *_adds;
    NSMutableArray *_deletes;
    NSMutableArray *_updates;
    NSMutableArray *_oddities;
}

- (id)init;
- (void)dealloc;
- (void)appendAdd:(id)arg1;
- (void)appendDelete:(id)arg1;
- (void)appendUpdate:(id)arg1;
- (void)appendOddity:(id)arg1;
- (id)adds;
- (id)deletes;
- (id)updates;
- (id)oddities;

@end

@interface ToDoUIDRemoteIDPair : NSObject
{
    NSString *_todoUID;
    NSString *_remoteID;
}

- (id)init;
- (id)initWithToDoUID:(id)arg1 remoteID:(id)arg2;
- (void)dealloc;
- (id)todoUID;
- (id)remoteID;

@end

@interface ToDoStore : NSObject <ToDoConsumer>
{
    NSMutableSet *_todos;
    MailboxUid *_mailboxUid;
    unsigned int _incompleteCount;
    int _mallsWatchingStore;
    id <ReconciliationAgent> _reconciliationAgent;
    long long _mailboxID;
    NSConditionLock *_mailboxIDLock;
}

+ (void)initialize;
+ (id)toDoStoreForMailbox:(id)arg1;
+ (id)searchStoreForCriterion:(id)arg1;
+ (void)removeToDoStoreForMailbox:(id)arg1;
+ (void)addToDosToStores:(id)arg1;
+ (void)deleteToDosFromStores:(id)arg1;
+ (id)allStores;
+ (id)allToDosInStores;
+ (id)cachesDescription;
- (id)initWithMailboxUid:(id)arg1;
- (id)init;
- (void)setReconciliationAgent:(id)arg1;
- (id)reconciliationAgent;
- (void)addWatchingMall;
- (void)removeWatchingMall;
- (int)mallsWatchingStore;
- (id)criterion;
- (void)setMallsWatchingStore:(int)arg1;
- (void)setIncompleteCount:(unsigned int)arg1;
- (void)dealloc;
- (void)setMailboxID:(id)arg1;
- (id)todos;
- (void)newToDosAvailable:(id)arg1;
- (BOOL)shouldCancel;
- (void)addToDos:(id)arg1;
- (void)deleteToDos:(id)arg1;
- (void)handleUpdatedToDo:(id)arg1;
- (id)mailboxUid;
- (unsigned int)incompleteCount;

@end

@interface ToDoStoreReconciliationAgent : NSObject <ReconciliationAgent>
{
    MailboxUid *_mailboxUid;
    long long _mailboxID;
    NSArray *_pendingAdds;
    NSArray *_pendingUpdates;
    NSArray *_pendingDeletes;
}

- (id)initWithMailboxUid:(id)arg1 mailboxID:(long long)arg2;
- (void)dealloc;
- (void)startAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)finishAtomicReconciliationProcessForMailboxID:(long long)arg1;
- (void)prepareToReconcileForMailboxID:(long long)arg1;
- (void)startToReconcileForMailboxID:(long long)arg1;
- (void)applyReconcilerChangesForMailboxID:(long long)arg1;
- (void)finishReconciliationForMailboxID:(long long)arg1;
- (id)snapshotForMailboxID:(long long)arg1;
- (id)todoWithUID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
- (void)processAdds:(id)arg1 updates:(id)arg2 deletes:(id)arg3 mailboxID:(long long)arg4;
- (id)pendingAdds;
- (id)pendingUpdates;
- (id)pendingDeletes;

@end

@interface ToDoUndoCenter : NSObject
{
}

+ (void)initialize;
+ (id)sharedInstance;
+ (void)setDefaultCalendarFromToDo:(id)arg1 key:(id)arg2;
- (void)setValue:(id)arg1 forKey:(id)arg2 inToDo:(id)arg3 withUndoManager:(id)arg4;
- (void)setValue:(id)arg1 forKey:(id)arg2 inAlarm:(id)arg3 withUndoManager:(id)arg4;
- (void)addToDo:(id)arg1 withUndoManager:(id)arg2;
- (void)addToDos:(id)arg1 withUndoManager:(id)arg2;
- (void)deleteToDos:(id)arg1 withUndoManager:(id)arg2;
- (void)addAlarm:(id)arg1 toAlarms:(id)arg2 withUndoManager:(id)arg3;
- (void)insertAlarm:(id)arg1 atIndex:(unsigned int)arg2 intoAlarms:(id)arg3 withUndoManager:(id)arg4;
- (void)removeAlarmAtIndex:(unsigned int)arg1 fromAlarms:(id)arg2 withUndoManager:(id)arg3;
- (void)removeAlarm:(id)arg1 fromAlarms:(id)arg2 withUndoManager:(id)arg3;

@end

@interface ToDoUtilities : NSObject
{
}

+ (BOOL)stringIsDifferent:(id)arg1 fromString:(id)arg2;
+ (BOOL)dateIsDifferent:(id)arg1 fromDate:(id)arg2;
+ (BOOL)urlIsDifferent:(id)arg1 fromUrl:(id)arg2;
+ (BOOL)dataAreDifferent:(id)arg1 fromData:(id)arg2;
+ (BOOL)splitToDosForMessages:(id)arg1 intoMessageToDos:(id *)arg2 noteToDos:(id *)arg3;

@end

@interface ToDoWriter : MessageWriter
{
}

- (id)init;
- (Class)messageClass;
- (id)createToDoMessageWithToDo:(id)arg1 headers:(id)arg2 forMessage:(id)arg3;

@end

@interface TransientBookmarkFolder : TransientBookmarkItem
{
    BOOL _localizedNameNeedRefresh;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)setEntity:(id)arg1;
+ (id)entity;
- (id)bookmarkChildren;
- (BOOL)containsFeed;
- (void)setContainsFeed:(BOOL)arg1;
- (void)calculateContainsFeed;
- (id)localizedName;
- (void)setLocalizedName:(id)arg1;
- (id)feedFolderChildren;
- (id)feedChildren;
- (unsigned int)_feedChildrenCount;
- (unsigned int)_feedFolderChildrenCount;
- (void)_updateContainsFeed:(BOOL)arg1;
- (void)didTurnIntoFault;

@end

@interface TransientBookmark : TransientBookmarkItem
{
}

+ (BOOL)automaticallyNotifiesObserversForKey222:(id)arg1;
+ (void)setEntity:(id)arg1;
+ (id)entity;
- (id)URL;
- (void)setURL:(id)arg1;
- (BOOL)isFeed;
- (void)setIsFeed:(BOOL)arg1;
- (void)setDisplaysUnderInbox:(BOOL)arg1;
- (BOOL)isSubscribed;
- (void)setIsSubscribed:(BOOL)arg1;
- (BOOL)existsInMailOnly;
- (void)setExistsInMailOnly:(BOOL)arg1;
- (void)_propagateChangeToBookmarksWithSameURLForKey:(id)arg1 value:(id)arg2;

@end

@interface TransientBookmarkItem : NSManagedObject
{
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)setEntity:(id)arg1;
+ (id)entity;
- (id)name;
- (void)setName:(id)arg1;
- (void)setPosition:(id)arg1;
- (id)parent;
- (void)setParent:(id)arg1;
- (void)setParent:(id)arg1 updatingContainsFeed:(BOOL)arg2;

@end

@interface URLMatch : NSObject
{
    struct _NSRange _range;
    NSString *_url;
}

- (id)initWithRange:(struct _NSRange)arg1 url:(id)arg2;
- (id)init;
- (void)dealloc;
- (id)description;
- (id)url;
- (void)setUrl:(id)arg1;
- (struct _NSRange)range;
- (void)setRange:(struct _NSRange)arg1;

@end

@interface URLifier : NSObject
{
}

+ (id)urlMatchesForStringsInDictionary:(id)arg1;
+ (id)urlMatchesForString:(id)arg1;

@end

@interface UsageCounter : NSObject
{
    NSString *_name;
    NSMutableDictionary *_counts;
    BOOL _isDirty;
}

+ (void)initialize;
+ (id)sharedInstance;
+ (BOOL)gatherJunkMailUsageCounts;
+ (void)setGatherJunkMailUsageCounts:(BOOL)arg1;
- (id)initWithName:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (id)_dictionaryForKey:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)saveDefaults;
- (unsigned int)numberOfDaysAvailableForKey:(id)arg1;
- (unsigned int)countForKey:(id)arg1;
- (unsigned int)countForKey:(id)arg1 includeToday:(BOOL)arg2;
- (void)removeCountForKey:(id)arg1;
- (void)incrementCountForKey:(id)arg1;
- (void)incrementCountForKey:(id)arg1 byCount:(unsigned int)arg2;

@end

@interface ViewFactory : NSObject
{
    NSView *_view;
}

+ (id)viewWithNibNamed:(id)arg1;
- (id)view;
- (void)dealloc;

@end

@interface WebMessageDocument : NSObject
{
    NSDictionary *_mimePartsByURL;
    NSMutableDictionary *_attachmentsByURL;
    NSMutableDictionary *_headerAttachmentsByURL;
    NSMutableDictionary *backgroundImageAttachments;
    NSURL *_baseURL;
    MimeBody *_mimeBody;
    MimePart *_htmlPart;
    NSData *_htmlData;
    ParsedMessage *_parsedMessage;
    unsigned int _preferredCharset;
    unsigned int _uniqueId:30;
    unsigned int _shouldDownloadRemoteURLs:1;
    unsigned int _containsRemoteContent:1;
    BOOL _messageIsFromMicrosoft;
}

+ (void)initialize;
+ (id)openDocuments;
+ (id)invalidBaseURL;
+ (void)document:(id *)arg1 attachmentController:(id *)arg2 forURL:(id)arg3;
+ (void)document:(id *)arg1 attachmentController:(id *)arg2 mimePart:(id *)arg3 forURL:(id)arg4;
+ (void)document:(id *)arg1 attachment:(id *)arg2 forURL:(id)arg3;
+ (id)documentWithUniqueIdentifier:(unsigned int)arg1;
+ (void)documentWillClose:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (id)initWithMimeBody:(id)arg1;
- (id)mimePartForURL:(id)arg1;
- (id)attachmentForURL:(id)arg1 inHeaderView:(BOOL)arg2;
- (id)attachmentForURL:(id)arg1;
- (void)addAttachment:(id)arg1 forURL:(id)arg2 inHeaderView:(BOOL)arg3;
- (void)addAttachment:(id)arg1 forURL:(id)arg2;
- (void)addAttachments:(id)arg1;
- (BOOL)hasAttachmentViewController:(id)arg1;
- (id)userAttachments;
- (BOOL)hasAttachments;
- (id)attachments;
- (id)attachmentsByURL;
- (void)clearAttachmentsByURL;
- (id)mimeBody;
- (void)setPreferredEncoding:(unsigned long)arg1;
- (id)preferredCharacterSet;
- (unsigned int)uniqueIdentifier;
- (id)htmlData;
- (id)parsedMessage;
- (id)parsedMessageFromRange:(id)arg1;
- (void)setShouldDownloadRemoteURLs:(BOOL)arg1;
- (BOOL)shouldDownloadRemoteURLs;
- (void)setContainsRemoteContent:(BOOL)arg1;
- (BOOL)containsRemoteContent;
- (void)setMessageIsFromMicrosoft:(BOOL)arg1;
- (BOOL)messageIsFromMicrosoft;
- (id)baseURL;
- (void)setBaseURL:(id)arg1;

@end

@interface WorkerThread : NSObject
{
}

+ (void)initialize;
+ (void)addInvocationToQueue:(id)arg1;
+ (void)runInvocationOnQueueSynchronously:(id)arg1;

@end

@interface ABAddressBook (MailAdditions)
+ (BOOL)firstNameShouldBeFirst;
+ (BOOL)firstNameShouldBeFirstForRecord:(id)arg1;
- (id)recordsCompletingSearchString:(id)arg1 searchSubscribedContent:(BOOL)arg2;
- (id)recordsCompletingSearchString:(id)arg1;
- (id)bestRecordMatchingFormattedAddress:(id)arg1;
- (id)recordWithEmailAddress:(id)arg1;
@end

@interface ABLDAP_ResultElement (MailAdditions)
- (BOOL)isGroup;
- (int)recordType;
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)firstAndMiddleNames;
- (id)lastNameAndExtension;
- (id)compoundName;
- (id)_fullName;
- (id)compoundNameAndEmail;
- (BOOL)exactlyMatchesString:(id)arg1;
@end

@interface ABMailRecent (MailAdditions)
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)mostRecentDate;
- (BOOL)hasRelatedAddressBookRecord;
- (BOOL)isGroup;
- (id)_fullName;
@end

@interface ABGroup (MailAdditions)
+ (id)diacriticInsensitiveSearchElementForProperty:(id)arg1 label:(id)arg2 key:(id)arg3 value:(id)arg4 comparison:(long)arg5;
- (BOOL)isGroup;
- (id)_fullName;
- (BOOL)hasEmailAddress:(id)arg1;
@end

@interface ABPerson (MailAdditions)
+ (id)diacriticInsensitiveSearchElementForProperty:(id)arg1 label:(id)arg2 key:(id)arg3 value:(id)arg4 comparison:(long)arg5;
- (BOOL)hasEmailAddress:(id)arg1;
- (BOOL)isMe;
- (id)compoundNameAndEmailForGroupMembership:(id)arg1;
- (BOOL)isGroup;
@end

@interface ABRecord (MailAdditions)
- (id)firstName;
- (id)lastName;
- (id)middleName;
- (id)nickname;
- (id)extension;
- (id)_fullName;
- (int)_fullNameCompare:(id)arg1;
- (id)email;
- (id)allEmailAddresses;
- (id)compoundName;
- (id)compoundNameAndEmail;
- (id)compoundNameAndEmailForEmail:(id)arg1;
- (BOOL)isGroup;
@end

@interface Account (Applescript)
- (int)accountType;
- (void)setAccountPassword:(id)arg1;
- (id)accountPassword;
- (void)setServerName:(id)arg1;
- (id)serverName;
- (void)setLoginName:(id)arg1;
- (id)loginName;
- (void)setAccountName:(id)arg1;
- (id)accountName;
- (int)customAuthentication;
- (void)setCustomAuthentication:(int)arg1;
@end

@interface APOPAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface AuthScheme (ScriptingSupport)
+ (id)schemeWithApplescriptScheme:(int)arg1;
- (int)applescriptScheme;
@end

@interface MailboxUid (BackupAdditions)
- (int)backupType;
- (id)backupID;
@end

@interface MailAccount (BackupAdditions)
- (id)backupID;
@end

@interface Message (BackupAdditions)
- (id)backupID;
@end

@interface NSPersistentStoreCoordinator (MailAdditions)
- (id)_addSQLPersistentStoreFromPath:(id)arg1 URL:(id)arg2 type:(int)arg3 recoveringFromError:(id)arg4;
- (id)addSQLPersistentStoreFromPath:(id)arg1 type:(int)arg2 error:(id *)arg3;
@end

@interface CRAM_MD5AuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface Criterion (PrivateLibraryAdditions)
- (id)criterionForSQLWithExpandedSmartMailboxes:(id)arg1;
- (id)fixOnceWithExpandedSmartMailboxes:(id)arg1;
- (id)criterionByMergingBodyCriteria;
- (BOOL)hasNumberCriterion;
- (id)SQLExpressionWithContext:(CDStruct_87ebd36c *)arg1 depth:(unsigned int)arg2 enclosingSmartMailboxes:(id)arg3;
@end

@interface ToDoCriterion (PrivateLibraryAdditions)
- (BOOL)isExpressibleInTigerSchema;
- (id)SQLExpressionWithContext:(CDStruct_87ebd36c *)arg1 depth:(unsigned int)arg2 enclosingSmartMailboxes:(id)arg3;
@end

@interface MessageCriterion (PrivateLibraryAdditions)
- (id)fixOnceWithExpandedSmartMailboxes:(id)arg1;
- (id)criterionByMergingBodyCriteria;
- (BOOL)hasNumberCriterion;
- (BOOL)isExpressibleInTigerSchema;
- (id)SQLExpressionWithContext:(CDStruct_87ebd36c *)arg1 depth:(unsigned int)arg2 enclosingSmartMailboxes:(id)arg3;
@end

@interface Criterion (LibraryAdditions)
- (BOOL)isExpressibleInTigerSchema;
- (id)criterionExpressionForEqualRelativeDates:(CDStruct_87ebd36c *)arg1 depth:(unsigned int)arg2 enclosingSmartMailboxes:(id)arg3;
- (id)criterionValueForNotEqualRelativeDates:(int *)arg1;
- (id)criterionForSQL;
- (id)SQLExpressionWithTables:(unsigned int *)arg1 baseTable:(unsigned int)arg2;
- (unsigned int)bestBaseTable;
@end

@interface NSObject (StackTraceAdditions)
+ (void)logStoredStackTracesForObject:(id)arg1;
- (void)storeStackTraceWithMessage:(id)arg1;
@end

@interface NSUserDefaults (MessageAdditions)
- (id)downloadDirectoryPath;
- (void)setDownloadDirectoryPath:(id)arg1;
- (id)autoDownloadDirectoryPath;
- (BOOL)junkMailTransitionHasBeenShown;
- (void)setJunkMailTransitionHasBeenShown:(BOOL)arg1;
- (int)junkMailDaysTillOfferingTransition;
- (void)setJunkMailDaysTillOfferingTransition:(int)arg1;
- (BOOL)junkMailTrustHeaders;
- (void)setJunkMailTrustHeaders:(BOOL)arg1;
- (int)junkMailBehavior;
- (void)setJunkMailBehavior:(int)arg1;
- (BOOL)junkMailEvaluationAfterRules;
- (void)setJunkMailEvaluationAfterRules:(BOOL)arg1;
- (double)autoSaveDelay;
- (double)autoSaveStoreDelay;
- (BOOL)autosaveWindows;
- (void)setAutosaveWindows:(BOOL)arg1;
- (id)defaultNoteToDoAccount;
- (void)setDefaultNoteToDoAccount:(id)arg1;
- (id)defaultNoteAccount;
- (id)defaultToDoAccount;
- (BOOL)allowArrowKeyMainWindowFocusChange;
- (id)notePaperColor;
- (id)userNotePaperColor;
- (id)defaultNotePaperColor;
@end

@interface NSArray (NSEmailAddressArray)
- (id)uncommentedAddressList;
- (id)addressString;
- (id)addressStringWithMaxNumberOfAddresses:(unsigned int)arg1;
@end

@interface NSString (EmailAddressString)
+ (id)nameExtensions;
+ (id)nameExtensionsThatDoNotNeedCommas;
+ (id)partialSurnames;
+ (id)formattedAddressWithName:(id)arg1 email:(id)arg2 useQuotes:(BOOL)arg3;
- (id)uncommentedAddress;
- (id)uncommentedAddressRespectingGroups;
- (BOOL)isEmptyGroup;
- (id)addressComment;
- (void)firstName:(id *)arg1 middleName:(id *)arg2 lastName:(id *)arg3 extension:(id *)arg4;
- (BOOL)appearsToBeAnInitial;
- (id)addressList;
- (id)trimCommasSpacesQuotes;
- (id)componentsSeparatedByCommaRespectingQuotesAndParens;
- (id)componentsSeparatedByCharactersRespectingQuotesAndParens:(id)arg1;
- (id)searchStringComponents;
- (BOOL)isLegalEmailAddress;
- (id)addressDomain;
@end

@interface EWSPathToExtendedFieldType (MessageAdditions)
+ (id)_createExtendedFieldTypeForPropertyTag:(id)arg1 propertyType:(int)arg2;
+ (id)createExtendedFieldTypeForPropertyTag:(id)arg1;
+ (id)createExtendedFieldTypeForPropertyId:(int)arg1;
@end

@interface NSAttributedString (FormatFlowedSupport)
- (void)getFormatFlowedString:(id *)arg1 insertedTrailingSpaces:(char *)arg2 encoding:(unsigned long)arg3;
@end

@interface NSString (FormatFlowedSupport)
- (id)convertFromFlowedText:(unsigned int)arg1;
@end

@interface NSNumber (Goodies)
- (id)localizedStringForMail;
@end

@interface NSPortMessage (Goodies)
- (void)safeSendNow;
- (void)safeSendBeforeDate:(id)arg1;
@end

@interface NSURL (Goodies)
- (id)completePath;
- (BOOL)isReallyCaseSensitivelyEqual:(id)arg1;
@end

@interface NSMutableDictionary (Goodies)
- (void)setBool:(BOOL)arg1 forKey:(id)arg2;
- (void)setInteger:(int)arg1 forKey:(id)arg2;
- (void)setFloat:(float)arg1 forKey:(id)arg2;
- (void)setCGFloat:(float)arg1 forKey:(id)arg2;
- (void)setSize:(struct _NSSize)arg1 forKey:(id)arg2;
- (void)setObject:(id)arg1 forIntegerKey:(int)arg2;
- (void)removeObjectForIntegerKey:(int)arg1;
- (void)addObject:(id)arg1 forKey:(id)arg2;
@end

@interface NSKeyedUnarchiver (Goodies)
+ (id)safeUnarchiveObjectWithData:(id)arg1;
@end

@interface NSDictionary (Goodies)
- (BOOL)boolForKey:(id)arg1;
- (int)integerForKey:(id)arg1;
- (float)floatForKey:(id)arg1;
- (float)cgfloatForKey:(id)arg1;
- (struct _NSSize)sizeForKey:(id)arg1;
- (id)objectForIntegerKey:(int)arg1;
@end

@interface NSDate (Goodies)
+ (id)createDateInCommonFormatsWithString:(id)arg1;
+ (id)lenientDateInCommonFormatsWithString:(id)arg1;
- (id)descriptionInBSDMailboxFormat;
- (id)replyPrefixForSender:(id)arg1 withSpacer:(BOOL)arg2;
@end

@interface GSSAPIAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface NSFileWrapper (HFSDataConversion)
- (id)appleSingleDataWithFilename:(const char *)arg1 length:(unsigned int)arg2;
- (id)appleDoubleDataWithFilename:(const char *)arg1 length:(unsigned int)arg2;
@end

@interface NSData (HFSDataConversion)
- (id)wrapperForAppleFileDataWithFileEncodingHint:(unsigned long)arg1;
- (id)wrapperForBinHex40DataWithFileEncodingHint:(unsigned long)arg1;
@end

@interface NSString (iCalInvitationSupport)
- (BOOL)isICalInvitation;
@end

@interface NSFileWrapper (iCalInvitationSupport)
- (BOOL)isICalInvitation;
- (void)setIsICalInvitation:(BOOL)arg1;
@end

@interface NSTextAttachment (iCalInvitationSupport)
- (BOOL)isICalInvitation;
@end

@interface IMAPAccount (ScriptingSupport)
- (int)messageCaching;
- (void)setMessageCaching:(int)arg1;
@end

@interface IMAPClientFetchOperation (Internal)
+ (id)_headersToFetch;
+ (id)_fetchDataItemsForMessageSkeletonsWithHeaders:(id)arg1;
- (id)_createMessageSetCommandString;
- (id)_fetchDataItemsForMessageSkeletonsWithAdditionalHeaderFields:(id)arg1;
@end

@interface IMAPConnection (MFPrivate)
- (BOOL)_readDataOfLength:(int)arg1 intoData:(id)arg2 error:(id *)arg3;
- (BOOL)_isFetchResponseValid:(id)arg1;
- (BOOL)_correctMailboxIsSelectedForOperation:(id)arg1;
- (id)_responseFromSendingOperation:(id)arg1;
- (BOOL)_commandShouldBeSentAgainOnError:(int)arg1;
- (BOOL)_isTemporaryError:(id)arg1;
- (void)_setError:(id)arg1 forCommand:(id)arg2;
- (BOOL)_recordUntaggedResponse:(id)arg1 forOperation:(id)arg2;
- (BOOL)_recordUntaggedResponse:(id)arg1 forOperation:(id)arg2 exists:(unsigned int *)arg3;
- (void)_recordResponse:(id)arg1 forOperation:(id)arg2;
- (BOOL)_recordMailboxResponse:(id)arg1 forOperation:(id)arg2;
- (BOOL)_recordMailboxResponse:(id)arg1 forOperation:(id)arg2 exists:(unsigned int *)arg3;
@end

@interface NSString (IMAPNameEncoding)
- (id)encodedIMAPMailboxName;
- (id)decodedIMAPMailboxName;
@end

@interface DOMDocument (JunkAdditions)
- (id)junkStringNonWhiteSpaceCount:(int *)arg1 URLs:(id)arg2 imageURLs:(id)arg3;
@end

@interface LibraryToDo (DatabaseInit)
- (id)initForLibrary;
@end

@interface NSString (LibraryID)
+ (id)stringWithLibraryID:(long long)arg1;
- (id)initWithLibraryID:(long long)arg1;
@end

@interface Library (ToDoServerSnapshot)
+ (BOOL)todoUIDExists:(id)arg1 forMailboxID:(long long)arg2;
+ (id)todoUIDForRemoteID:(id)arg1 forMailboxID:(long long)arg2;
+ (id)addToDoUID:(id)arg1 withRemoteID:(id)arg2 forMailboxID:(long long)arg3;
+ (id)removeToDoUID:(id)arg1;
+ (id)removeToDoUID:(id)arg1 forMailboxID:(long long)arg2;
+ (id)setStateUsingSnapshot:(id)arg1 forMailboxID:(long long)arg2;
+ (id)snapshotForMailboxID:(long long)arg1;
+ (id)outdatedDuplicateToDosForMailboxID:(long long)arg1;
@end

@interface LibraryIMAPStore (ToDos)
- (BOOL)isMetadataStore;
- (BOOL)isToDoStore;
@end

@interface Message (LibraryAdditions)
- (id)metadataDictionary;
@end

@interface NSObject (_mf_LibraryMessageEquality)
- (long long)_mf_LibraryMessageLibraryID;
@end

@interface LibraryToDo (internal)
- (void)_updateUID;
- (void)_libraryTodoChangedProperties:(unsigned int)arg1;
@end

@interface LibraryToDoIMAPStore (Internal)
- (void)messagesWereRemoved:(id)arg1;
- (void)addToDosInMessages:(id)arg1;
- (id)messageFromToDo:(id)arg1;
- (void)saveToDosToIMAPServer:(id)arg1;
- (void)deleteToDosFromIMAPServer:(id)arg1;
- (void)deleteToDoWithRemoteID:(id)arg1 inMailbox:(long long)arg2;
@end

@interface MailAccount (Internal)
+ (void)setAllEmailAddresses:(id)arg1 withFullUserNames:(id)arg2;
+ (BOOL)_mailboxListingNotificationAreEnabled;
+ (void)_disableMailboxListingNotifications;
+ (void)_enableMailboxListingNotifications:(BOOL)arg1;
+ (id)_accountWithPath:(id)arg1;
+ (void)_postMailAccountsHaveChanged;
+ (void)resetAccountExistsForSigning;
+ (void)_setOutboxMailboxUid:(id)arg1;
+ (id)_outboxMailboxUid;
+ (id)keyPathsForValuesAffecting_URLPersistenceHostname;
- (BOOL)_setPath:(id)arg1;
- (void)setIsActive:(BOOL)arg1;
- (void)_postMailAccountsHaveChangedIfNeeded;
- (id)_pathComponentForUidName:(id)arg1;
- (id)_uidNameForPathComponent:(id)arg1;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)_writeCustomInfoToMailboxCache:(id)arg1;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (void)_loadMailboxListingIntoCache:(id)arg1 attributes:(unsigned int)arg2 parent:(id)arg3;
- (void)_mailboxesWereRemovedFromTree:(id)arg1 withFileSystemPaths:(id)arg2;
- (BOOL)_usesMailboxCache;
- (BOOL)_readMailboxCache;
- (void)_synchronizeMailboxListWithFileSystemBeforeImport:(BOOL)arg1;
- (void)_synchronizeMailboxListWithFileSystem;
- (void)_synchronizeMailboxListWithFileSystemBeforeImport;
- (void)_finishSynchronizingMailboxesAfterImport;
- (void)_loadEntriesFromFileSystemPath:(id)arg1 parent:(id)arg2;
- (void)_writeMailboxCache;
- (id)_insertMailbox:(id)arg1 intoParent:(id)arg2 withName:(id)arg3;
- (BOOL)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (BOOL)_setChildren:(id)arg1 addedChild:(id)arg2 forMailboxUid:(id)arg3;
- (BOOL)_deleteMailbox:(id)arg1;
- (id)description;
- (void)_fetchSynchronouslyIfNeeded;
- (void)_backgroundFetchCompletedCount:(unsigned int)arg1;
- (void)_backgroundFetchCompleted;
- (void)_emptySpecialMailboxesIfNeeded;
- (void)_emptySpecialMailboxesIfNeededForQuit:(BOOL)arg1;
- (void)_clearAllPathBasedCachesAndDelete:(BOOL)arg1;
- (id)_defaultSpecialMailboxNameForType:(int)arg1;
- (BOOL)_assignSpecialMailboxToAppropriateIvar:(id)arg1 forType:(int)arg2;
- (void)_setSpecialMailboxName:(id)arg1 forType:(int)arg2;
- (void)_setSpecialMailbox:(id)arg1 forType:(int)arg2;
- (id)_specialMailboxNameForType:(int)arg1;
- (id)_specialMailboxUidWithType:(int)arg1 create:(BOOL)arg2;
- (BOOL)_canEmptyMessagesFromMailboxUid:(id)arg1;
- (BOOL)_shouldLogDeleteActivity;
- (id)_infoForMatchingURL:(id)arg1;
- (id)_URLPersistenceScheme;
- (id)_URLInternalConnectionScheme;
- (id)_URLExternalConnectionScheme;
- (id)_URLPersistenceHostname;
- (id)_URLForInfo:(id)arg1;
- (id)_mailboxPathPrefix;
- (id)rootMailboxUidEvenIfInactive:(BOOL)arg1;
- (id)allMailboxUidsEvenIfInactive:(BOOL)arg1;
@end

@interface MailAccount (ScriptingSupport)
- (id)indicesOfObjectsByEvaluatingObjectSpecifier:(id)arg1;
- (id)mailboxes;
- (void)replaceInMailboxes:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertInMailboxes:(id)arg1;
- (void)removeFromMailboxesAtIndex:(unsigned int)arg1;
- (BOOL)emptyTrashOnQuit;
- (void)setEmptyTrashOnQuit:(BOOL)arg1;
- (BOOL)emptySentMessagesOnQuit;
- (void)setEmptySentMessagesOnQuit:(BOOL)arg1;
- (BOOL)emptyJunkOnQuit;
- (void)setEmptyJunkOnQuit:(BOOL)arg1;
@end

@interface MailboxUid (SmartMailboxCycleDetection)
- (BOOL)isPointedToByCriterion:(id)arg1 traversedMailboxes:(id)arg2;
- (BOOL)isPointedToBySmartMailbox:(id)arg1 traversedMailboxes:(id)arg2;
- (BOOL)isPointedToBySmartMailbox:(id)arg1;
@end

@interface Criterion (SmartMailboxCycleDetection)
- (id)targetSmartMailbox;
@end

@interface MailboxUid (ScriptingSupport)
- (id)objectSpecifier;
- (id)applescriptContainer;
- (id)applescriptChildren;
- (id)messages;
- (void)removeFromMessagesAtIndex:(unsigned int)arg1;
- (id)mailboxName;
- (void)setMailboxName:(id)arg1;
- (id)valueInMessagesWithUniqueID:(id)arg1;
@end

@interface NSNotificationCenter (MainThreadPosting)
- (void)postNotificationInMainThread:(id)arg1;
@end

@interface NSObject (MainThreadMessaging)
- (void)performSelectorOnMainThread:(SEL)arg1 waitUntilDone:(BOOL)arg2 result:(void *)arg3 args:(void *)arg4;
@end

@interface MimePart (MatadorSupport)
- (BOOL)writeAttachmentToSpotlightCacheIfNeededUnder:(id)arg1;
@end

@interface Message (ScriptingSupport)
- (id)objectSpecifier;
- (void)_setAppleScriptFlag:(id)arg1 state:(BOOL)arg2;
- (BOOL)isRead;
- (void)setIsRead:(BOOL)arg1;
- (BOOL)wasRepliedTo;
- (void)setWasRepliedTo:(BOOL)arg1;
- (BOOL)wasForwarded;
- (void)setWasForwarded:(BOOL)arg1;
- (BOOL)wasRedirected;
- (void)setWasRedirected:(BOOL)arg1;
- (BOOL)isJunk;
- (void)setIsJunk:(BOOL)arg1;
- (BOOL)isDeleted;
- (void)setIsDeleted:(BOOL)arg1;
- (BOOL)isFlagged;
- (void)setIsFlagged:(BOOL)arg1;
- (id)replyTo;
- (id)scriptedMessageSize;
- (id)content;
- (void)_addRecipientsForKey:(id)arg1 toArray:(id)arg2;
- (id)recipients;
- (id)toRecipients;
- (id)ccRecipients;
- (id)bccRecipients;
- (id)container;
- (void)_performBackgroundSetContainer:(id)arg1 command:(id)arg2;
- (void)setContainer:(id)arg1;
- (id)messageIDHeader;
- (id)rawSource;
- (id)allHeaders;
- (int)actionColorMessage;
- (void)setBackgroundColor:(int)arg1;
- (int)backgroundColor;
- (id)appleScriptHeaders;
- (id)appleScriptAttachments;
- (id)valueInAppleScriptAttachmentsWithUniqueID:(id)arg1;
@end

@interface MessageAttachment (ScriptingSupport)
- (void)_fetchDataForCommand:(id)arg1;
- (void)_finishSaveAttachmentCommand:(id)arg1;
- (id)handleSaveAttachmentCommand:(id)arg1;
- (id)appleScriptApproximateSize;
- (id)uniqueID;
- (id)objectSpecifier;
@end

@interface MessageCriterion (ApplescriptRuleCriterion)
- (int)ruleType;
- (void)setRuleType:(int)arg1;
- (id)ruleHeader;
- (void)setRuleHeader:(id)arg1;
- (int)ruleQualifier;
- (void)setRuleQualifier:(int)arg1;
- (id)ruleExpression;
- (void)setRuleExpression:(id)arg1;
@end

@interface NSCoder (MFMessageFlags)
- (unsigned long)decodeMessageFlags;
@end

@interface MessageRule (Applescript)
- (void)updateIsActive;
- (int)actionColorMessage;
- (void)setActionColorMessage:(int)arg1;
- (int)highlightColorValue:(id)arg1;
- (BOOL)actionDeleteMessage;
- (void)setActionDeleteMessage:(BOOL)arg1;
- (id)actionForwardToAddress;
- (void)setActionForwardToAddress:(id)arg1;
- (id)actionForwardText;
- (void)setActionForwardText:(id)arg1;
- (BOOL)actionMarkAsFlagged;
- (void)setActionMarkAsFlagged:(BOOL)arg1;
- (BOOL)actionMarkAsRead;
- (void)setActionMarkAsRead:(BOOL)arg1;
- (id)actionPlaySound;
- (void)setActionPlaySound:(id)arg1;
- (id)actionRedirectToAddress;
- (void)setActionRedirectToAddress:(id)arg1;
- (id)actionReplyText;
- (void)setActionReplyText:(id)arg1;
- (id)actionRunApplescript;
- (void)setActionRunApplescript:(id)arg1;
- (id)ruleDescription;
- (void)setRuleDescription:(id)arg1;
- (void)insertInCriteria:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertInCriteria:(id)arg1;
- (void)removeFromCriteriaAtIndex:(unsigned int)arg1;
- (void)setAddress:(id)arg1 forResponseType:(int)arg2;
@end

@interface MFError (MessageSignerSupport)
- (id)messageSigner;
@end

@interface NSError (MessageSignerSupport)
- (id)messageSigner;
@end

@interface MessageStore (MessageFrameworkOnly)
+ (void)_autosaveMessageStore:(void *)arg1;
- (void)_cancelAutosave;
- (void)_setNeedsAutosave;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyForMessage:(id)arg1 updateFlags:(BOOL)arg2;
- (BOOL)_shouldCallCompactWhenClosing;
- (BOOL)_isReadyToBeInvalidated;
- (void)_saveChanges;
- (BOOL)setStoreState:(int)arg1 fromState:(int)arg2;
- (int)storeState;
- (void)_invalidate;
- (void)_invalidateInBackground;
- (void)_countUnreadAndDeletedInMessages:(id)arg1;
- (id)_lockFilePath;
- (BOOL)_acquireLockFile;
- (void)_removeLockFile;
- (void)_flushAllCaches;
- (void)_flushAllMessageData;
- (void)_rebuildTableOfContentsSynchronously;
- (void)updateBodyFlagsForMessage:(id)arg1 body:(id)arg2;
- (id)_setOrGetBody:(id)arg1 forMessage:(id)arg2 updateFlags:(BOOL)arg3;
- (void)_invalidateObjectCachesForKey:(id)arg1;
- (id)_setOrGetValue:(id)arg1 forKey:(id)arg2 inCache:(id *)arg3;
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeaderDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (void)updateMessageColorsSynchronouslyForMessages:(id)arg1 postingNotification:(BOOL)arg2;
- (void)updateMessages:(id)arg1 updateColor:(BOOL)arg2 updateNumberOfAttachments:(BOOL)arg3;
- (void)_setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (void)_invalidateColorForAllMessages;
- (void)_setFlagsForMessages:(id)arg1 mask:(unsigned long)arg2;
- (void)_setFlagsAndColorForMessages:(id)arg1;
- (void)messagesWereAdded:(id)arg1 forIncrementalLoading:(BOOL)arg2;
- (BOOL)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(BOOL)arg3;
@end

@interface LibraryStore (ScriptingSupport)
- (id)objectSpecifierForMessage:(id)arg1;
@end

@interface MessageStore (ScriptingSupport)
- (id)objectSpecifier;
- (id)objectSpecifierForMessage:(id)arg1;
@end

@interface MimePart (StringRendering)
- (void)renderString:(id)arg1;
@end

@interface MimeBody (StringRendering)
- (void)renderStringForJunk:(id)arg1;
- (void)renderString:(id)arg1;
@end

@interface MessageBody (StringRendering)
- (void)renderString:(id)arg1;
@end

@interface Message (StringRendering)
- (void)renderHeaders:(id)arg1;
- (void)renderBody:(id)arg1;
- (void)renderString:(id)arg1;
@end

@interface Message (Threads)
- (BOOL)isThread;
- (BOOL)containsOnlyNotes;
- (BOOL)shouldUseSubjectForThreading;
@end

@interface MetadataManager (AccountStatus)
- (void)_accountInfoDidChange:(id)arg1;
- (void)_accountWillBeDeleted:(id)arg1;
- (void)_accountWillBeDisabled:(id)arg1;
- (void)_accountWillBeEnabled:(id)arg1;
@end

@interface MetadataManager (MigrationHelpers)
- (id)_mailTitleFromOldiCalTitle:(id)arg1;
@end

@interface MetadataManager (locking)
- (BOOL)tryLock;
- (void)lock;
- (void)unlock;
@end

@interface MetadataManager (ToDoManagerInternal)
- (void)updateRegisteredSearchStores;
- (void)disableUpdatesForToDoID:(id)arg1;
- (void)enableUpdatesForToDoID:(id)arg1;
- (BOOL)shouldUpdateToDoWithID:(id)arg1;
- (void)mergeToDo:(id)arg1 intoCachedToDo:(id)arg2;
- (void)processPendingCommits:(id)arg1;
- (id)changesTimer;
- (void)setChangesTimer:(id)arg1;
- (void)scheduleChangesTimer;
- (void)commitAddedToDos:(id)arg1;
- (void)addToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2 fromReconciliation:(BOOL)arg3;
- (void)commitDeletedToDos:(id)arg1;
- (void)deleteToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2 fromReconciliation:(BOOL)arg3;
- (void)deleteToDosWithIDs:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)deleteToDosInCalendarsWithIDs:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)commitUpdatedToDos:(id)arg1;
- (void)updateToDos:(id)arg1 reflectToCalendarStore:(BOOL)arg2 fromReconciliation:(BOOL)arg3;
- (void)todosChangedInCalendarStore:(id)arg1;
- (void)commitDateStampUpdatedInToDos:(id)arg1;
- (void)todosDateStampUpdatedInCalendarStore:(id)arg1;
- (void)calendarsChangedInCalendarStore:(id)arg1;
- (void)groupsChangedInCalendarStore:(id)arg1;
- (void)deleteGroupsAndTheirContents:(id)arg1;
- (void)addToDosToCalendarStore:(id)arg1;
- (void)updateToDosInCalendarStore:(id)arg1;
- (void)removeToDosFromCalendarStore:(id)arg1;
- (void)addCalendarsToCalendarStore:(id)arg1;
- (void)updateCalendarsInCalendarStore:(id)arg1;
- (void)deleteCalendarsFromCalendarStore:(id)arg1;
- (void)commitAddedCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)addCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)commitUpdatedCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)updateCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)commitDeletedCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)deleteCalendars:(id)arg1 reflectToCalendarStore:(BOOL)arg2;
- (void)setCalendarInNewToDo:(id)arg1;
- (id)findCorrectCalendar:(id)arg1 forAccount:(id)arg2;
- (void)getAllCalendarStoreData;
- (void)todoDidChange:(id)arg1;
- (void)inconsistentCalendarFoundByCalendarStore:(id)arg1;
- (void)inconsistentToDoFoundByCalendarStore:(id)arg1;
- (void)_cleanupInconsistencies;
- (void)_cleanupAllInformationForAccount:(id)arg1 mailbox:(id)arg2;
@end

@interface MetadataManager (ToDoManager)
- (BOOL)canCreateToDoInAccount:(id)arg1;
- (id)newToDoInAccount:(id)arg1;
- (id)newToDoWithTitle:(id)arg1 inAccount:(id)arg2;
- (id)newCalendarWithTitle:(id)arg1 calendarID:(id)arg2 inAccount:(id)arg3;
- (id)todoWithID:(id)arg1;
- (id)calendarWithTitle:(id)arg1 account:(id)arg2;
- (id)todoCalendarWithID:(id)arg1 title:(id)arg2;
- (id)todosByIDForDocumentID:(id)arg1;
- (id)todosByIDForDocumentID:(id)arg1 byPreviousID:(id *)arg2;
- (id)allToDosForDocumentID:(id)arg1;
- (id)allToDosForNote:(id)arg1;
- (id)allToDosForMessage:(id)arg1;
- (BOOL)hasToDoWithIDBeenDeleted:(id)arg1;
- (id)allDeletedToDoIDsForDocumentID:(id)arg1;
- (void)_loadAllToDosForMailboxUid:(id)arg1;
- (void)loadAllToDosForMailboxUid:(id)arg1;
- (void)_setMailboxIDForMailboxUid:(id)arg1 inObject:(id)arg2;
- (void)setMailboxIDForMailboxUid:(id)arg1 inObject:(id)arg2;
- (void)addToDos:(id)arg1;
- (void)deleteToDos:(id)arg1;
- (void)updateToDos:(id)arg1;
- (void)addCalendar:(id)arg1;
- (id)copyToDos:(id)arg1 destinationAccount:(id)arg2 newDocumentIDsByOld:(id)arg3;
- (void)_moveToDos:(id)arg1 toAccount:(id)arg2;
- (void)_removeAllToDoObjectsForAccount:(id)arg1 originalMailboxUid:(id)arg2 moveToDosToLocalAccount:(id)arg3;
- (void)_makeLocalToDosOfAllToDosForAccount:(id)arg1 originalMailboxUid:(id)arg2;
- (void)removeAllToDoObjectsForAccount:(id)arg1 moveToDosToLocalAccount:(BOOL)arg2;
- (void)_disableAllToDoObjectsForAccount:(id)arg1;
- (void)disableAllToDoObjectsForAccount:(id)arg1;
- (BOOL)_cacheToDoObjectsFromDisabledAccount:(id)arg1 group:(id *)arg2 calendars:(id *)arg3 todos:(id *)arg4;
- (void)_enableAllToDoObjectsForAccount:(id)arg1;
- (void)enableAllToDoObjectsForAccount:(id)arg1;
- (void)updateToDoWithID:(id)arg1 toRemoteID:(id)arg2;
- (void)registerSearchStore:(id)arg1;
- (void)unregisterSearchStore:(id)arg1;
- (void)updateSearchStoreForMailboxUid:(id)arg1;
- (void)updateSearchStoresInArray:(id)arg1;
- (id)findOrCreateCalendarWithTitle:(id)arg1 calendarID:(id)arg2 account:(id)arg3;
- (id)allUniqueCalendarNames;
- (id)allCalendars;
- (id)allCalendarsInAccount:(id)arg1;
- (id)editableCalendarsByIDForToDos:(id)arg1;
- (void)setAccountAndCalendarInDecodedToDo:(id)arg1 mailboxID:(long long)arg2;
@end

@interface NSApplication (MFAssert)
+ (BOOL)isMail;
@end

@interface NSError (MessageAdditions)
- (BOOL)isUserCancelledError;
- (BOOL)shouldBeReportedToUser;
- (BOOL)isAuthenticationError;
- (BOOL)isSSLCertificateError;
- (id)moreInfo;
- (id)helpAnchor;
- (id)shortDescription;
@end

@interface NSMapTable (MFMapTableAdditions)
+ (void *)createLibraryIDWrapper:(long long)arg1;
+ (void)releaseLibraryIDWrapper:(void *)arg1;
+ (long long)libraryIDFromWrapper:(void *)arg1;
+ (id)createNumberFromWrapper:(void *)arg1;
- (id)initWithLibraryIDToStrongObjects;
- (id)initWithLibraryIDToWeakObjects;
- (id)initWithStrongObjectsToLibraryID;
- (id)initWithWeakObjectsToLibraryID;
@end

@interface NSObject (ThreadingAdditions)
- (void)releaseOnMainThread;
@end

@interface NSString (MimeCharsetSupport)
- (id)bestMimeCharset;
- (id)_bestMimeCharset:(id)arg1;
- (id)bestMimeCharsetUsingHint:(unsigned long)arg1;
@end

@interface NSMutableData (MimeDataEncoding)
- (void)appendQuotedPrintableDataForHeaderBytes:(const char *)arg1 length:(unsigned int)arg2;
@end

@interface NSData (MimeDataEncoding)
+ (unsigned int)quotedPrintableLengthOfHeaderBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)decodeQuotedPrintableForText:(BOOL)arg1;
- (id)encodeQuotedPrintableForText:(BOOL)arg1;
- (id)encodeQuotedPrintableForText:(BOOL)arg1 allowCancel:(BOOL)arg2;
- (id)decodeBase64;
- (BOOL)isValidBase64Data;
- (id)encodeBase64WithoutLineBreaks;
- (id)encodeBase64;
- (id)encodeBase64AllowCancel:(BOOL)arg1;
- (id)decodeModifiedBase64;
- (id)encodeModifiedBase64;
- (id)encodeBase64HeaderData;
@end

@interface NSString (MimeEnrichedReader)
+ (id)htmlStringFromMimeRichTextString:(id)arg1;
+ (id)htmlStringFromMimeEnrichedString:(id)arg1;
+ (id)stringFromMimeEnrichedString:(id)arg1;
@end

@interface NSAttributedString (MimeEnrichedWriter)
- (id)enrichedString;
@end

@interface NSMutableData (RFC2231Support)
- (void)appendRFC2231CompliantValue:(id)arg1 forKey:(id)arg2 withEncodingHint:(unsigned long)arg3;
@end

@interface NSMutableDictionary (RFC2231Support)
- (void)fixupRFC2231Values;
@end

@interface NSString (MimeHeaderEncoding)
- (id)encodedHeaderData;
- (id)encodedHeaderDataWithEncodingHint:(unsigned long)arg1;
- (id)encodedHeaderDataWithEncodingHint:(unsigned long)arg1 encodingUsed:(unsigned int *)arg2;
- (id)decodeMimeHeaderValue;
- (id)decodeMimeHeaderValueWithCharsetHint:(id)arg1;
@end

@interface MimePart (DecodingSupport)
- (id)_fullMimeTypeEvenInsideAppleDouble;
- (id)decode;
- (id)decodeTextPlain;
- (id)decodeText;
- (id)decodeTextRichtext;
- (id)decodeTextRtf;
- (id)decodeTextEnriched;
- (id)decodeTextHtml;
- (id)decodeTextCalendar;
- (id)decodeMultipart;
- (id)decodeMultipartAlternative;
- (id)decodeMultipartRelated;
- (id)decodeMultipartFolder;
- (id)decodeApplicationApple_msg_composite_image;
- (id)decodeApplicationOctet_stream;
- (id)decodeApplicationZip;
- (id)decodeApplicationSmil;
- (id)decodeMessageDelivery_status;
- (id)decodeMessageRfc822;
- (id)decodeMessagePartial;
- (id)decodeMessageExternal_body;
- (id)decodeApplicationMac_binhex40;
- (id)decodeApplicationApplefile;
- (id)decodeMultipartAppledouble;
@end

@interface MimePart (IMAPSupport)
- (BOOL)parseIMAPPropertyList:(id)arg1;
- (id)partNumber;
@end

@interface MimePart (MessageSupport)
- (BOOL)parseMimeBody;
@end

@interface NSTextAttachment (MimeSupport)
- (unsigned int)approximateSize;
- (id)mimePart;
- (BOOL)hasBeenDownloaded;
- (BOOL)isPlaceholder;
- (BOOL)shouldDownloadAttachmentOnDisplay;
- (id)internalAppleAttachmentData;
@end

@interface NSInvocation (MailExtensions)
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 object4:(id)arg6;
- (void)invokeWithObject:(id)arg1;
- (unsigned char)priority;
@end

@interface NetworkController (Private)
- (void)_postNotification:(id)arg1;
- (void)_postNetworkChangeNotification:(id)arg1;
- (void)_triggerDialForHostname:(id)arg1;
- (void)_registerForNotificationKeys:(id)arg1 patterns:(id)arg2;
@end

@interface NSArray (AppleScriptConveniences)
- (id)arrayByEvaluatingObjectSpecifiers;
@end

@interface NSAppleEventDescriptor (MessageRuleAdditions)
- (BOOL)isSendToSelfEvent;
@end

@interface NSAppleScript (MessageRuleAdditions)
+ (id)_createScriptAtPath:(id)arg1 errorInfo:(id *)arg2;
+ (BOOL)executeHandlerWithName:(id)arg1 inScriptAtPath:(id)arg2 withArguments:(id)arg3 error:(id *)arg4;
+ (BOOL)executeHandlerWithEventClass:(unsigned long)arg1 eventID:(unsigned long)arg2 inScriptAtPath:(id)arg3 withArguments:(id)arg4 error:(id *)arg5;
+ (id)appleScriptLock;
- (id)executeHandlerWithName:(id)arg1 andArguments:(id)arg2 error:(id *)arg3;
- (id)executeHandlerWithEventClass:(unsigned long)arg1 eventID:(unsigned long)arg2 andArguments:(id)arg3 error:(id *)arg4;
@end

@interface NSArray (DeepCopying)
- (id)twiceMutableCopy;
@end

@interface NSArray (DateComparisonForRecents)
- (unsigned int)indexOfOldestDate;
- (unsigned int)indexOfThirdDate;
- (id)thirdDate;
@end

@interface NSArray (MessagesFromMixedStoresConvenience)
- (id)dictionaryWithToDosSortedByStore;
- (id)dictionaryWithMessagesSortedByStore;
- (id)dictionaryWithMessagesSortedByMailbox;
@end

@interface NSMutableArray (SortedArrayExtensions)
- (unsigned int)insertObject:(id)arg1 usingSortFunction:(void *)arg2 context:(void *)arg3;
- (unsigned int)indexOfObject:(id)arg1 usingSortFunction:(void *)arg2 context:(void *)arg3;
- (unsigned int)indexOfSimilarObject:(id)arg1 usingSortFunction:(void *)arg2 context:(void *)arg3;
@end

@interface NSMutableArray (Convenience)
- (unsigned int)highestIndexOfObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (BOOL)insertObjectIfAbsent:(id)arg1 usingSortFunction:(void *)arg2 context:(void *)arg3;
- (void)addAbsentObjectsFromArray:(id)arg1;
- (BOOL)addObjectIfAbsent:(id)arg1;
- (BOOL)addObjectIfAbsentAccordingToEquals:(id)arg1;
- (void)addObjectsFromSet:(id)arg1;
- (void)removeObjectsFromSet:(id)arg1;
@end

@interface NSArray (DerivedArray)
- (id)arrayByAddingAbsentObjectsFromArray:(id)arg1 accordingToEquals:(BOOL)arg2;
- (id)indicesOfStringsWithPrefix:(id)arg1;
@end

@interface NSArray (removeSelf)
- (id)attributedComponentsJoinedByString:(id)arg1;
@end

@interface NSMutableAttributedString (MessageFrameworkAdditions)
- (void)_removeAttachmentsAndReplaceWithCustomAttribute:(BOOL)arg1;
- (void)removeAllAttachments;
- (void)removeAllFormattingExceptAttachments;
- (void)removeQuotingDisplayAttributesInRange:(struct _NSRange)arg1;
- (void)fixQuotingDisplayAttributesInRange:(struct _NSRange)arg1;
- (void)changeQuoteLevelInRange:(struct _NSRange)arg1 by:(int)arg2 undoManager:(id)arg3;
@end

@interface NSAttributedString (FontAdditions)
+ (void)resetHeaderAttributes;
+ (id)boldHeaderAttributes;
+ (id)boldGrayHeaderAttributes;
+ (id)bigBoldWhiteHeaderAttributes;
+ (id)mediumWhiteHeaderAttributes;
+ (id)blueHeaderAttributes;
+ (id)headerAttributes;
+ (id)fixedPitchAttributes;
+ (float)headerFontSize;
@end

@interface NSAttributedString (MessagePasteboardSupport)
- (id)messageDataForRange:(struct _NSRange)arg1;
@end

@interface NSAttributedString (find_attribute)
- (id)nextAttribute:(id)arg1 fromLocation:(unsigned int)arg2 effectiveRange:(struct _NSRange *)arg3;
@end

@interface NSAttributedString (MessageFrameworkAdditions)
- (id)attachments;
- (id)attachmentsInRange:(struct _NSRange)arg1;
- (id)mimeTextAttachments;
- (struct _NSRange)rangeOfAttachment:(id)arg1;
- (BOOL)containsRichTextInRange:(struct _NSRange)arg1;
- (BOOL)containsRichText;
@end

@interface NSDictionary (NSBundleExtras)
- (id)shortVersionFromInfoDictionary;
@end

@interface NSBundle (MessageFrameworkAdditions)
+ (BOOL)localization:(id)arg1 isPreferredOverLocalization:(id)arg2;
+ (id)syncBundle;
- (BOOL)loadNibNamed:(id)arg1 owner:(id)arg2;
- (id)localizedShortVersion;
- (void)createLocalization:(id)arg1;
- (id)localizedStringIfPresentForKey:(id)arg1 value:(id)arg2 table:(id)arg3;
@end

@interface NSCharacterSet (NSCharacterSetUtils)
+ (id)goodFileCharacterSet;
+ (id)unsafeDomainNameCharacterSet;
+ (id)replacementCharacterSet;
@end

@interface NSColor (NSColorUtilities)
+ (id)allQuotingColors;
+ (id)defaultQuotingColors;
+ (id)allHighlightColors;
+ (int)highlightColorValueForColor:(id)arg1;
+ (id)colorForHighlightColorValue:(int)arg1;
+ (id)colorPlist;
+ (int)intWithIdentifierColor:(id)arg1;
+ (id)identifierForColor:(id)arg1;
+ (id)colorForIdentifier:(id)arg1;
+ (id)colorForEnrichedValue:(id)arg1;
+ (void)configureColorMenu:(id)arg1;
+ (id)createSwatchForColor:(id)arg1;
+ (id)colorWithIntValue:(int)arg1;
+ (id)colorWithHexString:(id)arg1;
+ (void)setThreadBackgroundColor:(id)arg1;
+ (id)lighterThreadBackgroundColor;
+ (void)clearThreadBackgroundColors;
+ (id)threadBackgroundColor;
+ (id)junkMailColor;
+ (id)linkColor;
+ (id)visitedLinkColor;
+ (id)activeLinkColor;
+ (id)splitterColor;
+ (id)subjectAdditionColor;
+ (id)aquaBlueColor;
+ (id)activeAlternateBackgroundColor;
+ (id)inactiveAlternateBackgroundColor;
- (int)intValue;
- (id)hexString;
@end

@interface NSMutableData (NSDataUtils)
- (void)appendCString:(const char *)arg1;
- (void)appendByte:(BOOL)arg1;
- (void)convertNetworkLineEndingsToUnix;
@end

@interface NSData (NSDataUtils)
- (id)unquotedFromSpaceDataWithRange:(struct _NSRange)arg1;
- (id)quotedFromSpaceDataForMessage;
- (struct _NSRange)rangeOfRFC822HeaderData;
- (id)subdataToIndex:(unsigned int)arg1;
- (id)subdataFromIndex:(unsigned int)arg1;
- (struct _NSRange)rangeOfData:(id)arg1;
- (struct _NSRange)rangeOfData:(id)arg1 options:(unsigned int)arg2;
- (struct _NSRange)rangeOfData:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3;
- (struct _NSRange)rangeOfByteFromSet:(id)arg1;
- (struct _NSRange)rangeOfByteFromSet:(id)arg1 options:(unsigned int)arg2;
- (struct _NSRange)rangeOfByteFromSet:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3;
- (struct _NSRange)rangeOfCString:(const char *)arg1;
- (struct _NSRange)rangeOfCString:(const char *)arg1 options:(unsigned int)arg2;
- (struct _NSRange)rangeOfCString:(const char *)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3;
- (id)componentsSeparatedByData:(id)arg1;
- (id)dataByConvertingUnixNewlinesToNetwork;
- (id)MD5Digest;
@end

@interface NSDate (NSDateUtils)
+ (id)startOfDayWithDaysSinceToday:(int)arg1;
@end

@interface NSDictionary (MessageAdditions)
- (id)mutableSomewhatDeepCopy;
@end

@interface NSEvent (NSEventAdditions)
+ (BOOL)isShiftKeyDown;
+ (BOOL)isOptionKeyDown;
- (BOOL)isLeftMouseUpDown;
@end

@interface NSFileHandle (MessageAdditions)
+ (id)createFileAtPath:(id)arg1 flags:(int)arg2 mode:(unsigned short)arg3;
+ (id)fileHandleForUniqueFile:(id *)arg1 atPath:(id)arg2 mode:(unsigned short)arg3 extension:(id)arg4;
+ (id)fileHandleForUniqueFile:(id *)arg1 atPath:(id)arg2 mode:(unsigned short)arg3;
+ (id)fileHandleForTempFile:(id *)arg1 atPath:(id)arg2 mode:(unsigned short)arg3;
- (BOOL)writeLossyString:(id)arg1;
- (BOOL)writeBytes:(const char *)arg1 length:(unsigned int)arg2;
@end

@interface NSFileManager (NSFileManagerAdditions)
- (id)createUniqueDirectoryAtPath:(id)arg1 withIntermediateDirectories:(BOOL)arg2 attributes:(id)arg3 error:(id *)arg4;
- (BOOL)canWriteToDirectoryAtPath:(id)arg1;
- (BOOL)canWriteToFileAtPath:(id)arg1;
- (long long)fileSizeAtPath:(id)arg1 traverseLink:(BOOL)arg2;
- (id)fileModificationDateAtPath:(id)arg1 traverseLink:(BOOL)arg2;
- (id)pathsAtDirectory:(id)arg1 beginningWithString:(id)arg2;
- (void)deleteFilesInSortedArray:(id)arg1 matchingPrefix:(id)arg2 fromDirectory:(id)arg3;
- (BOOL)isAlias:(id)arg1;
- (id)destinationOfAliasAtPath:(id)arg1;
- (id)pathByResolvingAliasesInPath:(id)arg1;
- (id)localizedFullPath:(id)arg1;
- (id)pathByUniquingPath:(id)arg1;
- (id)uniquePathInDirectory:(id)arg1 withName:(id)arg2 extension:(id)arg3;
@end

@interface NSFileWrapper (ArchivedData)
- (id)archivedDataWithPartNumber:(id)arg1;
- (id)archivedData;
@end

@interface NSFileWrapper (UniquePaths)
+ (id)uniquedPathForFile:(id)arg1 inDirectory:(id)arg2;
@end

@interface NSFileWrapper (PersistenceWithoutLosingMetadata)
- (id)dictionaryRepresentation;
- (id)dictionaryForNoteSyncing;
- (id)initWithDictionaryRepresentation:(id)arg1;
@end

@interface NSFileWrapper (HFSExtensions)
+ (void)loadMessageExtensions;
- (void)setResourceForkData:(id)arg1;
- (id)resourceForkData;
- (void)setType:(unsigned long)arg1;
- (unsigned long)type;
- (void)setCreator:(unsigned long)arg1;
- (unsigned long)creator;
- (void)setFinderFlags:(unsigned short)arg1;
- (unsigned short)finderFlags;
- (void)setShouldHideExtension:(BOOL)arg1;
- (BOOL)shouldHideExtension;
- (void)setFilePermissions:(id)arg1;
- (id)filePermissions;
- (void)setMimeType:(id)arg1;
- (id)mimeType;
- (id)bestMimeType;
- (void)setContentID:(id)arg1;
- (id)contentID;
- (void)setQuarantineProperties:(id)arg1;
- (id)quarantineProperties;
- (void)addGatekeeperQuarantineToPath:(id)arg1;
- (void)setWhereFroms:(id)arg1;
- (id)whereFroms;
- (void)setMessageID:(id)arg1;
- (id)messageID;
- (BOOL)couldConfuseWindowsClients;
- (void)setShouldBeViewedInline:(BOOL)arg1;
- (BOOL)shouldBeViewedInline;
- (void)setMailSpecialHandlingType:(id)arg1;
- (id)mailSpecialHandlingType;
- (BOOL)isImageFile;
- (void)isImageFile:(char *)arg1 isPDF:(char *)arg2;
- (void)_isImageFile:(char *)arg1 isPDF:(char *)arg2 bestMimeType:(id *)arg3;
- (void)setImageSize:(struct _NSSize)arg1 imageBytes:(unsigned int)arg2;
- (struct _NSSize)imageSize;
- (unsigned int)imageBytes;
- (id)preferredFilenameWithoutHiddenExtension;
- (BOOL)isPlaceholder;
- (BOOL)isRemotelyAccessed;
- (id)remoteAccessMimeType;
- (id)tmpFullPath;
- (BOOL)isALargeAttachment;
- (unsigned int)approximateSize;
- (id)pathToAttachment;
- (id)stringForIndexing;
- (BOOL)createEmptyAttachmentAtPath:(id)arg1;
- (BOOL)_emptyAttachmentExists;
- (id)emptyAttachmentPath;
- (void)removeEmptyAttachment;
- (void)setSavedPath:(id)arg1;
- (id)savedPath;
- (BOOL)_Message_writeToFile:(id)arg1 atomically:(BOOL)arg2 updateFilenames:(BOOL)arg3;
- (id)iconCreateIfNecessary:(BOOL)arg1;
- (id)_Message_initWithPath:(id)arg1;
- (void)_Message_setPreferredFilename:(id)arg1;
- (BOOL)_Message_updateFromPath:(id)arg1 checkOnly:(BOOL)arg2 exists:(char *)arg3;
@end

@interface NSImage (ASBetterImageLookup)
+ (id)appIconIncludingUserCustomization;
+ (id)appIconWithUnreadBadge:(int)arg1 baseImageName:(id)arg2;
+ (id)createScaledImageFromImage:(id)arg1 desiredSize:(struct _NSSize)arg2;
+ (id)imagePasteboardTypesWithPreferenceToPNG;
+ (id)imageDataForType:(id *)arg1 fromPasteboard:(id)arg2;
- (id)opaqueImage;
- (id)bitmapImageRep;
- (id)PNGData;
- (unsigned int)frameCount;
- (BOOL)isAnimated;
- (void)drawTransformedInRect:(struct _NSRect)arg1 fromRect:(struct _NSRect)arg2 operation:(unsigned int)arg3 fraction:(float)arg4 flip:(BOOL)arg5;
- (float)pixelsWide;
- (float)pixelsHigh;
@end

@interface NSConditionLock (MessageAdditions)
- (BOOL)lockIfCondition:(int)arg1;
@end

@interface NSLock (MessageAdditions)
- (void)waitForLock;
@end

@interface NSScanner (NSScannerUtils)
- (BOOL)scanStringOfLength:(unsigned int)arg1 intoString:(id *)arg2;
- (BOOL)betterScanUpToCharactersFromSet:(id)arg1 intoString:(id *)arg2;
- (BOOL)scanEndIntoString:(id *)arg1;
- (id)nextTokenWithPunctuation:(id)arg1;
- (BOOL)scanUpAndOverString:(id)arg1;
@end

@interface NSSet (MessageAdditions)
- (id)getAllObjectsAsArray;
- (void)getAllObjects:(id *)arg1;
- (BOOL)containsArray:(id)arg1;
@end

@interface NSMutableSet (MessageAdditions)
- (id)uniquedObject:(id)arg1;
- (void)removeObjectsInArray:(id)arg1;
@end

@interface NSSound (MessageAdditions)
+ (void)_playNextSound;
+ (void)_playSound;
+ (void)sound:(id)arg1 didFinishPlaying:(BOOL)arg2;
+ (void)_setupPlayList;
+ (void)_addSoundOrPathToPlayList:(id)arg1 playImmediately:(BOOL)arg2;
+ (void)addSoundToPlayList:(id)arg1 playImmediately:(BOOL)arg2;
+ (void)addSoundPathToPlayList:(id)arg1 playImmediately:(BOOL)arg2;
+ (id)validPathToSound:(id)arg1;
+ (id)systemLibrarySoundsDirs;
+ (id)librarySoundsDirs;
+ (id)networkLibrarySoundsDirs;
+ (id)tildeLibrarySoundsDirs;
+ (id)appendSoundsToPaths:(id)arg1;
+ (id)soundsAtPaths:(id)arg1;
- (void)_playAsMailSound;
@end

@interface NSString (StationeryUtilities)
- (id)urlStringByIncrementingCompositeVersionNumber;
- (id)urlStringByInsertingCompositeVersionNumber;
@end

@interface NSString (NSStringUtils)
+ (id)messageIDStringWithDomainHint:(id)arg1;
+ (id)messageIDStringFromCidUrl:(id)arg1;
+ (id)stringWithData:(id)arg1 encoding:(unsigned int)arg2;
+ (id)stringWithAttachmentCharacter;
+ (id)createUniqueIdString;
- (unsigned int)hexIntValue;
- (unsigned long long)hexLongLongValue;
- (id)smartCapitalizedString;
- (id)stringByReplacingString:(id)arg1 withString:(id)arg2;
- (id)stringByRemovingCharactersInSet:(id)arg1;
- (id)stringByApplyingBodyClassName:(id)arg1;
- (id)createStringByApplyingBodyClassName:(id)arg1;
- (id)stringByChangingBodyTagToDiv;
- (id)stringByRemovingLineEndingsForHTML;
- (id)stringByReplacingNonBreakingSpacesWithString:(id)arg1;
- (id)specialSlash;
- (id)stringByReplacingSlashesWithSpecialSlashes;
- (id)stringByReplacingSpecialSlashesWithSlashes;
- (id)stringByReplacingSpecialSlashesWith:(id)arg1;
- (BOOL)containsOnlyWhitespace;
- (BOOL)containsOnlyBreakingWhitespace;
- (id)stringByLocalizingReOrFwdPrefix;
- (unsigned int)effectivePrefixLength;
- (id)fileSystemString;
- (id)stringWithNormalizedUnicodeCompositionForMail;
- (id)stringSuitableForHTML;
- (id)stringWithNoExtraSpaces;
- (int)compareAsInts:(id)arg1;
- (id)MD5Digest;
- (id)messageIDSubstring;
- (id)encodedMessageID;
- (id)encodedMessageIDString;
- (id)createStringByEndTruncatingForWidth:(float)arg1 usingFont:(id)arg2;
- (id)uniqueFilenameWithRespectToFilenames:(id)arg1;
- (int)caseInsensitiveCompareExcludingXDash:(id)arg1;
- (id)componentsSeparatedByPattern:(id)arg1;
- (id)spotlightQueryStringWithQualifier:(int)arg1;
- (BOOL)isValidUniqueIdString;
- (id)feedURLString;
- (id)firstLine;
- (id)secondToLastPathComponent;
- (BOOL)hasPrefixIgnoreCaseAndDiacritics:(id)arg1;
- (BOOL)isEqualToStringIgnoreCaseAndDiacritics:(id)arg1;
- (BOOL)isEqualToStringIgnoringCase:(id)arg1;
- (id)validURL;
- (BOOL)isEqualExceptForFinalSlash:(id)arg1;
@end

@interface NSTableView (MailAdditions)
- (int)firstSelectedRow;
- (int)lastSelectedRow;
- (BOOL)isSelectionVisible;
- (void)showSelectionAndCenter:(BOOL)arg1;
- (void)scrollRowToVisible:(int)arg1 position:(int)arg2;
@end

@interface NTLMAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface MessageStore (ParentalControl)
- (void)setPermissionRequestState:(int)arg1 forMessage:(id)arg2;
@end

@interface Message (ParentalControl)
- (BOOL)isParentResponseMessage:(char *)arg1 isRejected:(char *)arg2 requestedAddresses:(id)arg3 requestIsForSenders:(char *)arg4;
- (BOOL)isChildRequestMessage:(id)arg1 requestIsForSenders:(char *)arg2 childAddress:(id *)arg3 permissionRequestState:(int *)arg4;
- (BOOL)isChildRequestMessage;
@end

@interface NSString (PathUtils)
+ (id)pathWithDirectory:(id)arg1 filename:(id)arg2 extension:(id)arg3;
- (id)uniquePathWithMaximumLength:(unsigned int)arg1;
- (BOOL)deletePath;
- (BOOL)isSubdirectoryOfPath:(id)arg1;
- (id)stringByReallyAbbreviatingWithTildeInPath;
- (id)betterStringByResolvingSymlinksInPath;
@end

@interface PlainAuthScheme (ScriptingSupport)
- (int)applescriptScheme;
@end

@interface NSError (POP3ConnectionExtensions)
- (int)POP3ResponseCode;
@end

@interface POPAccount (Applescript)
- (BOOL)deleteMessagesWhenMovedFromInbox;
- (void)setDeleteMessagesWhenMovedFromInbox:(BOOL)arg1;
- (BOOL)deleteMessagesOnServer;
- (void)setDeleteMessagesOnServer:(BOOL)arg1;
- (id)mailboxes;
- (id)objectSpecifierForMailboxUid:(id)arg1;
- (id)valueInMailboxesWithName:(id)arg1;
@end

@interface RemoteStoreSizeEngine (Internal)
- (void)_getSizeForMailboxUid:(id)arg1;
- (BOOL)_changeUsageInfo:(CDStruct_ff11e81d *)arg1 forMailboxUid:(id)arg2 refetchQuotas:(BOOL)arg3;
- (void)_sizeChangedForMailboxUid:(id)arg1;
- (void)_mailboxSizeChanged:(id)arg1;
- (void)_mailboxBecameInvalid:(id)arg1;
@end

@interface MessageStore (RSSAdditions)
+ (void)deleteUnflaggedEntriesCreatedBeforeDate:(id)arg1;
- (void)updateEntries:(id)arg1 fromFeed:(id)arg2;
- (void)changeFlagsForEntries:(id)arg1 fromFeed:(id)arg2;
- (void)updateStatusFromFeed:(id)arg1 error:(id)arg2 errorMessage:(id)arg3;
@end

@interface Connection (Gross)
- (id)_nssocket;
@end

@interface MimePart (SMIMEExtensions)
- (void)verifySignature:(id *)arg1;
- (id)decodeMultipartSigned;
- (id)_decodeApplicationPkcs7_mime:(id *)arg1;
- (id)decodeApplicationPkcs7_mime;
- (id)copyMessageSigners;
- (id)copySigningCertificates;
- (id)copySignerLabels;
- (id)createSignedPartWithData:(id)arg1 sender:(id)arg2 signatureData:(id *)arg3;
- (id)createEncryptedPartWithData:(id)arg1 recipients:(id)arg2 encryptedData:(id *)arg3;
@end

@interface SizeEngine (Internal)
- (void)_startWorkerThreadIfNeeded;
- (void)_workerThreadFinished:(id)arg1;
- (void)_runWorkerThread;
- (BOOL)_prepareToRefresh;
- (BOOL)_shouldStartWorkerThread;
- (void)_postChangeNotificationWithUserInfo:(id)arg1;
@end

@interface SMTPAccount (Applescript)
- (id)objectSpecifier;
@end

@interface SMTPConnection (PrivateCommands)
- (int)_sendCommand:(const char *)arg1 length:(unsigned int)arg2 argument:(id)arg3 trailer:(unsigned char)arg4;
- (int)_getReply;
- (void)_readResponseRange:(struct _NSRange *)arg1 isContinuation:(char *)arg2;
- (id)_getValidDomain;
- (int)_doHandshakeWithSecurityLayerType:(int)arg1 tryHELOIfEHLOFails:(BOOL)arg2;
- (int)_sendEHLOWithClientDomainName:(id)arg1;
- (int)_sendHELOWithClientDomainName:(id)arg1;
- (BOOL)_hasParameter:(id)arg1 forKeyword:(id)arg2;
@end

@interface SpecialMailboxUid (AppleScript)
+ (id)appleScriptNameForMailboxType:(int)arg1;
- (id)appleScriptKey;
- (id)objectSpecifier;
- (id)messages;
@end

@interface NSDate (toc_extension)
- (int)tocSillyDateInt;
@end

@interface CalTask (MailExtensions)
+ (id)createCalTaskFromCalTask:(id)arg1;
- (id)shortDescription;
- (void)updateWithMailToDoInformation:(id)arg1;
@end

@interface ToDoAlarm (Private)
- (int)changedProperties;
- (void)_alarmChangedProperties:(unsigned int)arg1;
- (id)syncToDoID;
- (void)setSyncToDoID:(id)arg1;
@end

@interface ToDoAlarm (Internal)
- (int)offsetTypeFromCalAlarm:(id)arg1;
- (int)offsetTypeFromAbsoluteTrigger:(id)arg1 andRelativeTrigger:(double)arg2;
- (int)timeAndSetReminderDateFromCalAlarm:(id)arg1;
- (int)timeAndSetReminderDateFromAbsoluteTrigger:(id)arg1 andRelativeTrigger:(double)arg2;
- (unsigned int)offsetDaysFromRelativeTrigger:(double)arg1;
- (int)previousOffsetType;
- (void)setPreviousOffsetType:(int)arg1;
- (int)previousType;
- (void)setPreviousType:(int)arg1;
- (id)delegate;
- (void)setHasChanged:(BOOL)arg1;
- (void)setChangedProperties:(int)arg1;
- (id)calAlarm;
- (void)setCalAlarm:(id)arg1;
- (id)lock;
@end

@interface NSObject (ToDoAlarmsDelegate)
- (void)toDoAlarms:(id)arg1 alarmAdded:(id)arg2;
- (void)toDoAlarms:(id)arg1 alarmRemoved:(id)arg2;
- (void)toDoAlarms:(id)arg1 alarmUpdated:(id)arg2;
@end

@interface CalCalendar (MailExtensions)
- (void)updateWithMailToDoCalendarInformation:(id)arg1;
- (id)shortDescription;
@end

@interface ToDoCalendar (private)
- (void)updatedProperty:(unsigned int)arg1;
@end

@interface ToDoCalendar (internal)
- (void)setHasChanged:(BOOL)arg1;
- (void)setChangedProperties:(int)arg1;
- (void)setAccount:(id)arg1;
@end

@interface ToDoCalendarGroup (Private)
- (void)setAccount:(id)arg1;
@end

@interface CalGroup (MailExtensions)
- (void)updateWithToDoCalendarGroupInformation:(id)arg1;
@end

@interface ToDoCalendarGroup (internal)
- (id)_accountForCalGroup:(id)arg1;
@end

@interface ToDoDifferenceAnalyzer (Internal)
- (void)_populateTableWithDifferences:(id)arg1 sourceType:(int)arg2;
- (void)_insertDifference:(id)arg1 differenceType:(int)arg2 sourceType:(int)arg3;
- (void)_addNonConflictOperationFromExpressionResult:(id)arg1;
- (int)_determineConflictHandlingMode:(unsigned int)arg1;
- (void)_processConflicts:(id)arg1;
@end

@interface ToDoDifferenceExpression (DebuggingAids)
- (id)storeDifference;
- (int)storeDifferenceType;
- (id)cacheDifference;
- (int)cacheDifferenceType;
@end

@interface NSPasteboard (ToDoPasteboardSupport)
- (BOOL)hasToDos;
- (id)todos;
- (void)insertTodos:(id)arg1;
@end

@interface NSArray (ToDoPasteboardArchiving)
- (id)pasteboardDataForTodos;
@end

@interface NSData (ToDoPasteboardUnarchiving)
- (id)todosFromPasteboardData;
@end

@interface ToDoReconciler (DebuggingAids)
+ (id)listOfGlobalAgents;
+ (id)listOfReconcilers;
+ (id)detailedListOfReconcilers;
- (int)currentPhase;
@end

@interface ToDoReconciler (ReconciliationController)
+ (BOOL)registerReconciliationAgent:(id)arg1;
+ (void)unregisterReconciliationAgent:(id)arg1;
- (BOOL)registerReconciliationAgent:(id)arg1;
- (void)unregisterReconciliationAgent:(id)arg1;
- (BOOL)setReconciliationMechanism:(id)arg1;
- (void)phaseCompletedByAgent:(id)arg1;
@end

@interface ToDoReconciler (Internal)
+ (id)objectAsKey:(id)arg1;
- (id)_initWithMailboxID:(long long)arg1;
- (BOOL)addAgent:(id)arg1;
- (void)removeAgent:(id)arg1;
- (void)setState:(int)arg1 forAgent:(id)arg2;
- (void)_triggerAgentsForPhase;
- (void)_reconcile;
@end

@interface ToDosCache (ForMetadataManagerAgent)
- (id)snapshotForMailboxID:(long long)arg1 idsFromUpdatedToDos:(id)arg2;
@end

@interface ToDosCache (ForCalendarStoreInterchange)
- (void)setCalendarStoreInterchange:(id)arg1;
@end

@interface ToDosCache (Internal)
- (id)_todoWithID:(id)arg1 loadIfNotFound:(BOOL)arg2;
- (id)_libraryToDoFromCalTask:(id)arg1 addToCache:(BOOL)arg2;
- (BOOL)_haveRecordOfDeletedToDoWithID:(id)arg1;
- (void)_removeDeletedToDoID:(id)arg1 forDocumentID:(id)arg2;
- (void)_addDeletedToDoID:(id)arg1 forDocumentID:(id)arg2;
@end

@interface NSMutableArray (ToDoUIDRemoteIDPair)
- (void)addPairWithToDoUID:(const id)arg1 remoteID:(const id)arg2;
@end

@interface ToDoStore (Internal)
+ (id)_toDoStoresByMailboxUid;
- (void)loadToDos;
- (long long)mailboxID;
@end

@interface NSUndoManager (ToDoUndoManager)
- (void)setValue:(id)arg1 forKey:(id)arg2 inToDo:(id)arg3;
- (void)setValue:(id)arg1 forKey:(id)arg2 inAlarm:(id)arg3;
- (void)addToDos:(id)arg1;
- (void)deleteToDos:(id)arg1;
- (void)addAlarm:(id)arg1 toAlarms:(id)arg2;
- (void)insertAlarm:(id)arg1 atIndex:(unsigned int)arg2 intoAlarms:(id)arg3;
- (void)removeAlarmAtIndex:(unsigned int)arg1 fromAlarms:(id)arg2;
- (void)removeAlarm:(id)arg1 fromAlarms:(id)arg2;
@end

@interface NSData (UuEnDecode)
- (id)uudecodedDataIntoFile:(id *)arg1 mode:(unsigned int *)arg2;
- (id)uuencodedDataWithFile:(id)arg1 mode:(unsigned int)arg2;
@end

@interface WebArchive (Conversion)
- (id)attributedString;
@end

@interface NSRunLoop (MessageExtensions)
+ (struct __CFRunLoopSource *)_addEmptySourceToRunLoop;
+ (void)_removeEmptySourceFromRunLoop:(struct __CFRunLoopSource *)arg1;
+ (BOOL)_flushQueuedEventsAddingSource:(BOOL)arg1;
+ (void)flushQueuedEvents;
@end

